# ---- chunk-9 ----
## Create value to use as factor changing incidence rates. REPLACE with (1-PIF) and use multiplicative PIF for common disease risk factors.
## Rob's comment about PIFs calcs: see function "health burden" in metahit_functions.R
incidence_change <- 0.95
## Generate scenario incidence (for each disease)
incidence_sc <- list()
index <- 1
for (age in i_age_cohort){
for (sex in i_sex){
for (disease in i_disease) {
# # Exclude bc for Males
# if (sex == "male" && disease == "bc"){
#   # cat("\n") # Uncomment to see list
# }
# else {
incidence_sc[[index]] <- disease_life_table_list_bl[[index]]$incidence_disease *
incidence_change
index <- index + 1
# }
}
}
}
## Uncommnet to check scenario incidence
# View(incidence_sc[[1]])
# ---- chunk-10 ----
disease_life_table_list_sc <- list()
index <- 1
for (age in i_age_cohort){
for (sex in i_sex){
for (disease in i_disease) {
# # Exclude bc for Males
# if (sex == "male" && disease == "bc"){
#   # cat("\n") #Uncomment to see list
# }
# if (sex == "male" && disease == "uc"){
#   # cat("\n") #Uncomment to see list
# }
# if (sex == "female" && disease == "pc"){
#   # cat("\n") #Uncomment to see list
# }
# else {
# cat("age ", age, " sex ", sex, "and disease", disease, "\n")
# modify mslt_df's incidence for the said scenario
td1 <- mslt_df
td1[td1$age >= age & td1$sex == sex,][[paste("incidence", disease, sep = "_")]] <- incidence_sc[[index]]
# Instead of idata, feed td to run scenarios
disease_life_table_list_sc[[index]] <- RunDisease(in_idata = td1, in_sex = sex,
in_mid_age = age, in_disease = disease)
disease_life_table_list_sc[[index]]$diff_inc_disease <-
disease_life_table_list_sc[[index]]$incidence_disease -   disease_life_table_list_bl[[index]]$incidence_disease
disease_life_table_list_sc[[index]]$diff_prev_disease <-
disease_life_table_list_sc[[index]]$px  - disease_life_table_list_bl[[index]]$px
disease_life_table_list_sc[[index]]$diff_mort_disease <-
disease_life_table_list_sc[[index]]$mx - disease_life_table_list_bl[[index]]$mx
disease_life_table_list_sc[[index]]$diff_pylds_disease <-
(disease_life_table_list_sc[[index]]$px - disease_life_table_list_bl[[index]]$px) * disease_life_table_list_bl[[index]]$dw_disease
index <- index + 1
# }
}
}
}
## Uncommnet to check scenario life tables
# View(disease_life_table_list_sc[[3]])
# ---- chunk-11 ----
## Generate total change in mortality rate
## Sum mortality rate change scenarios (mx_sc_total) (ONLY DOING MALES)
mx_sc_total <- list()
l_index <- 1
index <- 1
for (age in i_age_cohort){
for (sex in i_sex){
mortality_sum <- NULL
create_new <- T
for (disease in i_disease) {
if (sex == "male" && disease == "bc"){
# cat("\n")
}else{
if (create_new){
mortality_sum <- select(disease_life_table_list_sc[[index]],
c('age', 'sex'))
mortality_sum$total <- 0
create_new <- F
mortality_sum$total <- mortality_sum$total +
(disease_life_table_list_sc[[index]]$diff_mort_disease)
}else{
mortality_sum$total <- mortality_sum$total +
(disease_life_table_list_sc[[index]]$diff_mort_disease)
}
# cat(age, " - ", sex," - ",  disease," - ",  index, " - ", l_index,  "\n")
index <- index + 1
}
}
mx_sc_total[[l_index]] <- mortality_sum
l_index <- l_index + 1
}
}
## Uncommnet to check sceanrio mortality and changes
# View(mx_sc_total[[16]])
## Generate total change in prevalent yld rates
## Total ylds rate= sum (change prevalence disease*dw)
pylds_sc_total <- list()
l_index <- 1
index <- 1
for (age in i_age_cohort){
for (sex in i_sex){
pylds_sum <- NULL
create_new <- T
for (disease in i_disease) {
if (sex == "male" && disease == "bc"){
# cat("\n") #Uncomment to see list
}
if (sex == "male" && disease == "uc"){
# cat("\n") #Uncomment to see list
}
if (sex == "female" && disease == "pc"){
# cat("\n") #Uncomment to see list
}
else {
if (create_new){
pylds_sum <- select(disease_life_table_list_sc[[index]], c('age', 'sex'))
pylds_sum$total <- 0
create_new <- F
pylds_sum$total <- pylds_sum$total +
(disease_life_table_list_sc[[index]]$diff_pylds_disease)
}else{
pylds_sum$total <- pylds_sum$total +
(disease_life_table_list_sc[[index]]$diff_pylds_disease)
}
# cat(age, " - ", sex," - ",  disease," - ",  index, " - ", l_index,  "\n")
index <- index + 1
}
}
pylds_sc_total[[l_index]] <- pylds_sum
l_index <- l_index + 1
}
}
## Uncommnet to check scenario pyld change
# View(pylds_sc_total[[2]])
## Calculate general life tables with modified mortality and pylds total
## Original mortality rate is modified by the mx_sc_total (total change in mortality from diseases)
## Original pyld rate is modified by the change in each disease pylds
general_life_table_list_sc <- list()
index <- 1
for (age in i_age_cohort){
for (sex in i_sex){
# cat("age ", age, " and sex ", sex, "\n")
# modify idata's mortality and pyld total for the said scenario
td2 <- mslt_df
# td2 <- subset(td2, select = -c(mx, pyld_rate))
td2[td2$age >= age & td2$sex == sex,][[paste("mx")]] <- general_life_table_list_bl[[index]]$mx + mx_sc_total[[index]]$total
td2[td2$age >= age & td2$sex == sex,][[paste("pyld_rate")]] <- general_life_table_list_bl[[index]]$pyld_rate + pylds_sc_total[[index]]$total
# Instead of idata, feed td to run scenarios
general_life_table_list_sc[[index]] <- RunLifeTable(in_idata = td2, in_sex = sex, in_mid_age = age)
#
index <- index + 1
}
}
## Uncommnet to check scenario life tables
# View(general_life_table_list_sc[[32]])
# View(general_life_table_list_bl[[1]])
## Check difference life table baseline and scenario (uncomment to check)
# general_life_table_list_bl[[1]]$Lx - general_life_table_list_sc[[1]]$Lx
# general_life_table_list_bl[[1]]$Lwx - general_life_table_list_sc[[1]]$Lwx
View(disbayes_output_list[[1]])
View(disbayes_output_list[[2]])
disbayes_output_list[[3]]$disease
disbayes_output_list[[3]]$sex_disease
disbayes_output_list[[4]]$sex_disease
disbayes_output_list[[5]]$sex_disease
disbayes_output_list[[6]]$sex_disease
disbayes_output_list[[7]]$sex_disease
disbayes_output_list[[8]]$sex_disease
disbayes_output_list[[9]]$sex_disease
disbayes_output_list[[10]]$sex_disease
disbayes_output_list[[11]]$sex_disease
disbayes_output_list[[12]]$sex_disease
disbayes_output_list[[13]]$sex_disease
View(disease_life_table_list_bl[[1]])
View(general_life_table_list_bl[[1]])
disease_short_names
look_up_table <- read.csv("C:/Users/Bele/Dropbox/Collaborations/James Woodcock/mh-execute/inputs/mh_regions_lad_lookup.csv")
View(look_up_table)
city_regions <- data.frame(unique(look_up_table$cityregion))
View(city_regions)
city_regions <- data.frame(unique(look_up_table$cityregion, incomparables = FALSE))
View(city_regions)
city_regions <- data.frame(unique(look_up_table$cityregion, incomparables = TRUE))
city_regions <- data.frame(unique(look_up_table$cityregion))
city_regions <- data.frame(unique(look_up_table$cityregion)) %<%
city_regions[!apply(city_regions == "", 1, all),]
city_regions[!apply(city_regions == "", 1, all),]
city_regions <- city_regions[!apply(city_regions == "", 1, all),]
city_regions <- data.frame(unique(look_up_table$cityregion))
city_regions <- data.frame(unique(look_up_table$cityregion)) %>% city_regions[!apply(city_regions == "", 1, all),]
install.packages("janitor")
require(janitor)
city_regions <- data.frame(unique(look_up_table$cityregion)) %>% remove_empty("rows")
city_regions <- data.frame(unique(look_up_table$cityregion)) %>% remove_empty("rows")
city_regions <- data.frame(unique(look_up_table$cityregion)) %>% remove_rownames("1")
city_regions <- data.frame(unique(look_up_table$cityregion)) %>% remove_rownames(1)
city_regions <- data.frame(unique(look_up_table$cityregion)) %>% remove_empty_rows(city_regions)
city_regions <- data.frame(unique(look_up_table$cityregion)) %>% remove_empty_rows()
city_regions <- data.frame(unique(look_up_table$cityregion)) %>% remove_empty("rows")
local_goverment_areas <- look_up_table[complete.cases(look_up_table),]
View(local_goverment_areas)
local_goverment_areas <- look_up_table[complete.cases(look_up_table$cityregion),]
city_regions <- data.frame(unique(look_up_table$cityregion)) %>% city_regions[2:10,]
city_regions <- data.frame(unique(look_up_table$cityregion)) %>% city_regions[2:10, 1]
city_regions <- city_regions[2:10, 1]
city_regions <- data.frame(unique(look_up_table$cityregion))
city_regions <- city_regions[2:10,]
local_goverment_areas <- look_up_table[complete.cases(look_up_table$cityregion),]
local_goverment_areas <- filter(look_up_table$cityregion != "")
local_goverment_areas <- filter_if(look_up_table$cityregion != "")
local_goverment_areas <- filter_if(look_up_table, look_up_table$cityregion != "")
local_goverment_areas <-  loof_up_table %<% filter(look_up_table$cityregion != "")
local_goverment_areas <-  loof_up_table %>% filter(look_up_table$cityregion != "")
local_goverment_areas <-  look_up_table %>% filter(look_up_table$cityregion != "")
disease_short_names
local_goverment_areas$lad11nm
localities <- c('Bristol, City of', 'Bath and North East Somerset', 'North Somerset', 'South Gloucestershire')
year <- 2017
i_age_cohort <- c(22, 27, 32, 37, 42, 47, 52, 57, 62, 67, 72, 77, 82, 87, 92, 97)
i_sex <- c("male", "female")
## Source functions
getwd()
source("code/functions.R")
# ---- chunk-1 ----
## GBD MISSING DATA FOR NOTTINGHAM: Ashfield, Bassetlaw, Broxtowe, Gedling, Mansfield, Newark and Sherwood, Rushcliffe and City of London.
## Get data from GBD dowloaded data for England (all localities)
## Use code developed by Marko Tainio to extract zip files
## Created in February-March 2019 by Marko Tainio (modified by Belen Zapata June 2019 for Metahit project)
## This script extracts required Global Burden of Disease data from the zip files dowloaded from http://ghdx.healthdata.org/gbd-results-tool
## by first extracting zip-files, then reading csv file, adding required data to combined dataframe
## and finally deleiting extracted files. Resulting dataframe is then saved as csv-file.
## Defining folder where the data is stored (stored externally in my dropbox as the GBD files are large)
data_folder <- "C:/Users/Bele/Dropbox/Collaborations/James Woodcock/Metahit/Data/GBD2017"
temp_folder <- paste0(data_folder,"/temp")
result_folder <- paste0(data_folder,"/final")
gbdfile_name <- "/IHME-GBD_2017_DATA-0a504496-" # CHANGE NAME WHEN NEW DATA IS DOWNLOADED
## Next two lines defines locations that will be extracted.
LGAs <- unlist(read.csv("data/gbd/LGAs to be extracted.csv")[,2]) # CREATE FILE FOR YOUR LOCATIONS OF INTEREST, HERE LOCALITIES IN CITY OF BRISTOL REGION
data_extracted <- NULL
for (i in 1:18) { # LOOP NUMBER DEPENDS ON NUMBER OF ZIP FILES, HERE I JUST GOT DATA FOR ALL LOCALITIES IN ENGLAND
file_number <- i
file_select <- paste0(data_folder,gbdfile_name, i,".zip")
unzip(file_select, exdir=temp_folder)
data_read <- read.csv((paste0(temp_folder,"/", gbdfile_name, i, ".csv")))
file.remove(paste0(temp_folder,"/", gbdfile_name, i, ".csv"))
data_read <- subset(data_read, location_name %in% LGAs) # location name is easier to identify
data_extracted <- rbind(data_extracted,data_read)
}
unlink(paste0(temp_folder), recursive = TRUE)
disease_short_names <- data.frame(disease = unique(data_extracted$cause_name), sname = abbreviate(unique(data_extracted$cause_name, minlength = 2)))
disease_short_names <- disease_short_names %>% mutate_if(is.factor, as.character)
disease_measures_list <- data.frame(measure = unique(data_extracted$measure_name)) %>%
pull(measure) %>%
as.character() %>%
as.list()
gbd_input <- data_extracted
names(gbd_input) = gsub(pattern = "_name", replacement = "", x = names(gbd_input))
gbd_input <- select(gbd_input,-contains("id"))
gbd_input <- filter(gbd_input, location %in% localities)
gbd_input$location
unique(gbd_input$location)
gbd_data_localities_raw <- list()
index <- 1
for (l in localities){
for (y in year){
gbd_data_localities_raw[[index]] <- SortGbdInput(in_data = gbd_input, in_year = y, in_locality = l)
index <- index + 1
}
}
View(gbd_input)
levels(gbd_input$location)
gbd_input <- filter(gbd_input, location %in% localities) %>% mutate_if(is.factor, as.character)
levels(gbd_input$location)
unique(gbd_input$location)
### We first derive populaiton and cases numbers (e.g. all cause mortality) for each locality and then aggregate at the City Region level.
### Loop to create a raw data set for 2017 for each of the localities to then process to get requiered data for disbayes/dismod.
gbd_data_localities_raw <- list()
index <- 1
for (l in localities){
for (y in year){
gbd_data_localities_raw[[index]] <- SortGbdInput(in_data = gbd_input, in_year = y, in_locality = l)
index <- index + 1
}
}
gbd_input$year
data_folder <- "C:/Users/Bele/Dropbox/Collaborations/James Woodcock/Metahit/Data/GBD2017"
temp_folder <- paste0(data_folder,"/temp")
result_folder <- paste0(data_folder,"/final")
gbdfile_name <- "/IHME-GBD_2017_DATA-0a504496-" # CHANGE NAME WHEN NEW DATA IS DOWNLOADED
## Next two lines defines locations that will be extracted.
LGAs <- unlist(read.csv("data/gbd/LGAs to be extracted.csv")[,2]) # CREATE FILE FOR YOUR LOCATIONS OF INTEREST, HERE LOCALITIES IN CITY OF BRISTOL REGION
data_extracted <- NULL
for (i in 1:40) { # LOOP NUMBER DEPENDS ON NUMBER OF ZIP FILES, HERE I JUST GOT DATA FOR ALL LOCALITIES IN ENGLAND
file_number <- i
file_select <- paste0(data_folder,gbdfile_name, i,".zip")
unzip(file_select, exdir=temp_folder)
data_read <- read.csv((paste0(temp_folder,"/", gbdfile_name, i, ".csv")))
file.remove(paste0(temp_folder,"/", gbdfile_name, i, ".csv"))
data_read <- subset(data_read, location_name %in% LGAs) # location name is easier to identify
data_extracted <- rbind(data_extracted,data_read)
}
unlink(paste0(temp_folder), recursive = TRUE)
disease_short_names <- data.frame(disease = unique(data_extracted$cause_name), sname = abbreviate(unique(data_extracted$cause_name, minlength = 2)))
# disease_short_names <- mutate_all(disease_short_names, funs(tolower))
disease_short_names <- disease_short_names %>% mutate_if(is.factor, as.character)
disease_measures_list <- data.frame(measure = unique(data_extracted$measure_name)) %>%
pull(measure) %>%
as.character() %>%
as.list()
gbd_input <- data_extracted
names(gbd_input) = gsub(pattern = "_name", replacement = "", x = names(gbd_input))
gbd_input <- select(gbd_input,-contains("id"))
gbd_input <- filter(gbd_input, location %in% localities) %>% mutate_if(is.factor, as.character)
gbd_input$year
gbd_data_localities_raw <- list()
index <- 1
for (l in localities){
for (y in year){
gbd_data_localities_raw[[index]] <- SortGbdInput(in_data = gbd_input, in_year = y, in_locality = l)
index <- index + 1
}
}
gbd_loc_data_processed <- lapply(gbd_data_localities_raw, RunLocDf)
View(gbd_loc_data_processed[[1]])
gbd_Bristol_all_loc <- bind_rows(gbd_loc_data_processed, .id = 'number')
### Delete columns with rates (we recalculate them at the city region level)
gbd_Bristol_all_loc <-  select(gbd_Bristol_all_loc,-contains("rate"))
gbd_Bristol_all_loc <- gbd_Bristol_all_loc %>% mutate_if(is.factor, as.character)
### Create data frame adding up all values for Bristol
## Add sex age category for matching when adding up values (unique age_sex per locality)
gbd_Bristol_all_loc$sex_age_cat <- paste(gbd_Bristol_all_loc$sex, gbd_Bristol_all_loc$age, sep = "_")
gbd_Bristol_all_loc <- select(gbd_Bristol_all_loc, -c(age, sex, location, number))
## Create aggregated data frame (HAS A WARNING)
gbd_Bristol <- gbd_Bristol_all_loc %>%
group_by(sex_age_cat) %>%
summarise_all(funs(sum))
## Create two new columns for age and seX
gbd_Bristol_2017 <- gbd_Bristol %>%
separate(sex_age_cat, c("sex", "age"), "_")
names(gbd_Bristol_2017)
gbd_df <- gbd_Bristol_2017
# ------------------- Add age-groups --------------------#
# 22, 27, 32, 37, 42, 47, 52, 57, 62, 67, 72, 77, 82, 87, 92, 97
gbd_df$age_cat <- 0
gbd_df$age_cat [gbd_df$age =="Under 5"] <- 2
gbd_df$age_cat [gbd_df$age =="5 to 9"] <- 7
gbd_df$age_cat [gbd_df$age =="10 to 14"] <- 12
gbd_df$age_cat [gbd_df$age =="15 to 19"] <- 17
gbd_df$age_cat [gbd_df$age =="20 to 24"] <- 22
gbd_df$age_cat [gbd_df$age =="25 to 29"] <- 27
gbd_df$age_cat [gbd_df$age =="30 to 34"] <- 32
gbd_df$age_cat [gbd_df$age =="35 to 39"] <- 37
gbd_df$age_cat [gbd_df$age =="40 to 44"] <- 42
gbd_df$age_cat [gbd_df$age =="45 to 49"] <- 47
gbd_df$age_cat [gbd_df$age =="50 to 54"] <- 52
gbd_df$age_cat [gbd_df$age =="55 to 59"] <- 57
gbd_df$age_cat [gbd_df$age =="60 to 64"] <- 62
gbd_df$age_cat [gbd_df$age =="65 to 69"] <- 67
gbd_df$age_cat [gbd_df$age =="70 to 74"] <- 72
gbd_df$age_cat [gbd_df$age =="75 to 79"] <- 77
gbd_df$age_cat [gbd_df$age =="80 to 84"] <- 82
gbd_df$age_cat [gbd_df$age =="85 to 89"] <- 87
gbd_df$age_cat [gbd_df$age =="90 to 94"] <- 92
gbd_df$age_cat [gbd_df$age =="95 plus"] <- 97
### change sex to lower case
gbd_df$sex <- tolower(gbd_df$sex)
gbd_df$sex_age_cat <- paste(gbd_df$sex,gbd_df$age_cat, sep = "_"  )
# # View(gbd_df)
# names(gbd_df)
# ------------------- Sort frame --------------------#
gbd_df <- gbd_df[order(gbd_df$sex, gbd_df$age_cat),]
# ------------------- calculate rates per one--------------------#
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
dn <- disease_short_names$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character()
## If else will depend on final diseases
# # Exclude hdd and incidence and deaths and mdd (not included here)
# if((dm == "incidence" && dn == "hhd") || (dm == "deaths" && dn == "mdd" ) ){
#   # cat("\n") # Uncomment to see list
# }
# else {
gbd_df[[tolower(paste(dmeasure, "rate", disease_short_names$sname[d], sep = "_"))]] <- gbd_df[[tolower(paste(dmeasure, "number", disease_short_names$sname[d], sep = "_"))]]/gbd_df$population_number
}
}
## Uncomment to review
# names(gbd_df)
# View(gbd_df)
# ------ Write csv file to process in Dismod/Disbayes-------- # TO PROCESS
write_csv(gbd_df, "data/city regions/bristol/dismod/input_data.csv")
library(devtools)
in_data <- read.csv("data/city regions/bristol/dismod/input_data.csv")
disbayes_input_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
## this is not excluding all causes and road injuries
if (disease_short_names$disease[d] == "All causes" && disease_short_names$disease[d] == "Road injuries"){
# cat("\n") #Uncomment to see list
}
#
# if (disease_short_names$disease[d] == "Road injuries"){
else {
var_name <- paste0("rate_", disease_short_names$sname[d])
disbayes_input_list[[index]] <- filter(in_data, sex == sex_index) %>% select(age, sex, ends_with(var_name), population_number)
## Add column to show disease
disbayes_input_list[[index]]$disease <- disease_short_names$sname[d]
## Change column names to match disbayes code
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("incidence_rate_", disease_short_names$sname[d]))] <- "inc"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("deaths_rate_", disease_short_names$sname[d]))] <- "mort"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("prevalence_rate_", disease_short_names$sname[d]))] <- "prev"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== paste0("population_number")] <- "pop"
## We assume remission is 0
disbayes_input_list[[index]]$rem <- 0
## create denominator for disbayes code
disbayes_input_list[[index]]$prevdenom <- c(100,100,500,500,500,500,500,500,500,500,500,500,500,500,500,500,200,200,100,100) / 10 # total sample size 3910, generous for London (from CJ)
## Added agegroups to derive age groups by 1
disbayes_input_list[[index]]$agegrp <- as.integer(seq(0,95, by=5))
## Replace 0 with small numbers for incidence, otherwise, disbayes does not work.
disbayes_input_list[[index]]$inc <- ifelse(disbayes_input_list[[index]]$inc  == 0, 1e-08, disbayes_input_list[[index]]$inc)
## Convert 5 year data file to 100 year age intervals
outage <- 0:100  # assume inc/prev/mort same in each year within a five-year age group
ind <- findInterval(outage, disbayes_input_list[[index]]$agegr)
disbayes_input_list[[index]] <- disbayes_input_list[[index]][ind,]
disbayes_input_list[[index]]$age <- outage
disbayes_input_list[[index]] <- within(disbayes_input_list[[index]], {
ningrp <- rep(table(agegrp), table(agegrp))
# popmale <- round(popmale/ningrp) ## assume population uniform between years within age group.
pop <- round(pop/ningrp) ## assume population uniform between years within age group.
# ndieddismale <- round(popmale * (1 - exp(-mortmale)))
ndieddis <- round(pop * (1 - exp(-mort)))
# prevnmale <- round(prevdenom * prevmale)
prevn <- round(prevdenom * prev)
}
)
## add sex and disease variable to match with output data frame
disbayes_input_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <-  index +1
}
}
}
View(disbayes_input_list[[30]])
View(disbayes_input_list[[1]])
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
##Save to csv
write_csv(disbayes_input_list[[index]], paste0("data/city regions/bristol/dismod/input/", disease_short_names$sname[d], "_", sex_index, ".csv"))
index <- index +1
}
}
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
disbayes_output_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
# data <- disbayes_input_list[[index]]
if (disease_short_names$disease[d] == "All causes"){
# cat("\n") #Uncomment to see list
}
if (disease_short_names$disease[d] == "Road injuries"){
}
else {
data <- data.frame(read.csv(paste0("data/city regions/bristol/dismod/input/", disease_short_names$sname[d], "_", sex_index, ".csv")))
library(rstan)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
disbayes_output_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
# data <- disbayes_input_list[[index]]
if (disease_short_names$disease[d] == "All causes"){
# cat("\n") #Uncomment to see list
}
if (disease_short_names$disease[d] == "Road injuries"){
}
else {
data <- data.frame(read.csv(paste0("data/city regions/bristol/dismod/input/", disease_short_names$sname[d], "_", sex_index, ".csv")))
# Exclude all cause and road injuries
## The saved data for input may be deleted or not, perhaps useful to check errors.
# data.frame(read.csv(paste0("MSLT/data/city regions/bristol/dismod/input/", d_index, "_", sex_index, ".csv")))
## Why these priors? (inits?)
## Optiomization procresses from Dismod, can we incoporporate
datstan <- c(as.list(data), nage=nrow(data))
inits <- list(
list(cf=rep(0.0101, datstan$nage)),
list(cf=rep(0.0201, datstan$nage)),
list(cf=rep(0.0056, datstan$nage)),
list(cf=rep(0.0071, datstan$nage))
)
gbdcf <- stan("disbayes-master/gbdcf-unsmoothed.stan", data=datstan, init=inits)
## Extract Summary statistics
## Add directly do dibayes input list, first 100 observations?
disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[1:101, 1:3]
## add disease names
disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
## add sex
disbayes_output_list[[index]]$sex <- sex_index
## create sex and disease category to then join to input for disease life table dataset
disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
