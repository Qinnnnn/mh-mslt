<<<<<<< HEAD
=======
install_github("chjackson/disbayes")
install.packages(install_github) # (I added this)
library(devtools)
install_github("chjackson/disbayes")
require(knitr)
require(kableExtra)
require(citr)
require(gridExtra)
require(ggpubr)
require(grid)
require(ggplot2)
require(pillar)
>>>>>>> eadb94a65d3b6a4b0ba47e5a432e585877782a7c
require(devtools)
require(janitor)
require(tidyverse)
require(dplyr)
require(conflicted)
require(rlist)
if (interactive()) {
require(conflicted)
}
conflict_prefer("filter", "dplyr")
source('code/functions.R')
library(devtools)
source("code/functions.R")
source('code/functions.R')
source("code/functions.R")
library(devtools)
install.packages("devtools")
library(devtools)
library(devtools)
install.packages("devtools")
install.packages("devtools", lib="~/R/lib")
library(devtools)
# install.packages("devtools", lib="~/R/lib")
install.packages("devtools")
# install.packages("devtools", lib="~/R/lib")
install.packages("devtools")
require(knitr)
require(kableExtra)
require(citr)
require(gridExtra)
require(ggpubr)
require(grid)
require(ggplot2)
require(pillar)
require(devtools)
require(janitor)
require(tidyverse)
require(dplyr)
require(conflicted)
require(rlist)
if (interactive()) {
require(conflicted)
}
conflict_prefer("filter", "dplyr")
rm (list = ls())
options(scipen=999)
# ---- chunk-1 ----
## Functions
source('code/functions.R')
install.package('dplyr')
install.packages("dplyr")
require(tidyverse)
install.packages("dplyr")
require(dplyr)
install.packages("tidyverse")
require(ggplot2)
# require(pillar)
require(devtools)
require(janitor)
require(tidyverse)
require(dplyr)
require(conflicted)
require(rlist)
if (interactive()) {
require(conflicted)
}
conflict_prefer("filter", "dplyr")
install.packages(c("conflicted", "devtools", "dplyr", "ggplot2", "janitor", "plyr", "rlist", "tidyverse"))
require(ggplot2)
# require(pillar)
require(devtools)
require(janitor)
require(tidyverse)
require(dplyr)
require(conflicted)
require(rlist)
if (interactive()) {
require(conflicted)
}
conflict_prefer("filter", "dplyr")
install.packages("rstan")
year <- 2017 # Only downloaded data for 2017
i_age_cohort <- c(17, 22, 27, 32, 37, 42, 47, 52, 57, 62, 67, 72, 77, 82, 87, 92, 97)
i_sex <- c("male", "female")
## Relative paths
relative_path_execute <- '../mh-execute/'
relative_path_mslt <- '../mh-mslt/'
## Get look up table from mh-execute
look_up_table <- read_csv(paste0(relative_path_execute, 'inputs/mh_regions_lad_lookup.csv'))
## Dataframe with local goverment areas within each city region
local_goverment_areas <- look_up_table
year <- 2017 # Only downloaded data for 2017
i_age_cohort <- c(17, 22, 27, 32, 37, 42, 47, 52, 57, 62, 67, 72, 77, 82, 87, 92, 97)
i_sex <- c("male", "female")
## Relative paths
relative_path_execute <- '../mh-execute/'
relative_path_mslt <- '../mh-mslt/'
## Get look up table from mh-execute
look_up_table <- read_csv(paste0(relative_path_execute, 'inputs/mh_regions_lad_lookup.csv'))
## Dataframe with local goverment areas within each city region
local_goverment_areas <- look_up_table
names_non_cr <- c("United Kingdom", "England", "East Midlands", "East of England", "Greater London", "North East England",
'North West England', "South East England", "South West England", "West Midlands", "Yorkshire and the Humber",
"Northern Ireland", "Scotland", "Wales")
for (i in names_non_cr){
local_goverment_areas <- rbind(local_goverment_areas, c(i, i, i, i, i))
}
local_goverment_areas <-  local_goverment_areas %>% dplyr::filter(cityregion != "")
names(local_goverment_areas)[names(local_goverment_areas) == "lad11nm"] <- "location"
local_goverment_areas$location <- gsub('St. Helens', 'St Helens', local_goverment_areas$location)
city_regions <- split(local_goverment_areas$location, f = local_goverment_areas$cityregion)
# ---- chunk-1.1: Get Global Buden of Disease data ----
## GBD MISSING DATA FOR NOTTINGHAM: Ashfield, Bassetlaw, Broxtowe, Gedling, Mansfield, Newark and Sherwood, Rushcliffe and City of London.
## Get data from GBD dowloaded data for England (all localities)
## Use code developed by Marko Tainio to extract zip files
## Created in February-March 2019 by Marko Tainio (modified by Belen Zapata June 2019 for Metahit project)
## This script extracts required Global Burden of Disease data from the zip files dowloaded from http://ghdx.healthdata.org/gbd-results-tool
## by first extracting zip-files, then reading csv file, adding required data to combined dataframe
## and finally deleiting extracted files. Resulting dataframe is then saved as csv-file.
## Defining folder where the data is stored (stored externally in my box as the GBD files are large)
## CHANGE TO v-DRIVE
data_folder <- "C:/Users/e95517/Dropbox/Collaborations/James Woodcock/Metahit/Data/GBD2017/"
temp_folder <- paste0(data_folder,"temp")
result_folder <- paste0(data_folder,"final")
gbdfile_name <- "IHME-GBD_2017_DATA-ac95a757-" # CHANGE NAME WHEN NEW DATA IS DOWNLOADED
## Loop to extract zip file data
data_extracted <- NULL
for (i in 1:4) { # LOOP NUMBER DEPENDS ON NUMBER OF ZIP FILES, HERE I JUST GOT DATA FOR ALL LOCALITIES IN ENGLAND
file_number <- i
file_select <- paste0(data_folder,gbdfile_name, i,".zip")
unzip(file_select, exdir=temp_folder)
data_read <- read_csv((paste0(temp_folder,"/", gbdfile_name, i, ".csv")))
file.remove(paste0(temp_folder,"/", gbdfile_name, i, ".csv"))
data_read <- subset(data_read, location_name %in% local_goverment_areas$location) # location name is easier to identify
data_extracted <- rbind(data_extracted,data_read)
}
unlink(paste0(temp_folder), recursive = TRUE)
work_folder <- "C:/Users/e95517/"
home_folder <- "C:/Users/Bele/"
data_folder <- paste0(home_folder, "Dropbox/Collaborations/James Woodcock/Metahit/Data/GBD2017/")
temp_folder <- paste0(data_folder,"temp")
result_folder <- paste0(data_folder,"final")
gbdfile_name <- "IHME-GBD_2017_DATA-ac95a757-" # CHANGE NAME WHEN NEW DATA IS DOWNLOADED
data_extracted <- NULL
for (i in 1:4) { # LOOP NUMBER DEPENDS ON NUMBER OF ZIP FILES, HERE I JUST GOT DATA FOR ALL LOCALITIES IN ENGLAND
file_number <- i
file_select <- paste0(data_folder,gbdfile_name, i,".zip")
unzip(file_select, exdir=temp_folder)
data_read <- read_csv((paste0(temp_folder,"/", gbdfile_name, i, ".csv")))
file.remove(paste0(temp_folder,"/", gbdfile_name, i, ".csv"))
data_read <- subset(data_read, location_name %in% local_goverment_areas$location) # location name is easier to identify
data_extracted <- rbind(data_extracted,data_read)
}
unlink(paste0(temp_folder), recursive = TRUE)
disease_short_names <- data.frame(disease = tolower(as.character(unique(data_extracted$cause_name))),
sname = tolower(abbreviate(unique(data_extracted$cause_name, max = 2))),
stringsAsFactors = F)
disease_short_names <- disease_short_names %>% mutate(is_not_dis = ifelse((str_detect(disease, "injuries") |
str_detect(disease, "All causes") |
str_detect(disease, "Lower respiratory infections")),
1, 0) )
disease_short_names[disease_short_names$sname == "allc", "is_not_dis"] <- 2
disease_short_names[disease_short_names$sname == "lwri", "is_not_dis"] <- 1
### Combine with acronyms from execute-mh
## Get execute-mh diseases (CHECK WITH ALI TO USE RELATIVE PATH TO READ DIRECLTY FROM MH-EXECUTE DIRECTORY, DATA PREP??)
disease_names_execute <- read_csv(paste0('../mh-execute/', "inputs/dose_response/disease_outcomes_lookup.csv"))
disease_names_execute <- disease_names_execute[1:2]
disease_names_execute$disease <- tolower(disease_names_execute$GBD_name)
disease_short_names <- left_join(disease_short_names, disease_names_execute, by = "disease")
## Add injuries
disease_short_names$acronym <- ifelse(str_detect(disease_short_names$disease, "injuries"), disease_short_names$disease, disease_short_names$acronym)
## Only keep first word for acronyns
disease_short_names$acronym <- word(disease_short_names$acronym, 1)
## Add males and females only diseases
disease_short_names$males <- ifelse(disease_short_names$disease %in% c("breast cancer", "uterine cancer"), 0, 1)
disease_short_names$females <- 1
## Replace NAs with blank
disease_short_names$acronym[is.na(disease_short_names$acronym)] <- "no_pif"
## Add column to match names from mh-execute
write_csv(disease_short_names, "data/parameters/disease_names.csv")
disease_measures_list <- data.frame(measure = unique(data_extracted$measure_name)) %>%
pull(measure) %>%
as.character() %>%
as.list()
# ---- chunk-2: Dismod and Disbayes data input preparation ----
gbd_input <- data_extracted
# ---- chunk-2.1: Clean data ----
names(gbd_input) = gsub(pattern = "_name", replacement = "", x = names(gbd_input))
gbd_input <- select(gbd_input,-contains("id"))
# gbd_input <- filter(gbd_input, location %in% localities) %>% mutate_if(is.factor, as.character)
gbd_input$cause <- tolower(gbd_input$cause)
gbd_input <- left_join(local_goverment_areas, gbd_input, by = "location")
# ---- chunk-2.2: Sort data per local goverment area ----
## We first derive populaiton and cases numbers (e.g. all cause mortality) for each locality and then aggregate at the City Region level.
city_regions_list <- split(gbd_input , f = gbd_input$cityregion)
city_regions_list_loc <- list()
for (i in 1:length(city_regions_list)){
city_regions_list_loc[[i]] <- split(city_regions_list[[i]], f = city_regions_list[[i]]$location)
}
index <- 1
gbd_loc_data_processed <- list()
for (i in 1:length(city_regions_list_loc)) {
gbd_loc_data_processed[[index]] <- lapply(city_regions_list_loc[[i]], RunLocDf)
index <- index + 1
}
### Delete null data frames within lists
gbd_loc_data_processed <-  list.clean(gbd_loc_data_processed, fun = is.null, recursive = TRUE)
# ---- chunk-2.3: Create data frame for city region with all localities ----
index <- 1
gbd_city_region_data <- list()
for (i in 1:length(gbd_loc_data_processed)){
gbd_city_region_data[[index]] <- bind_rows(gbd_loc_data_processed[[i]], .id = 'number')
## Drop number columns
gbd_city_region_data[[index]] <- gbd_city_region_data[[index]][ -c(1) ]
## Clean dataframes per city regions
gbd_city_region_data[[index]] <- dplyr::select(gbd_city_region_data[[index]], -contains('rate')) %>% mutate_if(is.factor, as.character)
gbd_city_region_data[[index]]$sex_age_cat <- paste(gbd_city_region_data[[index]]$sex, gbd_city_region_data[[index]]$age, sep = "_")
gbd_city_region_data[[index]] <- select(gbd_city_region_data[[index]], -c(age, sex, location))
suppressWarnings(names(gbd_city_region_data)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
index <- index + 1
}
# View(gbd_city_region_data[[1]])
## Create aggregated data frame (sums all numbers from localities within a city region)
gbd_city_region_data_agg <- list()
index <- 1
for (i in 1:length(gbd_city_region_data)) {
gbd_city_region_data_agg[[index]] <- gbd_city_region_data[[i]] %>%
group_by(sex_age_cat) %>%
summarise_all(funs(sum))%>%
separate(sex_age_cat, c("sex", "age"), "_")
## Add numberical age categories
gbd_city_region_data_agg[[index]]$age_cat <- 0
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="Under 5"] <- 2
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="5 to 9"] <- 7
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="10 to 14"] <- 12
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="15 to 19"] <- 17
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="20 to 24"] <- 22
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="25 to 29"] <- 27
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="30 to 34"] <- 32
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="35 to 39"] <- 37
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="40 to 44"] <- 42
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="45 to 49"] <- 47
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="50 to 54"] <- 52
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="55 to 59"] <- 57
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="60 to 64"] <- 62
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="65 to 69"] <- 67
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="70 to 74"] <- 72
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="75 to 79"] <- 77
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="80 to 84"] <- 82
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="85 to 89"] <- 87
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="90 to 94"] <- 92
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="95 plus"] <- 97
## Change sex variable to lower case
gbd_city_region_data_agg[[index]]$sex <- tolower(gbd_city_region_data_agg[[index]]$sex)
## Create age_sex category
gbd_city_region_data_agg[[index]]$sex_age_cat <- paste(gbd_city_region_data_agg[[index]]$sex,gbd_city_region_data_agg[[index]]$age_cat, sep = "_"  )
## Order data
gbd_city_region_data_agg[[index]] <- gbd_city_region_data_agg[[index]][order(gbd_city_region_data_agg[[index]]$sex, gbd_city_region_data_agg[[index]]$age_cat),]
## Calculate rates per one
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
dn <- disease_short_names$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character()
gbd_city_region_data_agg[[index]][[tolower(paste(dmeasure, "rate", disease_short_names$sname[d], sep = "_"))]] <- gbd_city_region_data_agg[[index]][[tolower(paste(dmeasure, "number", disease_short_names$sname[d], sep = "_"))]]/
gbd_city_region_data_agg[[index]]$population_number
}
}
suppressWarnings(names(gbd_city_region_data_agg)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
## Save as rds (path)
write_rds(gbd_city_region_data_agg[[index]], paste0(relative_path_mslt, "data/city regions/GBD sorted/", unique(city_regions_list_loc[[i]][[1]]$cityregion), ".rds"))
index <- index + 1
}
index <- 1
gbd_loc_data_processed <- list()
for (i in 1:length(city_regions_list_loc)) {
gbd_loc_data_processed[[index]] <- lapply(city_regions_list_loc[[i]], RunLocDf)
index <- index + 1
}
source('code/functions.R')
index <- 1
gbd_loc_data_processed <- list()
for (i in 1:length(city_regions_list_loc)) {
gbd_loc_data_processed[[index]] <- lapply(city_regions_list_loc[[i]], RunLocDf)
index <- index + 1
}
gbd_loc_data_processed <-  list.clean(gbd_loc_data_processed, fun = is.null, recursive = TRUE)
index <- 1
gbd_city_region_data <- list()
for (i in 1:length(gbd_loc_data_processed)){
gbd_city_region_data[[index]] <- bind_rows(gbd_loc_data_processed[[i]], .id = 'number')
## Drop number columns
gbd_city_region_data[[index]] <- gbd_city_region_data[[index]][ -c(1) ]
## Clean dataframes per city regions
gbd_city_region_data[[index]] <- dplyr::select(gbd_city_region_data[[index]], -contains('rate')) %>% mutate_if(is.factor, as.character)
gbd_city_region_data[[index]]$sex_age_cat <- paste(gbd_city_region_data[[index]]$sex, gbd_city_region_data[[index]]$age, sep = "_")
gbd_city_region_data[[index]] <- select(gbd_city_region_data[[index]], -c(age, sex, location))
suppressWarnings(names(gbd_city_region_data)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
index <- index + 1
}
# View(gbd_city_region_data[[1]])
## Create aggregated data frame (sums all numbers from localities within a city region)
gbd_city_region_data_agg <- list()
index <- 1
for (i in 1:length(gbd_city_region_data)) {
gbd_city_region_data_agg[[index]] <- gbd_city_region_data[[i]] %>%
group_by(sex_age_cat) %>%
summarise_all(funs(sum))%>%
separate(sex_age_cat, c("sex", "age"), "_")
## Add numberical age categories
gbd_city_region_data_agg[[index]]$age_cat <- 0
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="Under 5"] <- 2
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="5 to 9"] <- 7
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="10 to 14"] <- 12
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="15 to 19"] <- 17
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="20 to 24"] <- 22
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="25 to 29"] <- 27
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="30 to 34"] <- 32
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="35 to 39"] <- 37
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="40 to 44"] <- 42
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="45 to 49"] <- 47
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="50 to 54"] <- 52
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="55 to 59"] <- 57
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="60 to 64"] <- 62
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="65 to 69"] <- 67
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="70 to 74"] <- 72
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="75 to 79"] <- 77
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="80 to 84"] <- 82
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="85 to 89"] <- 87
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="90 to 94"] <- 92
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="95 plus"] <- 97
## Change sex variable to lower case
gbd_city_region_data_agg[[index]]$sex <- tolower(gbd_city_region_data_agg[[index]]$sex)
## Create age_sex category
gbd_city_region_data_agg[[index]]$sex_age_cat <- paste(gbd_city_region_data_agg[[index]]$sex,gbd_city_region_data_agg[[index]]$age_cat, sep = "_"  )
## Order data
gbd_city_region_data_agg[[index]] <- gbd_city_region_data_agg[[index]][order(gbd_city_region_data_agg[[index]]$sex, gbd_city_region_data_agg[[index]]$age_cat),]
## Calculate rates per one
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
dn <- disease_short_names$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character()
gbd_city_region_data_agg[[index]][[tolower(paste(dmeasure, "rate", disease_short_names$sname[d], sep = "_"))]] <- gbd_city_region_data_agg[[index]][[tolower(paste(dmeasure, "number", disease_short_names$sname[d], sep = "_"))]]/
gbd_city_region_data_agg[[index]]$population_number
}
}
suppressWarnings(names(gbd_city_region_data_agg)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
## Save as rds (path)
write_rds(gbd_city_region_data_agg[[index]], paste0(relative_path_mslt, "data/city regions/GBD sorted/", unique(city_regions_list_loc[[i]][[1]]$cityregion), ".rds"))
index <- index + 1
}
UK_population_total<- sum(gbd_city_region_data_agg[["United Kingdom"]]$population_number)
print(UK_population_total)
England_population_total <- sum(gbd_city_region_data_agg[["England"]]$population_number)
print(England_population_total)
Wales_population_total <- sum(gbd_city_region_data_agg[["Wales"]]$population_number)
print(Wales_population_total)
Scotland_population_total <- sum(gbd_city_region_data_agg[["Scotland"]]$population_number)
print(Scotland_population_total)
Northern_Ireland_population_total <- sum(gbd_city_region_data_agg[["Northern Ireland"]]$population_number)
print(Northern_Ireland_population_total)
total_countries <- sum(England_population_total, Wales_population_total, Scotland_population_total, Northern_Ireland_population_total)
print(total_countries)
regions_England <- c("East Midlands", "East of England", "Greater London", "North East England", "North West England", "South East England", "South West England", "West Midlands", "Yorkshire and the Humber")
England_ihd_deaths <- sum(gbd_city_region_data_agg[["England"]]$deaths_number_ishd)
print(England_ihd_deaths)
total_regions_england_ihd_deaths <- list()
index <- 1
for (i in regions_England) {
total_regions_england_ihd_deaths[[index]] <- sum(gbd_city_region_data_agg[[paste0(i)]]$deaths_number_ishd)
index <- index + 1
}
sum_total_regions_ihd_deaths <- sum(total_regions_england_ihd_deaths[[1]], total_regions_england_ihd_deaths[[2]], total_regions_england_ihd_deaths[[3]],
total_regions_england_ihd_deaths[[4]], total_regions_england_ihd_deaths[[5]], total_regions_england_ihd_deaths[[6]],
total_regions_england_ihd_deaths[[7]], total_regions_england_ihd_deaths[[8]], total_regions_england_ihd_deaths[[9]])
print(sum_total_regions_ihd_deaths)
index <- 1
disbayes_input_list_city_regions <- list()
for (i in 1:length(gbd_city_region_data_agg)) {
disbayes_input_list_city_regions[[index]] <- GenInpDisbayes(gbd_city_region_data_agg[[i]])
names(disbayes_input_list_city_regions)[index] <- paste0(names(gbd_city_region_data_agg[i]))
index <- index + 1
}
for (i in 1:length(disbayes_input_list_city_regions)) {
city_name <- names(disbayes_input_list_city_regions[i])
for (j in 1:length(disbayes_input_list_city_regions[[i]])) {
## Add variable name to each of the diseases
disbayes_input_list_city_regions[[i]][[j]]$city_region <- city_name
temp_disease_name <- disbayes_input_list_city_regions[[i]][[j]][1,15]
print(paste0(city_name, "_",temp_disease_name))
write_rds(disbayes_input_list_city_regions[[i]][[j]],
paste0(relative_path_mslt, "data/city regions/Input disbayes/",city_name, "_",temp_disease_name,".rds"))
}
}
test <- disbayes_input_list_city_regions[[1]][[1]]
library(devtools)
install_github("chjackson/disbayes")
install_github("chjackson/disbayes")
library(devtools)
install_github("chjackson/disbayes")
devtools::install_github("r-lib/remotes")
.rs.restartR()
devtools::install_github("chjackson/disbayes")
library(devtools)
## BZ: added this as otherwise does not dowload from the github
devtools::install_github("r-lib/remotes")
.rs.restartR()
devtools::install_github("chjackson/disbayes")
install.packages("remotes")
devtools::install_github("chjackson/disbayes")
devtools::install_github("chjackson/disbayes")
devtools::install_github("chjackson/disbayes")
devtools::install_github("chjackson/disbayes")
library(devtools)
devtools::install_github("chjackson/disbayes")
# require(knitr)
# require(kableExtra)
# require(citr)
# require(gridExtra)
# require(ggpubr)
# require(grid)
require(ggplot2)
# require(pillar)
require(devtools)
require(janitor)
require(tidyverse)
require(dplyr)
require(conflicted)
require(rlist)
if (interactive()) {
require(conflicted)
}
conflict_prefer("filter", "dplyr")
source("code/functions.R")
## Define parameters
year <- 2017 # Only downloaded data for 2017
i_age_cohort <- c(17, 22, 27, 32, 37, 42, 47, 52, 57, 62, 67, 72, 77, 82, 87, 92, 97)
i_sex <- c("male", "female")
## Relative paths
relative_path_execute <- '../mh-execute/'
relative_path_mslt <- '../mh-mslt/'
## Get look up table from mh-execute
look_up_table <- read_csv(paste0(relative_path_execute, 'inputs/mh_regions_lad_lookup.csv'))
## Dataframe with local goverment areas within each city region
local_goverment_areas <- look_up_table
## Add non city regions names
names_non_cr <- c("United Kingdom", "England", "East Midlands", "East of England", "Greater London", "North East England",
'North West England', "South East England", "South West England", "West Midlands", "Yorkshire and the Humber",
"Northern Ireland", "Scotland", "Wales")
for (i in names_non_cr){
local_goverment_areas <- rbind(local_goverment_areas, c(i, i, i, i, i))
}
local_goverment_areas <-  local_goverment_areas %>% dplyr::filter(cityregion != "")
names(local_goverment_areas)[names(local_goverment_areas) == "lad11nm"] <- "location"
local_goverment_areas$location <- gsub('St. Helens', 'St Helens', local_goverment_areas$location)
city_regions <- split(local_goverment_areas$location, f = local_goverment_areas$cityregion)
# ---- chunk-1.1: Get Global Buden of Disease data ----
## GBD MISSING DATA FOR NOTTINGHAM: Ashfield, Bassetlaw, Broxtowe, Gedling, Mansfield, Newark and Sherwood, Rushcliffe and City of London.
## Get data from GBD dowloaded data for England (all localities)
## Use code developed by Marko Tainio to extract zip files
## Created in February-March 2019 by Marko Tainio (modified by Belen Zapata June 2019 for Metahit project)
## This script extracts required Global Burden of Disease data from the zip files dowloaded from http://ghdx.healthdata.org/gbd-results-tool
## by first extracting zip-files, then reading csv file, adding required data to combined dataframe
## and finally deleiting extracted files. Resulting dataframe is then saved as csv-file.
## Defining folder where the data is stored (stored externally in my box as the GBD files are large)
## CHANGE TO v-DRIVE
work_folder <- "C:/Users/e95517/"
home_folder <- "C:/Users/Bele/"
data_folder <- paste0(home_folder, "Dropbox/Collaborations/James Woodcock/Metahit/Data/GBD2017/")
temp_folder <- paste0(data_folder,"temp")
result_folder <- paste0(data_folder,"final")
gbdfile_name <- "IHME-GBD_2017_DATA-ac95a757-" # CHANGE NAME WHEN NEW DATA IS DOWNLOADED
devtools::install_github("chjackson/disbayes")
##
install.packages("scales", dependencies = TRUE)
install.packages("scales", dependencies = TRUE)
devtools::install_github("chjackson/disbayes")
pkgbuild::has_build_tools(debug = TRUE)
options(buildtools.check = NULL)
devtools::install_github("chjackson/disbayes")
.rs.restartR()
library(devtools)
devtools::install_github("chjackson/disbayes")
install.packages(c("devtools", "pkgbuild"))
library(devtools)
devtools::install_github("chjackson/disbayes")
library(devtools)
<<<<<<< HEAD
devtools::install_github("chjackson/disbayes")
Sys.getenv("R_MAKEVARS_USER")
install.packages("
https://win-builder.r-project.org/1vUk5Gxm9QqM/rstan_2.19.1.zip", repos = NULL)
install.packages("https://win-builder.r-project.org/1vUk5Gxm9QqM/rstan_2.19.1.zip", repos = NULL)
pkgbuild::has_build_tools(debug = TRUE)
options(buildtools.check = NULL)
devtools::install_github("chjackson/disbayes")
Sys.getenv("R_MAKEVARS_USER")
CXX14 = "C:\Rtools\mingw_64\bin\g++.exe"
CXX14 = "C:/Rtools/mingw_64/bin/g++.exe"
Sys.getenv("R_MAKEVARS_USER")
install_github("chjackson/disbayes")
=======
CXX14 = "C:/Rtools/mingw_64/bin/g++.exe"
Sys.getenv("R_MAKEVARS_USER")
>>>>>>> eadb94a65d3b6a4b0ba47e5a432e585877782a7c
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M))
file.create(M)
cat("\nCXX14FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
"CXX14 = $(BINPREF)g++ -m$(WIN) -std=c++1y",
"CXX11FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
<<<<<<< HEAD
install_github("chjackson/disbayes")
library(disbayes)
library(disbayes)
=======
##
install_github("chjackson/disbayes")
>>>>>>> eadb94a65d3b6a4b0ba47e5a432e585877782a7c
