## Add injuries
DISEASE_SHORT_NAMES$acronym <- ifelse(str_detect(DISEASE_SHORT_NAMES$disease, "injuries"), DISEASE_SHORT_NAMES$disease, DISEASE_SHORT_NAMES$acronym)
## Only keep first word for acronyns
DISEASE_SHORT_NAMES$acronym <- word(DISEASE_SHORT_NAMES$acronym, 1)
## Add males and females only diseases
DISEASE_SHORT_NAMES$males <- ifelse(DISEASE_SHORT_NAMES$disease %in% c("breast cancer", "uterine cancer"), 0, 1)
DISEASE_SHORT_NAMES$females <- 1
DISEASE_SHORT_NAMES$sname <- gsub("'", '', DISEASE_SHORT_NAMES$sname)
## Replace NAs with blank
DISEASE_SHORT_NAMES$acronym[is.na(DISEASE_SHORT_NAMES$acronym)] <- "no_pif"
## Add column to match names from mh-execute
write_csv(DISEASE_SHORT_NAMES, "data/parameters/disease_names.csv")
disease_measures_list <- data.frame(measure = unique(data_extracted$measure_name)) %>%
pull(measure) %>%
as.character() %>%
as.list()
names(data_extracted) = gsub(pattern = "_name", replacement = "", x = names(data_extracted))
data_extracted <- select(data_extracted,-contains("id"))
data_extracted$cause <- tolower(data_extracted$cause)
data_extracted <- left_join(local_goverment_areas, data_extracted, by = "location")
# ---- chunk-1.4: Sort data per local goverment area ----
## We first derive population and cases numbers (e.g. all cause mortality) for each locality and then aggregate at the City Region level.
city_regions_list_loc <- split(data_extracted , f = data_extracted$cityregion)
city_regions_list <- split(data_extracted , f = data_extracted$cityregion)
city_regions_list_loc <- list()
for (i in 1:length(city_regions_list)){
city_regions_list_loc[[i]] <- split(city_regions_list[[i]], f = city_regions_list[[i]]$location)
}
### This code takes about 0.5 hour to run CHECK WITH ROB AND ALAN HOW TO MAKE FASTER
index <- 1
gbd_loc_data_processed <- list()
for (i in 1:length(city_regions_list_loc)) {
gbd_loc_data_processed[[index]] <- lapply(city_regions_list_loc[[i]], RunLocDf)
index <- index + 1
}
source('code/functions.R')
names(data_extracted) = gsub(pattern = "_name", replacement = "", x = names(data_extracted))
data_extracted <- select(data_extracted,-contains("id"))
data_extracted$cause <- tolower(data_extracted$cause)
data_extracted <- left_join(local_goverment_areas, data_extracted, by = "location")
# ---- chunk-1.4: Sort data per local goverment area ----
## We first derive population and cases numbers (e.g. all cause mortality) for each locality and then aggregate at the City Region level.
city_regions_list_loc <- split(data_extracted , f = data_extracted$cityregion)
city_regions_list <- split(data_extracted , f = data_extracted$cityregion)
city_regions_list_loc <- list()
for (i in 1:length(city_regions_list)){
city_regions_list_loc[[i]] <- split(city_regions_list[[i]], f = city_regions_list[[i]]$location)
}
### This code takes about 0.5 hour to run CHECK WITH ROB AND ALAN HOW TO MAKE FASTER
index <- 1
gbd_loc_data_processed <- list()
for (i in 1:length(city_regions_list_loc)) {
gbd_loc_data_processed[[index]] <- lapply(city_regions_list_loc[[i]], RunLocDf)
index <- index + 1
}
index <- 1
gbd_loc_data_processed <- list()
for (i in 1:length(city_regions_list_loc)) {
gbd_loc_data_processed[[index]] <- lapply(city_regions_list_loc[[i]], RunLocDf)
index <- index + 1
}
### Delete null data frames within lists
gbd_loc_data_processed <-  list.clean(gbd_loc_data_processed, fun = is.null, recursive = TRUE)
gbd_loc_data_processed <-  list.clean(gbd_loc_data_processed, fun = is.null, recursive = TRUE)
index <- 1
gbd_loc_data_processed <- list()
for (i in 1:length(city_regions_list_loc)) {
gbd_loc_data_processed[[index]] <- lapply(city_regions_list_loc[[i]], RunLocDf)
index <- index + 1
}
require(ggpubr)
require(ggplot2)
require(arsenal)
require(janitor)
require(tidyverse)
require(dplyr)
require(conflicted)
require(rlist)
require(reshape)
require(reshape2)
require(zoo)
require(stringi)
require(tidyverse)
require(rlist)
if (interactive()) {
require(conflicted)
}
conflict_prefer("filter", "dplyr")
## Packages for generation of epi inputs
require(devtools)
require(rstan)
require(Rcpp)
require(codetools)
index <- 1
gbd_loc_data_processed <- list()
for (i in 1:length(city_regions_list_loc)) {
gbd_loc_data_processed[[index]] <- lapply(city_regions_list_loc[[i]], RunLocDf)
index <- index + 1
}
load("C:/Metahit/mh-mslt/data/city regions/Output disbayes/cityregions_smoothed_res.rda")
gbd_loc_data_processed <-  list.clean(gbd_loc_data_processed, fun = is.null, recursive = TRUE)
index <- 1
gbd_city_region_data <- list()
for (i in 1:length(gbd_loc_data_processed)){
gbd_city_region_data[[index]] <- bind_rows(gbd_loc_data_processed[[i]])
## Drop number columns (CHECK WHAT THIS IS DOING)
#
#    gbd_city_region_data[[index]] <- gbd_city_region_data[[index]][ -c(1) ]
## Clean dataframes per city regions
gbd_city_region_data[[index]] <- dplyr::select(gbd_city_region_data[[index]], -contains('rate')) %>% mutate_if(is.factor, as.character)
gbd_city_region_data[[index]]$sex_age_cat <- paste(gbd_city_region_data[[index]]$sex, gbd_city_region_data[[index]]$age, sep = "_")
gbd_city_region_data[[index]] <- select(gbd_city_region_data[[index]], -c(age, sex))
### Add city region name here
suppressWarnings(names(gbd_city_region_data)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
gbd_city_region_data[[index]]$cityregion <- names(gbd_city_region_data)[index]
index <- index + 1
}
## Create aggregated data frame (sums all numbers from localities within a city region) SEE HOW THIS IS WORKING, best to continue
### with dataframe above and then have a combined dataset with all possible inputs for disbayes
#### Drop location and city region (sum cannot summ string variables)
### Rename gbd_city_region_data, as cityregionand location variables are needed in disbayes data_prep
#
gbd_city_region_data_2 <- list()
for (i in 1:length(gbd_city_region_data)) {
gbd_city_region_data_2[[i]] <- gbd_city_region_data[[i]]
#[ -c(1,3) ]
}
gbd_city_region_data_agg <- list()
index <- 1
### Loop to generate aggregated data
for (i in 1:length(gbd_city_region_data_2)) {
gbd_city_region_data_agg[[index]] <- gbd_city_region_data_2[[i]] %>%
group_by(sex_age_cat) %>%
summarise_all(funs(if(is.numeric(.)) sum(., na.rm = TRUE) else first(.)))%>%
separate(sex_age_cat, c("sex", "age"), "_")
## Add numberical age categories
gbd_city_region_data_agg[[index]]$age_cat <- 0
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="Under 5"] <- 2
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="5 to 9"] <- 7
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="10 to 14"] <- 12
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="15 to 19"] <- 17
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="20 to 24"] <- 22
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="25 to 29"] <- 27
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="30 to 34"] <- 32
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="35 to 39"] <- 37
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="40 to 44"] <- 42
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="45 to 49"] <- 47
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="50 to 54"] <- 52
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="55 to 59"] <- 57
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="60 to 64"] <- 62
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="65 to 69"] <- 67
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="70 to 74"] <- 72
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="75 to 79"] <- 77
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="80 to 84"] <- 82
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="85 to 89"] <- 87
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="90 to 94"] <- 92
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="95 plus"] <- 97
## Change sex variable to lower case
gbd_city_region_data_agg[[index]]$sex <- tolower(gbd_city_region_data_agg[[index]]$sex)
## Create age_sex category
gbd_city_region_data_agg[[index]]$sex_age_cat <- paste(gbd_city_region_data_agg[[index]]$sex,gbd_city_region_data_agg[[index]]$age_cat, sep = "_"  )
## Order data
gbd_city_region_data_agg[[index]] <- gbd_city_region_data_agg[[index]][order(gbd_city_region_data_agg[[index]]$sex, gbd_city_region_data_agg[[index]]$age_cat),]
suppressWarnings(names(gbd_city_region_data_agg)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
### Calculate rates per one. Needed for mslt_code
# for (d in 1:nrow(DISEASE_SHORT_NAMES)){
#   for (dm in 1:length(disease_measures_list)){
#     # dn <- DISEASE_SHORT_NAMES$disease[d]
#     dmeasure <- disease_measures_list[dm] %>% as.character() %>% tolower
#
#
#
#     var_rate <- c(paste(tolower(paste(dmeasure, "rate", DISEASE_SHORT_NAMES$sname[d], sep = "_"))))
#     var_med <- c(paste(tolower(paste(dmeasure, "med", DISEASE_SHORT_NAMES$sname[d], sep = "_"))))
#
#
#     if ((var_rate == "deaths_rate_mjdd" || var_rate == "ylds (years lived with disability)_rate_mjdd")){
#     }
#     else{
#       gbd_city_region_data_agg[[index]][[var_rate]] <- gbd_city_region_data_agg[[index]][[var_med]] /
#         gbd_city_region_data_agg[[index]]$population_number
#     }
#   }
# }
#
## Save as rds for each city region
write_rds(gbd_city_region_data_agg[[index]], paste0(relative_path_mslt, "data/city regions/GBD sorted/", unique(city_regions_list_loc[[i]][[1]]$cityregion), ".rds"))
index <- index + 1
}
## CREATE ONE DATA FRAME WITH ALL LIST IN GBD DATA FRAME AGGREGATED, THEN, THIS INFO IS NEEDED IN COMPILING ALL DATA FOR MSLT
gbd_data <- plyr::ldply(gbd_city_region_data_agg, rbind)
gbd_data$area <- gbd_data$.id
### Calculate rates as we need these for mslt data frame
### Calculate rates per one. Needed for mslt_code
for (d in 1:nrow(DISEASE_SHORT_NAMES)){
for (dm in 1:length(disease_measures_list)){
# dn <- DISEASE_SHORT_NAMES$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character() %>% tolower
var_rate <- c(paste(tolower(paste(dmeasure, "rate", DISEASE_SHORT_NAMES$sname[d], sep = "_"))))
var_med <- c(paste(tolower(paste(dmeasure, "med", DISEASE_SHORT_NAMES$sname[d], sep = "_"))))
if ((var_rate == "deaths_rate_mjdd" || var_rate == "ylds (years lived with disability)_rate_mjdd")){
}
else{
gbd_data[[var_rate]] <- gbd_data[[var_med]] /
gbd_data$population_number
}
}
}
countries_smoothed_res <- cbind(
mes=rownames(countries_smoothed_res), countries_smoothed_res)
### Separate avoce in outcome and year
countries_smoothed_res <- cbind(countries_smoothed_res, (str_split_fixed(countries_smoothed_res$
mes, fixed('['), 2)))
countries_smoothed_res <- countries_smoothed_res[ (countries_smoothed_res$`1` %in% c("inc", "cf", "prev")), ]
countries_smoothed_res$`1` <- as.character(countries_smoothed_res$`1`)
countries_smoothed_res$`2` <- as.character(countries_smoothed_res$`2`)
countries_smoothed_res$`2` <- gsub("].*", "",countries_smoothed_res$`2`)
## Rename columns
names(countries_smoothed_res)[names(countries_smoothed_res) == "1"] <- "rates"
names(countries_smoothed_res)[names(countries_smoothed_res) == "2"] <- "year"
## Rename string values inc to incidence, cf to case fatality and prev to prevalence
countries_smoothed_res <- countries_smoothed_res %>%
mutate(rates = str_replace(rates, "inc", "incidence"))  %>%
mutate(rates = str_replace(rates, "cf", "case_fatality"))  %>%
mutate(rates = str_replace(rates, "prev", "prevalence"))
## Move to columns for data for case_fatality, incidence and prevelence
countries_smoothed_res$disease_rate <- paste(countries_smoothed_res$rates, countries_smoothed_res$disease, sep = "_")
countries_smoothed_res2 <- countries_smoothed_res %>% pivot_wider(id_cols = c(area, gender, model, year), names_from = disease_rate, values_from = c(med, lower95, upper95))
names(countries_smoothed_res2) = gsub(pattern = "med_", replacement = "", x = names(countries_smoothed_res2))
disbayes_output <- countries_smoothed_res2 %>%
dplyr::rename(sex = gender) %>%
mutate_if(is.factor, as.character)
disbayes_output$year <- disbayes_output$year %>% as.numeric(disbayes_output$year)
## Change year to match mslt dataframe (0 to 100 years)
disbayes_output$year[1:101] <- 0:100
disbayes_output$sex_age_area_cat <- paste(disbayes_output$sex,disbayes_output$year, disbayes_output$area, sep = "_"  )
## From data generated by chris using Disbayes "mh-mslt/data/city regions/Output disbayes/cityregions_smoothed_res.rda"
## add name to column outputs (column 0) NEED TO GENENERATE OUTPUTS LIKE CHRIS FROM THE DISBAYES SCRIPT
### create column one with outcome and year
cityregions_smoothed_res <- cbind(
mes=rownames(cityregions_smoothed_res), cityregions_smoothed_res)
### Separate avoce in outcome and year
cityregions_smoothed_res <- cbind(cityregions_smoothed_res, (str_split_fixed(cityregions_smoothed_res$
mes, fixed('['), 2)))
cityregions_smoothed_res <- cityregions_smoothed_res[ (cityregions_smoothed_res$`1` %in% c("inc", "cf", "prev")), ]
cityregions_smoothed_res$`1` <- as.character(cityregions_smoothed_res$`1`)
cityregions_smoothed_res$`2` <- as.character(cityregions_smoothed_res$`2`)
cityregions_smoothed_res$`2` <- gsub("].*", "",cityregions_smoothed_res$`2`)
## Rename columns
names(cityregions_smoothed_res)[names(cityregions_smoothed_res) == "1"] <- "rates"
names(cityregions_smoothed_res)[names(cityregions_smoothed_res) == "2"] <- "year"
## Rename string values inc to incidence, cf to case fatality and prev to prevalence
cityregions_smoothed_res <- cityregions_smoothed_res %>%
mutate(rates = str_replace(rates, "inc", "incidence"))  %>%
mutate(rates = str_replace(rates, "cf", "case_fatality"))  %>%
mutate(rates = str_replace(rates, "prev", "prevalence"))
## Move to columns for data for case_fatality, incidence and prevelence
cityregions_smoothed_res$disease_rate <- paste(cityregions_smoothed_res$rates, cityregions_smoothed_res$disease, sep = "_")
cityregions_smoothed_res2 <- cityregions_smoothed_res %>% pivot_wider(id_cols = c(area, gender, model, year), names_from = disease_rate, values_from = c(med, lower95, upper95))
names(cityregions_smoothed_res2) = gsub(pattern = "med_", replacement = "", x = names(cityregions_smoothed_res2))
disbayes_output <- cityregions_smoothed_res2 %>%
dplyr::rename(sex = gender) %>%
mutate_if(is.factor, as.character)
disbayes_output$year <- disbayes_output$year %>% as.numeric(disbayes_output$year)
## Change year to match mslt dataframe (0 to 100 years)
disbayes_output$year[1:101] <- 0:100
disbayes_output$sex_age_area_cat <- paste(disbayes_output$sex,disbayes_output$year, disbayes_output$area, sep = "_"  )
areas <- unique(disbayes_output$area)
i_sex <- c('male', 'female')
mslt_df <- as.data.frame(NULL)
mslt_df_list <- list()
index <- 1
for (a in areas) {
### selected data here should be gbd_data with all data, see how the code works with it
data_1 <-  dplyr::filter(gbd_data, area == a)
data_2 <- dplyr::filter(disbayes_output, area == a)
mslt_df_list[[index]] <- GenMSLTDF(data_1, data_2)
mslt_df_list[[index]]<- replace(mslt_df_list[[index]], is.na(mslt_df_list[[index]]), 0)
### Change names to match with Rob's injury code
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "deaths_rate_pdri"] <- "deaths_rate_pedestrian"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "ylds (years lived with disability)_rate_pdri"] <- "ylds_rate_pedestrian"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "deaths_rate_cyri"] <- "deaths_rate_cyclist"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "ylds (years lived with disability)_rate_cyri"] <- "ylds_rate_cyclist"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "deaths_rate_mtri"] <- "deaths_rate_motorcyclist"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "ylds (years lived with disability)_rate_mtri"] <- "ylds_rate_motorcyclist"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "deaths_rate_mvri"] <- "deaths_rate_motor"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "ylds (years lived with disability)_rate_mvri"] <- "ylds_rate_motor"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "deaths_rate_otri"] <- "deaths_rate_other"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "ylds (years lived with disability)_rate_otri"] <- "ylds_rate_other"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "deaths_rate_lwri"] <- "deaths_rate_lri"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "ylds (years lived with disability)_rate_lwri"] <- "ylds_rate_lri"
mslt_df_list[[index]]$sex <- as.character(mslt_df_list[[index]]$sex)
index <- index + 1
}
pif <- read_csv("data/pif.csv")
pif$age <- 0
pif$age [pif$age_cat =="16-19"] <- 17
pif$age [pif$age_cat =="20-24"] <- 22
pif$age [pif$age_cat =="25-29"] <- 27
pif$age [pif$age_cat =="30-34"] <- 32
pif$age [pif$age_cat =="35-39"] <- 37
pif$age [pif$age_cat =="40-44"] <- 42
pif$age [pif$age_cat =="45-49"] <- 47
pif$age [pif$age_cat =="50-54"] <- 52
pif$age [pif$age_cat =="55-59"] <- 57
pif$age [pif$age_cat =="60-64"] <- 62
pif$age [pif$age_cat =="65-69"] <- 67
pif$age [pif$age_cat =="70-74"] <- 72
pif$age [pif$age_cat =="75-79"] <- 77
pif$age [pif$age_cat =="80-84"] <- 82
pif$age [pif$age_cat =="85-89"] <- 87
pif$age [pif$age_cat =="90-94"] <- 92
pif$age [pif$age_cat =="95-120"] <- 97
## Change names to get rid of risk factors combinations in the name (BEST IF I DO NOT HAVE TO DO THIS MANUALLY)
names(pif)[names(pif) == "scen_pif_pa_ap_noise_no2_ihd"] <- "pif_ihd"
names(pif)[names(pif) == "scen_pif_pa_ap_stroke"] <- "pif_stroke"
names(pif)[names(pif) == "scen_pif_pa_colon" ] <- "pif_colon"
names(pif)[names(pif) == "scen_pif_pa_t2d"] <- "pif_t2d"
names(pif)[names(pif) == "scen_pif_pa_endo"] <- "pif_endo"
names(pif)[names(pif) == "scen_pif_pa_ap_lc"] <- "pif_lc"
names(pif)[names(pif) == "scen_pif_ap_lri"] <- "pif_lri"
names(pif)[names(pif) == "scen_pif_ap_copd"] <- "pif_copd"
names(pif)[names(pif) == "scen_pif_pa_breast"] <- "pif_breast"
names(pif)[names(pif) == "scen_cyclist_Fatal"] <- "pif_cyclist_deaths"
names(pif)[names(pif) == "scen_pedestrian_Fatal"] <- "pif_pedestrian_deaths"
names(pif)[names(pif) == "scen_cyclist_Serious"] <- "pif_cyclist_ylds"
names(pif)[names(pif) == "scen_pedestrian_Serious"] <- "pif_pedestrian_ylds"
names(pif)[names(pif) == "scen_car/taxi_Fatal"] <- "pif_motor_deaths"
names(pif)[names(pif) == "scen_motorcycle_Fatal"  ] <- "pif_motorcyclist_deaths"
names(pif)[names(pif) == "scen_car/taxi_Serious"] <- "pif_motor_ylds"
names(pif)[names(pif) == "scen_motorcycle_Serious"  ] <- "pif_motorcyclist_ylds"
## Repeat pif lri for deaths and ylds
pif$pif_lri_deaths <- pif$pif_lri
pif$pif_lri_ylds <- pif$pif_lri
## Delete pif_lri
pif <- select(pif, -c(pif_lri))
if (!require(devtools))
install.packages("devtools")
library("devtools")
devtools::install_github("ITHIM/ITHIM", ref="ITHIM-R")
if (!require(devtools))
install.packages("devtools")
library("devtools")
devtools::install_github("ITHIM/ITHIM", ref="ITHIM-R")
disbayes_inputs_original <- readRDS("C:/Metahit/mh-mslt/data/city regions/Input disbayes/disbayes_inputs_original.rds")
View(disbayes_inputs_original)
library(disbayes)
options(mc.cores = parallel::detectCores(1))
rstan_options(auto_write = TRUE)
require(ggpubr)
require(ggplot2)
require(arsenal)
require(janitor)
require(tidyverse)
require(dplyr)
require(conflicted)
require(rlist)
require(reshape)
require(reshape2)
require(zoo)
require(stringi)
require(tidyverse)
require(rlist)
if (interactive()) {
require(conflicted)
}
conflict_prefer("filter", "dplyr")
## Packages for generation of epi inputs
require(devtools)
require(rstan)
require(Rcpp)
require(codetools)
##Additional code to make disbayes work (includes ci2num to create Credible Intervals?)
#install_github("chjackson/disbayes")
require(disbayes)
install.packages("devtools") # if devtools not already installed
library(devtools)
install_github("chjackson/disbayes")
# ---- Chunk 1: Disbayes ----
install.packages("devtools") # if devtools not already installed
library(devtools)
install_github("chjackson/disbayes")
library(disbayes)
options(mc.cores = parallel::detectCores(1))
rstan_options(auto_write = TRUE)
# ---- Chunk 1: Disbayes ----
install.packages("devtools") # if devtools not already installed
library(devtools)
install_github("chjackson/disbayes")
install.packages("devtools") # if devtools not already installed
library(devtools)
install_github("chjackson/disbayes")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M))
file.create(M)
cat("\nCXX14FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
"CXX14 = C:/RTools/3.5/mingw_64/bin/g++.exe",
"CXX11FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M))
file.create(M)
cat("\nCXX14FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
"CXX14 = C:/RTools/mingw_64/bin/g++.exe",
"CXX11FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
install.packages("devtools") # if devtools not already installed
library(devtools)
install_github("chjackson/disbayes")
# ---- Chunk 1: Disbayes ----
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M))
file.create(M)
cat("\nCXX14FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
"CXX14 = C:/RTools/mingw_64/bin/g++.exe",
"CXX11FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
install.packages("devtools") # if devtools not already installed
library(devtools)
install_github("chjackson/disbayes")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M))
file.create(M)
cat("\nCXX14FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
"CXX14 = C:/RTools/mingw_64/bin/g++.exe",
"CXX11FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
install.packages("devtools") # if devtools not already installed
library(devtools)
install_github("chjackson/disbayes")
# ---- Chunk 1: Disbayes ----
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M))
file.create(M)
cat("\nCXX14FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
"CXX14 = C:/RTools/mingw_64/bin/g++.exe",
"CXX11FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
install.packages("devtools") # if devtools not already installed
library(devtools)
install_github("chjackson/disbayes")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M))
file.create(M)
cat("\nCXX14FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
"CXX14 = C:/RTools/mingw_64/bin/g++.exe",
"CXX11FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
install.packages("devtools") # if devtools not already installed
library(devtools)
install_github("chjackson/disbayes")
devtools::install_github("r-lib/remotes")
library(devtools)
install_github("chjackson/disbayes")
library(devtools)
install_github("chjackson/disbayes")
options(buildtools.check = function(action) TRUE )
library(devtools)
install_github("chjackson/disbayes")
options(buildtools.check = function(action) TRUE )
devtools::install_github("r-lib/remotes")
library(devtools)
install_github("chjackson/disbayes")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M))
file.create(M)
cat("\nCXX14FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
"CXX14 = C:/RBuildTools/mingw_64/bin/g++.exe",
"CXX11FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
options(buildtools.check = function(action) TRUE )
options(buildtools.check = function(action) TRUE )
devtools::install_github("r-lib/remotes")
# install.packages("devtools") # if devtools not already installed
options(buildtools.check = function(action) TRUE )
library(devtools)
install_github("chjackson/disbayes")
# ---- Chunk 1: Disbayes ----
dotR <- file.path(Sys.getenv("C:/Scratch/R"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M))
file.create(M)
cat("\nCXX14FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
"CXX14 = C:/RBuildTools/mingw_64/bin/g++.exe",
"CXX11FLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
options(buildtools.check = function(action) TRUE )
library(devtools)
install_github("chjackson/disbayes")
