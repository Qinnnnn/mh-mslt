disbayes_input_list[[index]] <- filter(in_data, sex == sex_index) %>% select(age, sex, ends_with(var_name), population_number)
## Add column to show disease
disbayes_input_list[[index]]$disease <- disease_short_names$sname[d]
## Change column names to match disbayes code
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("incidence_rate_", disease_short_names$sname[d]))] <- "inc"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("deaths_rate_", disease_short_names$sname[d]))] <- "mort"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("prevalence_rate_", disease_short_names$sname[d]))] <- "prev"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== paste0("population_number")] <- "pop"
## We assume remission is 0
disbayes_input_list[[index]]$rem <- as.integer(0)
## create denominator for disbayes code
disbayes_input_list[[index]]$prevdenom <- c(100,100,500,500,500,500,500,500,500,500,500,500,500,500,500,500,200,200,100,100) / 10 # total sample size 3910, generous for London (from CJ)
## Added agegroups to derive age groups by 1
disbayes_input_list[[index]]$agegrp <- as.integer(seq(0,95, by=5))
## Replace 0 with small numbers for incidence, otherwise, disbayes does not work.
disbayes_input_list[[index]]$inc <- ifelse(disbayes_input_list[[index]]$inc  == 0, 1e-08, disbayes_input_list[[index]]$inc)
## Convert 5 year data file to 100 year age intervals
outage <- 0:100  # assume inc/prev/mort same in each year within a five-year age group
ind <- findInterval(outage, disbayes_input_list[[index]]$agegrp)
disbayes_input_list[[index]] <- disbayes_input_list[[index]][ind,]
disbayes_input_list[[index]]$age <- outage
disbayes_input_list[[index]] <- within(disbayes_input_list[[index]], {
ningrp <- rep(table(agegrp), table(agegrp))
# popmale <- round(popmale/ningrp) ## assume population uniform between years within age group.
pop <- round(pop/ningrp) ## assume population uniform between years within age group.
# ndieddismale <- round(popmale * (1 - exp(-mortmale)))
ndieddis <- round(pop * (1 - exp(-mort)))
# prevnmale <- round(prevdenom * prevmale)
prevn <- round(prevdenom * prev)
}
)
## add sex and disease variable to match with output data frame
disbayes_input_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <-  index +1
}
}
}
disbayes_input_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
## Write function to ignore short names that do not need processing
if (disease_short_names$is_not_dis[i] == 0){
}
else {
var_name <- paste0("rate_", disease_short_names$sname[d])
disbayes_input_list[[index]] <- filter(in_data, sex == sex_index) %>% select(age, sex, ends_with(var_name), population_number)
## Add column to show disease
disbayes_input_list[[index]]$disease <- disease_short_names$sname[d]
## Change column names to match disbayes code
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("incidence_rate_", disease_short_names$sname[d]))] <- "inc"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("deaths_rate_", disease_short_names$sname[d]))] <- "mort"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("prevalence_rate_", disease_short_names$sname[d]))] <- "prev"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== paste0("population_number")] <- "pop"
## We assume remission is 0
disbayes_input_list[[index]]$rem <- as.integer(0)
## create denominator for disbayes code
disbayes_input_list[[index]]$prevdenom <- c(100,100,500,500,500,500,500,500,500,500,500,500,500,500,500,500,200,200,100,100) / 10 # total sample size 3910, generous for London (from CJ)
## Added agegroups to derive age groups by 1
disbayes_input_list[[index]]$agegrp <- as.integer(seq(0,95, by=5))
## Replace 0 with small numbers for incidence, otherwise, disbayes does not work.
disbayes_input_list[[index]]$inc <- ifelse(disbayes_input_list[[index]]$inc  == 0, 1e-08, disbayes_input_list[[index]]$inc)
## Convert 5 year data file to 100 year age intervals
outage <- 0:100  # assume inc/prev/mort same in each year within a five-year age group
ind <- findInterval(outage, disbayes_input_list[[index]]$agegrp)
disbayes_input_list[[index]] <- disbayes_input_list[[index]][ind,]
disbayes_input_list[[index]]$age <- outage
disbayes_input_list[[index]] <- within(disbayes_input_list[[index]], {
ningrp <- rep(table(agegrp), table(agegrp))
# popmale <- round(popmale/ningrp) ## assume population uniform between years within age group.
pop <- round(pop/ningrp) ## assume population uniform between years within age group.
# ndieddismale <- round(popmale * (1 - exp(-mortmale)))
ndieddis <- round(pop * (1 - exp(-mort)))
# prevnmale <- round(prevdenom * prevmale)
prevn <- round(prevdenom * prev)
}
)
## add sex and disease variable to match with output data frame
disbayes_input_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <-  index +1
}
}
}
disbayes_input_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
## Write function to ignore short names that do not need processing
if (disease_short_names$is_not_dis[i] == 0){
var_name <- paste0("rate_", disease_short_names$sname[d])
disbayes_input_list[[index]] <- filter(in_data, sex == sex_index) %>% select(age, sex, ends_with(var_name), population_number)
## Add column to show disease
disbayes_input_list[[index]]$disease <- disease_short_names$sname[d]
## Change column names to match disbayes code
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("incidence_rate_", disease_short_names$sname[d]))] <- "inc"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("deaths_rate_", disease_short_names$sname[d]))] <- "mort"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("prevalence_rate_", disease_short_names$sname[d]))] <- "prev"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== paste0("population_number")] <- "pop"
## We assume remission is 0
disbayes_input_list[[index]]$rem <- as.integer(0)
## create denominator for disbayes code
disbayes_input_list[[index]]$prevdenom <- c(100,100,500,500,500,500,500,500,500,500,500,500,500,500,500,500,200,200,100,100) / 10 # total sample size 3910, generous for London (from CJ)
## Added agegroups to derive age groups by 1
disbayes_input_list[[index]]$agegrp <- as.integer(seq(0,95, by=5))
## Replace 0 with small numbers for incidence, otherwise, disbayes does not work.
disbayes_input_list[[index]]$inc <- ifelse(disbayes_input_list[[index]]$inc  == 0, 1e-08, disbayes_input_list[[index]]$inc)
## Convert 5 year data file to 100 year age intervals
outage <- 0:100  # assume inc/prev/mort same in each year within a five-year age group
ind <- findInterval(outage, disbayes_input_list[[index]]$agegrp)
disbayes_input_list[[index]] <- disbayes_input_list[[index]][ind,]
disbayes_input_list[[index]]$age <- outage
disbayes_input_list[[index]] <- within(disbayes_input_list[[index]], {
ningrp <- rep(table(agegrp), table(agegrp))
# popmale <- round(popmale/ningrp) ## assume population uniform between years within age group.
pop <- round(pop/ningrp) ## assume population uniform between years within age group.
# ndieddismale <- round(popmale * (1 - exp(-mortmale)))
ndieddis <- round(pop * (1 - exp(-mort)))
# prevnmale <- round(prevdenom * prevmale)
prevn <- round(prevdenom * prev)
}
)
## add sex and disease variable to match with output data frame
disbayes_input_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <-  index +1
}
}
}
disbayes_input_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
## Write function to ignore short names that do not need processing
if (disease_short_names$sname[d] == "allc" || disease_short_names$sname[d] == "pdri"
|| disease_short_names$sname[d] == "cyri" || disease_short_names$sname[d] == "mtri"
|| disease_short_names$sname[d] == "mvri" || disease_short_names$sname[d] == "otri"
|| disease_short_names$sname[d] == "lwri") {
}
else {
# if (disease_short_names$is_not_dis[i] == 0){
var_name <- paste0("rate_", disease_short_names$sname[d])
disbayes_input_list[[index]] <- filter(in_data, sex == sex_index) %>% select(age, sex, ends_with(var_name), population_number)
## Add column to show disease
disbayes_input_list[[index]]$disease <- disease_short_names$sname[d]
## Change column names to match disbayes code
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("incidence_rate_", disease_short_names$sname[d]))] <- "inc"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("deaths_rate_", disease_short_names$sname[d]))] <- "mort"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("prevalence_rate_", disease_short_names$sname[d]))] <- "prev"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== paste0("population_number")] <- "pop"
## We assume remission is 0
disbayes_input_list[[index]]$rem <- as.integer(0)
## create denominator for disbayes code
disbayes_input_list[[index]]$prevdenom <- c(100,100,500,500,500,500,500,500,500,500,500,500,500,500,500,500,200,200,100,100) / 10 # total sample size 3910, generous for London (from CJ)
## Added agegroups to derive age groups by 1
disbayes_input_list[[index]]$agegrp <- as.integer(seq(0,95, by=5))
## Replace 0 with small numbers for incidence, otherwise, disbayes does not work.
disbayes_input_list[[index]]$inc <- ifelse(disbayes_input_list[[index]]$inc  == 0, 1e-08, disbayes_input_list[[index]]$inc)
## Convert 5 year data file to 100 year age intervals
outage <- 0:100  # assume inc/prev/mort same in each year within a five-year age group
ind <- findInterval(outage, disbayes_input_list[[index]]$agegrp)
disbayes_input_list[[index]] <- disbayes_input_list[[index]][ind,]
disbayes_input_list[[index]]$age <- outage
disbayes_input_list[[index]] <- within(disbayes_input_list[[index]], {
ningrp <- rep(table(agegrp), table(agegrp))
# popmale <- round(popmale/ningrp) ## assume population uniform between years within age group.
pop <- round(pop/ningrp) ## assume population uniform between years within age group.
# ndieddismale <- round(popmale * (1 - exp(-mortmale)))
ndieddis <- round(pop * (1 - exp(-mort)))
# prevnmale <- round(prevdenom * prevmale)
prevn <- round(prevdenom * prev)
}
)
## add sex and disease variable to match with output data frame
disbayes_input_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <-  index +1
}
}
}
write_csv(gbd_df, "data/city regions/bristol/dismod/input_data.csv")
in_data <- read_csv("data/city regions/bristol/dismod/input_data.csv")
disbayes_input_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
## Write function to ignore short names that do not need processing
# if (disease_short_names$sname[d] == "allc" || disease_short_names$sname[d] == "pdri"
#     || disease_short_names$sname[d] == "cyri" || disease_short_names$sname[d] == "mtri"
#     || disease_short_names$sname[d] == "mvri" || disease_short_names$sname[d] == "otri"
#     || disease_short_names$sname[d] == "lwri") {
# }
#
# else {
if (disease_short_names$is_not_dis[i] == 0){
var_name <- paste0("rate_", disease_short_names$sname[d])
disbayes_input_list[[index]] <- filter(in_data, sex == sex_index) %>% select(age, sex, ends_with(var_name), population_number)
## Add column to show disease
disbayes_input_list[[index]]$disease <- disease_short_names$sname[d]
## Change column names to match disbayes code
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("incidence_rate_", disease_short_names$sname[d]))] <- "inc"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("deaths_rate_", disease_short_names$sname[d]))] <- "mort"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("prevalence_rate_", disease_short_names$sname[d]))] <- "prev"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== paste0("population_number")] <- "pop"
## We assume remission is 0
disbayes_input_list[[index]]$rem <- as.integer(0)
## create denominator for disbayes code
disbayes_input_list[[index]]$prevdenom <- c(100,100,500,500,500,500,500,500,500,500,500,500,500,500,500,500,200,200,100,100) / 10 # total sample size 3910, generous for London (from CJ)
## Added agegroups to derive age groups by 1
disbayes_input_list[[index]]$agegrp <- as.integer(seq(0,95, by=5))
## Replace 0 with small numbers for incidence, otherwise, disbayes does not work.
disbayes_input_list[[index]]$inc <- ifelse(disbayes_input_list[[index]]$inc  == 0, 1e-08, disbayes_input_list[[index]]$inc)
## Convert 5 year data file to 100 year age intervals
outage <- 0:100  # assume inc/prev/mort same in each year within a five-year age group
ind <- findInterval(outage, disbayes_input_list[[index]]$agegrp)
disbayes_input_list[[index]] <- disbayes_input_list[[index]][ind,]
disbayes_input_list[[index]]$age <- outage
disbayes_input_list[[index]] <- within(disbayes_input_list[[index]], {
ningrp <- rep(table(agegrp), table(agegrp))
# popmale <- round(popmale/ningrp) ## assume population uniform between years within age group.
pop <- round(pop/ningrp) ## assume population uniform between years within age group.
# ndieddismale <- round(popmale * (1 - exp(-mortmale)))
ndieddis <- round(pop * (1 - exp(-mort)))
# prevnmale <- round(prevdenom * prevmale)
prevn <- round(prevdenom * prev)
}
)
## add sex and disease variable to match with output data frame
disbayes_input_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <-  index +1
}
}
}
# ## Uncoment to check (use as input for disbayes, check that not all diseases are here)
# View(disbayes_input_list[[2]])
in_data <- read_csv("data/city regions/bristol/dismod/input_data.csv")
## Check names to see that all data is available for calculations
disbayes_input_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
## Write function to ignore short names that do not need processing
if (disease_short_names$sname[d] == "allc" || disease_short_names$sname[d] == "pdri"
|| disease_short_names$sname[d] == "cyri" || disease_short_names$sname[d] == "mtri"
|| disease_short_names$sname[d] == "mvri" || disease_short_names$sname[d] == "otri"
|| disease_short_names$sname[d] == "lwri") {
}
else {
# if (disease_short_names$is_not_dis[i] == 0){
var_name <- paste0("rate_", disease_short_names$sname[d])
disbayes_input_list[[index]] <- filter(in_data, sex == sex_index) %>% select(age, sex, ends_with(var_name), population_number)
## Add column to show disease
disbayes_input_list[[index]]$disease <- disease_short_names$sname[d]
## Change column names to match disbayes code
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("incidence_rate_", disease_short_names$sname[d]))] <- "inc"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("deaths_rate_", disease_short_names$sname[d]))] <- "mort"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("prevalence_rate_", disease_short_names$sname[d]))] <- "prev"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== paste0("population_number")] <- "pop"
## We assume remission is 0
disbayes_input_list[[index]]$rem <- as.integer(0)
## create denominator for disbayes code
disbayes_input_list[[index]]$prevdenom <- c(100,100,500,500,500,500,500,500,500,500,500,500,500,500,500,500,200,200,100,100) / 10 # total sample size 3910, generous for London (from CJ)
## Added agegroups to derive age groups by 1
disbayes_input_list[[index]]$agegrp <- as.integer(seq(0,95, by=5))
## Replace 0 with small numbers for incidence, otherwise, disbayes does not work.
disbayes_input_list[[index]]$inc <- ifelse(disbayes_input_list[[index]]$inc  == 0, 1e-08, disbayes_input_list[[index]]$inc)
## Convert 5 year data file to 100 year age intervals
outage <- 0:100  # assume inc/prev/mort same in each year within a five-year age group
ind <- findInterval(outage, disbayes_input_list[[index]]$agegrp)
disbayes_input_list[[index]] <- disbayes_input_list[[index]][ind,]
disbayes_input_list[[index]]$age <- outage
disbayes_input_list[[index]] <- within(disbayes_input_list[[index]], {
ningrp <- rep(table(agegrp), table(agegrp))
# popmale <- round(popmale/ningrp) ## assume population uniform between years within age group.
pop <- round(pop/ningrp) ## assume population uniform between years within age group.
# ndieddismale <- round(popmale * (1 - exp(-mortmale)))
ndieddis <- round(pop * (1 - exp(-mort)))
# prevnmale <- round(prevdenom * prevmale)
prevn <- round(prevdenom * prev)
}
)
## add sex and disease variable to match with output data frame
disbayes_input_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <-  index +1
}
}
}
# ## Uncoment to check (use as input for disbayes, check that not all diseases are here)
# View(disbayes_input_list[[2]])
## Loop to save each data frame within disbayes_list (to check data inputs, but disbayes is run with list above)
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
## replace with function for disease/injuries that we do not need to model
if (disease_short_names$is_not_dis[i] == 0){
##Save to csv
saveRDS(disbayes_input_list[[index]], paste0("data/city regions/bristol/dismod/input/", disease_short_names$sname[d], "_", sex_index, ".rds"))
index <- index +1
}
}
}
## Run Disbayes
## We do not need the age and sex loop if working from list
## ALL CAUSE SHOULD BE EXCLUDED
## ADD disease names column, otherwise, no info on which diseases
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#
# ihdlondon is Chris' original data set to test model.
# ## test disbayes with one data set
#
# ####
#
# test_disbayes2 <- readRDS("data/city regions/bristol/dismod/input/Ishd_female.rds")
#
# test_disbayes <- ihdlondon
#
# datstan <- c(as.list(test_disbayes2), nage=nrow(test_disbayes2))
# inits <- list(
#   list(cf=rep(0.0101, datstan$nage)),
#   list(cf=rep(0.0201, datstan$nage)),
#   list(cf=rep(0.0056, datstan$nage)),
#   list(cf=rep(0.0071, datstan$nage))
# )
# gbdcf_test <- stan("disbayes-master/gbdcf-unsmoothed.stan", data=datstan, init=inits)
#
# gbdcf_test_summary <- summary(gbdcf_test)$summary
#####
disbayes_output_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
data <- disbayes_input_list[[index]]
## Replace with function for diseases/injuries that are not modelled.
if (disease_short_names$sname[d] == "allc" || disease_short_names$sname[d] == "pdri"
|| disease_short_names$sname[d] == "cyri" || disease_short_names$sname[d] == "mtri"
|| disease_short_names$sname[d] == "mvri" || disease_short_names$sname[d] == "otri"
|| disease_short_names$sname[d] == "lwri") {
}
else {
datstan <- c(as.list(data), nage=nrow(data))
inits <- list(
list(cf=rep(0.0101, datstan$nage)),
list(cf=rep(0.0201, datstan$nage)),
list(cf=rep(0.0056, datstan$nage)),
list(cf=rep(0.0071, datstan$nage))
)
gbdcf <- stan("disbayes-master/gbdcf-unsmoothed.stan", data=datstan, init=inits)
## Extract Summary statistics
## Add directly to dibayes input list, first 100 observations? Check with Chris
disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[1:101, 1:3]
## add disease names
disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
## add sex
disbayes_output_list[[index]]$sex <- sex_index
## create sex and disease category to then join to input for disease life table dataset
disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
disbayes_input_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
## Write function to ignore short names that do not need processing
# if (disease_short_names$sname[d] == "allc" || disease_short_names$sname[d] == "pdri"
#     || disease_short_names$sname[d] == "cyri" || disease_short_names$sname[d] == "mtri"
#     || disease_short_names$sname[d] == "mvri" || disease_short_names$sname[d] == "otri"
#     || disease_short_names$sname[d] == "lwri") {
# }
#
# else {
if (disease_short_names$is_not_dis[i] == 0){
var_name <- paste0("rate_", disease_short_names$sname[d])
disbayes_input_list[[index]] <- filter(in_data, sex == sex_index) %>% select(age, sex, ends_with(var_name), population_number)
## Add column to show disease
disbayes_input_list[[index]]$disease <- disease_short_names$sname[d]
## Change column names to match disbayes code
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("incidence_rate_", disease_short_names$sname[d]))] <- "inc"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("deaths_rate_", disease_short_names$sname[d]))] <- "mort"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("prevalence_rate_", disease_short_names$sname[d]))] <- "prev"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== paste0("population_number")] <- "pop"
## We assume remission is 0
disbayes_input_list[[index]]$rem <- as.integer(0)
## create denominator for disbayes code
disbayes_input_list[[index]]$prevdenom <- c(100,100,500,500,500,500,500,500,500,500,500,500,500,500,500,500,200,200,100,100) / 10 # total sample size 3910, generous for London (from CJ)
## Added agegroups to derive age groups by 1
disbayes_input_list[[index]]$agegrp <- as.integer(seq(0,95, by=5))
## Replace 0 with small numbers for incidence, otherwise, disbayes does not work.
disbayes_input_list[[index]]$inc <- ifelse(disbayes_input_list[[index]]$inc  == 0, 1e-08, disbayes_input_list[[index]]$inc)
## Convert 5 year data file to 100 year age intervals
outage <- 0:100  # assume inc/prev/mort same in each year within a five-year age group
ind <- findInterval(outage, disbayes_input_list[[index]]$agegrp)
disbayes_input_list[[index]] <- disbayes_input_list[[index]][ind,]
disbayes_input_list[[index]]$age <- outage
disbayes_input_list[[index]] <- within(disbayes_input_list[[index]], {
ningrp <- rep(table(agegrp), table(agegrp))
# popmale <- round(popmale/ningrp) ## assume population uniform between years within age group.
pop <- round(pop/ningrp) ## assume population uniform between years within age group.
# ndieddismale <- round(popmale * (1 - exp(-mortmale)))
ndieddis <- round(pop * (1 - exp(-mort)))
# prevnmale <- round(prevdenom * prevmale)
prevn <- round(prevdenom * prev)
}
)
## add sex and disease variable to match with output data frame
disbayes_input_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <-  index +1
}
}
disbayes_input_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
## Write function to ignore short names that do not need processing
# if (disease_short_names$sname[d] == "allc" || disease_short_names$sname[d] == "pdri"
#     || disease_short_names$sname[d] == "cyri" || disease_short_names$sname[d] == "mtri"
#     || disease_short_names$sname[d] == "mvri" || disease_short_names$sname[d] == "otri"
#     || disease_short_names$sname[d] == "lwri") {
# }
#
# else {
if (disease_short_names$is_not_dis[i] == "0"){
var_name <- paste0("rate_", disease_short_names$sname[d])
disbayes_input_list[[index]] <- filter(in_data, sex == sex_index) %>% select(age, sex, ends_with(var_name), population_number)
## Add column to show disease
disbayes_input_list[[index]]$disease <- disease_short_names$sname[d]
## Change column names to match disbayes code
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("incidence_rate_", disease_short_names$sname[d]))] <- "inc"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("deaths_rate_", disease_short_names$sname[d]))] <- "mort"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("prevalence_rate_", disease_short_names$sname[d]))] <- "prev"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== paste0("population_number")] <- "pop"
## We assume remission is 0
disbayes_input_list[[index]]$rem <- as.integer(0)
## create denominator for disbayes code
disbayes_input_list[[index]]$prevdenom <- c(100,100,500,500,500,500,500,500,500,500,500,500,500,500,500,500,200,200,100,100) / 10 # total sample size 3910, generous for London (from CJ)
## Added agegroups to derive age groups by 1
disbayes_input_list[[index]]$agegrp <- as.integer(seq(0,95, by=5))
## Replace 0 with small numbers for incidence, otherwise, disbayes does not work.
disbayes_input_list[[index]]$inc <- ifelse(disbayes_input_list[[index]]$inc  == 0, 1e-08, disbayes_input_list[[index]]$inc)
## Convert 5 year data file to 100 year age intervals
outage <- 0:100  # assume inc/prev/mort same in each year within a five-year age group
ind <- findInterval(outage, disbayes_input_list[[index]]$agegrp)
disbayes_input_list[[index]] <- disbayes_input_list[[index]][ind,]
disbayes_input_list[[index]]$age <- outage
disbayes_input_list[[index]] <- within(disbayes_input_list[[index]], {
ningrp <- rep(table(agegrp), table(agegrp))
# popmale <- round(popmale/ningrp) ## assume population uniform between years within age group.
pop <- round(pop/ningrp) ## assume population uniform between years within age group.
# ndieddismale <- round(popmale * (1 - exp(-mortmale)))
ndieddis <- round(pop * (1 - exp(-mort)))
# prevnmale <- round(prevdenom * prevmale)
prevn <- round(prevdenom * prev)
}
)
## add sex and disease variable to match with output data frame
disbayes_input_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <-  index +1
}
}
}
disbayes_input_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
## Write function to ignore short names that do not need processing
# if (disease_short_names$sname[d] == "allc" || disease_short_names$sname[d] == "pdri"
#     || disease_short_names$sname[d] == "cyri" || disease_short_names$sname[d] == "mtri"
#     || disease_short_names$sname[d] == "mvri" || disease_short_names$sname[d] == "otri"
#     || disease_short_names$sname[d] == "lwri") {
# }
#
# else {
if (disease_short_names$is_not_dis[i] == "0"){
var_name <- paste0("rate_", disease_short_names$sname[d])
disbayes_input_list[[index]] <- filter(in_data, sex == sex_index) %>% select(age, sex, ends_with(var_name), population_number)
## Add column to show disease
disbayes_input_list[[index]]$disease <- disease_short_names$sname[d]
## Change column names to match disbayes code
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("incidence_rate_", disease_short_names$sname[d]))] <- "inc"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("deaths_rate_", disease_short_names$sname[d]))] <- "mort"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("prevalence_rate_", disease_short_names$sname[d]))] <- "prev"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== paste0("population_number")] <- "pop"
## We assume remission is 0
disbayes_input_list[[index]]$rem <- as.integer(0)
## create denominator for disbayes code
disbayes_input_list[[index]]$prevdenom <- c(100,100,500,500,500,500,500,500,500,500,500,500,500,500,500,500,200,200,100,100) / 10 # total sample size 3910, generous for London (from CJ)
## Added agegroups to derive age groups by 1
disbayes_input_list[[index]]$agegrp <- as.integer(seq(0,95, by=5))
## Replace 0 with small numbers for incidence, otherwise, disbayes does not work.
disbayes_input_list[[index]]$inc <- ifelse(disbayes_input_list[[index]]$inc  == 0, 1e-08, disbayes_input_list[[index]]$inc)
## Convert 5 year data file to 100 year age intervals
outage <- 0:100  # assume inc/prev/mort same in each year within a five-year age group
ind <- findInterval(outage, disbayes_input_list[[index]]$agegrp)
disbayes_input_list[[index]] <- disbayes_input_list[[index]][ind,]
disbayes_input_list[[index]]$age <- outage
disbayes_input_list[[index]] <- within(disbayes_input_list[[index]], {
ningrp <- rep(table(agegrp), table(agegrp))
# popmale <- round(popmale/ningrp) ## assume population uniform between years within age group.
pop <- round(pop/ningrp) ## assume population uniform between years within age group.
# ndieddismale <- round(popmale * (1 - exp(-mortmale)))
ndieddis <- round(pop * (1 - exp(-mort)))
# prevnmale <- round(prevdenom * prevmale)
prevn <- round(prevdenom * prev)
}
)
## add sex and disease variable to match with output data frame
disbayes_input_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <-  index +1
}
}
}
in_data <- read_csv("data/city regions/bristol/dismod/input_data.csv")
