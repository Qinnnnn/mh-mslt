idf <- dplyr::filter(str_detect(idf, cause == unique(idf$cause)[1]))
idf$cause <- dn
population_numbers <- dplyr::filter(str_detect(idf, metric == "Number") %>% select("val"))
idf_rate <- dplyr::filter(str_detect(idf, metric == "Rate") %>% select("val"))
idf$population_number <- 0
if (idf_rate$val != 0 && population_numbers$val != 0)
idf$population_number <- (100000 * population_numbers$val) / idf_rate$val
}
idf$rate_per_1 <- round(current_idf_rate$val / 100000, 6)
idf[[tolower(paste(dmeasure, "rate", disease_short_names$sname[d], sep = "_"))]] <- idf$rate_per_1
idf[[tolower(paste(dmeasure, "number", disease_short_names$sname[d], sep = "_"))]] <- current_population_numbers$val
idf <- dplyr::filter(str_detect(idf, metric == "Number"))
if (is.null(age_sex_df)){
age_sex_df <- dplyr::select(idf, age, sex, population_number, location, names(idf)[ncol(idf) - 1] , names(idf)[ncol(idf)])
}
else{
age_sex_df <- cbind(age_sex_df, dplyr::select(idf, names(idf)[ncol(idf) - 1] , names(idf)[ncol(idf)]))
}
}
}
}
if (is.null(gbd_df)){
gbd_df <- age_sex_df
}
else{
age_sex_df[setdiff(names(gbd_df), names(age_sex_df))] <- 0
gbd_df[setdiff(names(age_sex_df), names(gbd_df))] <- 0
gbd_df <- rbind(gbd_df, age_sex_df)
}
}
}
for (gender in i_gender){
age_sex_df <- NULL
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
dn <- disease_short_names$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character()
agroup <- unique(i_data['age'])[ag]
idf <- dplyr::filter(stringr::str_detect(i_data, sex == gender & age == agroup & measure == dmeasure & cause == dn))
## this works, so the issue in not filter
# idf <- dplyr::filter(i_data, sex == "Female" & age == "55 to 59" & measure == "YLDs (Years Lived with Disability)" & cause == "all causes")
if (nrow(idf) > 0){
population_numbers <- dplyr::filter(str_detect(idf, metric == "Number") %>% select("val"))
idf_rate <- dplyr::filter(str_detect(idf, metric == "Rate") %>% select("val"))
current_idf_rate <- idf_rate
current_population_numbers <- population_numbers
idf$population_number <- 0
if (idf_rate$val != 0 && population_numbers$val != 0)
idf$population_number <- (100000 * population_numbers$val) / idf_rate$val
else{
current_idf_rate <- idf_rate
current_population_numbers <- population_numbers
idf <- dplyr::filter(str_detect(i_data, sex == gender & age == agroup & measure == dmeasure & val > 0))
idf <- dplyr::filter(str_detect(idf, cause == unique(idf$cause)[1]))
idf$cause <- dn
population_numbers <- dplyr::filter(str_detect(idf, metric == "Number") %>% select("val"))
idf_rate <- dplyr::filter(str_detect(idf, metric == "Rate") %>% select("val"))
idf$population_number <- 0
if (idf_rate$val != 0 && population_numbers$val != 0)
idf$population_number <- (100000 * population_numbers$val) / idf_rate$val
}
idf$rate_per_1 <- round(current_idf_rate$val / 100000, 6)
idf[[tolower(paste(dmeasure, "rate", disease_short_names$sname[d], sep = "_"))]] <- idf$rate_per_1
idf[[tolower(paste(dmeasure, "number", disease_short_names$sname[d], sep = "_"))]] <- current_population_numbers$val
idf <- dplyr::filter(str_detect(idf, metric == "Number"))
if (is.null(age_sex_df)){
age_sex_df <- dplyr::select(idf, age, sex, population_number, location, names(idf)[ncol(idf) - 1] , names(idf)[ncol(idf)])
}
else{
age_sex_df <- cbind(age_sex_df, dplyr::select(idf, names(idf)[ncol(idf) - 1] , names(idf)[ncol(idf)]))
}
}
}
}
if (is.null(gbd_df)){
gbd_df <- age_sex_df
}
else{
age_sex_df[setdiff(names(gbd_df), names(age_sex_df))] <- 0
gbd_df[setdiff(names(age_sex_df), names(gbd_df))] <- 0
gbd_df <- rbind(gbd_df, age_sex_df)
}
}
RunLocDf <- function(i_data) {
gbd_df <- NULL
for (ag in 1:length(unique(i_data['age']))){
for (gender in i_gender){
age_sex_df <- NULL
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
dn <- disease_short_names$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character()
agroup <- unique(i_data['age'])[ag]
idf <- dplyr::filter(stringr::str_detect(i_data, sex == gender & age == agroup & measure == dmeasure & cause == dn))
## this works, so the issue in not filter
# idf <- dplyr::filter(i_data, sex == "Female" & age == "55 to 59" & measure == "YLDs (Years Lived with Disability)" & cause == "all causes")
if (nrow(idf) > 0){
population_numbers <- dplyr::filter(str_detect(idf, metric == "Number") %>% select("val"))
idf_rate <- dplyr::filter(str_detect(idf, metric == "Rate") %>% select("val"))
current_idf_rate <- idf_rate
current_population_numbers <- population_numbers
idf$population_number <- 0
if (idf_rate$val != 0 && population_numbers$val != 0)
idf$population_number <- (100000 * population_numbers$val) / idf_rate$val
else{
current_idf_rate <- idf_rate
current_population_numbers <- population_numbers
idf <- dplyr::filter(str_detect(i_data, sex == gender & age == agroup & measure == dmeasure & val > 0))
idf <- dplyr::filter(str_detect(idf, cause == unique(idf$cause)[1]))
idf$cause <- dn
population_numbers <- dplyr::filter(str_detect(idf, metric == "Number") %>% select("val"))
idf_rate <- dplyr::filter(str_detect(idf, metric == "Rate") %>% select("val"))
idf$population_number <- 0
if (idf_rate$val != 0 && population_numbers$val != 0)
idf$population_number <- (100000 * population_numbers$val) / idf_rate$val
}
idf$rate_per_1 <- round(current_idf_rate$val / 100000, 6)
idf[[tolower(paste(dmeasure, "rate", disease_short_names$sname[d], sep = "_"))]] <- idf$rate_per_1
idf[[tolower(paste(dmeasure, "number", disease_short_names$sname[d], sep = "_"))]] <- current_population_numbers$val
idf <- dplyr::filter(str_detect(idf, metric == "Number"))
if (is.null(age_sex_df)){
age_sex_df <- dplyr::select(idf, age, sex, population_number, location, names(idf)[ncol(idf) - 1] , names(idf)[ncol(idf)])
}
else{
age_sex_df <- cbind(age_sex_df, dplyr::select(idf, names(idf)[ncol(idf) - 1] , names(idf)[ncol(idf)]))
}
}
}
}
if (is.null(gbd_df)){
gbd_df <- age_sex_df
}
else{
age_sex_df[setdiff(names(gbd_df), names(age_sex_df))] <- 0
gbd_df[setdiff(names(age_sex_df), names(gbd_df))] <- 0
gbd_df <- rbind(gbd_df, age_sex_df)
}
}
}
return(gbd_df)
}
test <- lapply(test_cr, RunLocDf)
RunLocDf <- function(i_data) {
gbd_df <- NULL
for (ag in 1:length(unique(i_data['age']))){
for (gender in i_gender){
age_sex_df <- NULL
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
dn <- disease_short_names$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character()
agroup <- unique(i_data['age'])[ag]
idf <- dplyr::filter(i_data, sex == gender & age == agroup & measure == dmeasure & cause == dn)
## this works, so the issue in not filter
# idf <- dplyr::filter(i_data, sex == "Female" & age == "55 to 59" & measure == "YLDs (Years Lived with Disability)" & cause == "all causes")
if (nrow(idf) > 0){
population_numbers <- dplyr::filter(str_detect(idf, metric == "Number") %>% select("val"))
idf_rate <- dplyr::filter(str_detect(idf, metric == "Rate") %>% select("val"))
current_idf_rate <- idf_rate
current_population_numbers <- population_numbers
idf$population_number <- 0
if (idf_rate$val != 0 && population_numbers$val != 0)
idf$population_number <- (100000 * population_numbers$val) / idf_rate$val
else{
current_idf_rate <- idf_rate
current_population_numbers <- population_numbers
idf <- dplyr::filter(str_detect(i_data, sex == gender & age == agroup & measure == dmeasure & val > 0))
idf <- dplyr::filter(str_detect(idf, cause == unique(idf$cause)[1]))
idf$cause <- dn
population_numbers <- dplyr::filter(str_detect(idf, metric == "Number") %>% select("val"))
idf_rate <- dplyr::filter(str_detect(idf, metric == "Rate") %>% select("val"))
idf$population_number <- 0
if (idf_rate$val != 0 && population_numbers$val != 0)
idf$population_number <- (100000 * population_numbers$val) / idf_rate$val
}
idf$rate_per_1 <- round(current_idf_rate$val / 100000, 6)
idf[[tolower(paste(dmeasure, "rate", disease_short_names$sname[d], sep = "_"))]] <- idf$rate_per_1
idf[[tolower(paste(dmeasure, "number", disease_short_names$sname[d], sep = "_"))]] <- current_population_numbers$val
idf <- dplyr::filter(str_detect(idf, metric == "Number"))
if (is.null(age_sex_df)){
age_sex_df <- dplyr::select(idf, age, sex, population_number, location, names(idf)[ncol(idf) - 1] , names(idf)[ncol(idf)])
}
else{
age_sex_df <- cbind(age_sex_df, dplyr::select(idf, names(idf)[ncol(idf) - 1] , names(idf)[ncol(idf)]))
}
}
}
}
if (is.null(gbd_df)){
gbd_df <- age_sex_df
}
else{
age_sex_df[setdiff(names(gbd_df), names(age_sex_df))] <- 0
gbd_df[setdiff(names(age_sex_df), names(gbd_df))] <- 0
gbd_df <- rbind(gbd_df, age_sex_df)
}
}
}
return(gbd_df)
}
test <- lapply(test_cr, RunLocDf)
install.packages(c("citr", "dplyr", "kableExtra", "knitr", "tidyverse"))
install.packages(c("citr", "devtools", "dplyr", "ggplot2", "ggpubr", "gridExtra", "janitor", "kableExtra", "knitr", "pillar", "plyr", "tidyverse"))
require(dplyr)
require(tidyverse)
require(knitr)
require(kableExtra)
require(citr)
require(gridExtra)
require(ggpubr)
require(grid)
require(ggplot2)
require(pillar)
require(devtools)
require(janitor)
source('code/functions.R')
install.packages("compiler")
test <- lapply(test_cr, RunLocDf)
test <- RunLocDf(test_cr)
test_cr <- filter(gbd_data_loc_raw_city_regions[[1]], location == "South Gloucestershire")
test <- RunLocDf(test_cr)
i_gender <- c("Male", "Female")
RunLocDf <- function(i_data) {
gbd_df <- NULL
for (ag in 1:length(unique(i_data$age))){
for (gender in i_gender){
age_sex_df <- NULL
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
dn <- disease_short_names$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character()
agroup <- unique(i_data['age'])[ag]
idf <- dplyr::filter(i_data, sex == gender & age == agroup & measure == dmeasure & cause == dn)
## this works, so the issue in not filter
# idf <- dplyr::filter(i_data, sex == "Female" & age == "55 to 59" & measure == "YLDs (Years Lived with Disability)" & cause == "all causes")
if (nrow(idf) > 0){
population_numbers <- dplyr::filter(idf, metric == "Number") %>% select("val")
idf_rate <- dplyr::filter(idf, metric == "Rate") %>% select("val")
current_idf_rate <- idf_rate
current_population_numbers <- population_numbers
idf$population_number <- 0
if (idf_rate$val != 0 && population_numbers$val != 0)
idf$population_number <- (100000 * population_numbers$val) / idf_rate$val
else{
current_idf_rate <- idf_rate
current_population_numbers <- population_numbers
idf <- dplyr::filter(i_data, sex == gender & age == agroup & measure == dmeasure & val > 0)
idf <- dplyr::filter(idf, cause == unique(idf$cause)[1])
idf$cause <- dn
population_numbers <- dplyr::filter(idf, metric == "Number") %>% select("val")
idf_rate <- dplyr::filter(idf, metric == "Rate") %>% select("val")
idf$population_number <- 0
if (idf_rate$val != 0 && population_numbers$val != 0)
idf$population_number <- (100000 * population_numbers$val) / idf_rate$val
}
idf$rate_per_1 <- round(current_idf_rate$val / 100000, 6)
idf[[tolower(paste(dmeasure, "rate", disease_short_names$sname[d], sep = "_"))]] <- idf$rate_per_1
idf[[tolower(paste(dmeasure, "number", disease_short_names$sname[d], sep = "_"))]] <- current_population_numbers$val
idf <- dplyr::filter(idf, metric == "Number")
if (is.null(age_sex_df)){
age_sex_df <- dplyr::select(idf, age, sex, population_number, location, names(idf)[ncol(idf) - 1] , names(idf)[ncol(idf)])
}
else{
age_sex_df <- cbind(age_sex_df, dplyr::select(idf, names(idf)[ncol(idf) - 1] , names(idf)[ncol(idf)]))
}
}
}
}
if (is.null(gbd_df)){
gbd_df <- age_sex_df
}
else{
age_sex_df[setdiff(names(gbd_df), names(age_sex_df))] <- 0
gbd_df[setdiff(names(age_sex_df), names(gbd_df))] <- 0
gbd_df <- rbind(gbd_df, age_sex_df)
}
}
}
return(gbd_df)
}
test <- RunLocDf(test_cr)
localities <- c('Bristol, City of', 'Bath and North East Somerset', 'North Somerset', 'South Gloucestershire')
gbd_input <- filter(gbd_input, location %in% localities) %>% mutate_if(is.factor, as.character) #Delete, already done from by using read_csv
gbd_input$cause <- tolower(gbd_input$cause)
gbd_data_localities_raw <- SortGbdInput(in_data = gbd_input, in_year = year, in_locality = localities)
gbd_data_localities_raw <- left_join(gbd_data_localities_raw, local_goverment_areas, by = "location")
test <- lapply(gbd_data_localities_raw, RunLocDf)
i_gender <- c("Male", "Female")
RunLocDf <- function(i_data) {
gbd_df <- NULL
for (ag in 1:length(unique(i_data[["age"]]))){
for (gender in i_gender){
age_sex_df <- NULL
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
dn <- disease_short_names$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character()
agroup <- unique(i_data['age'])[ag]
idf <- dplyr::filter(i_data, sex == gender & age == agroup & measure == dmeasure & cause == dn)
## this works, so the issue in not filter
# idf <- dplyr::filter(i_data, sex == "Female" & age == "55 to 59" & measure == "YLDs (Years Lived with Disability)" & cause == "all causes")
if (nrow(idf) > 0){
population_numbers <- dplyr::filter(idf, metric == "Number") %>% select("val")
idf_rate <- dplyr::filter(idf, metric == "Rate") %>% select("val")
current_idf_rate <- idf_rate
current_population_numbers <- population_numbers
idf$population_number <- 0
if (idf_rate$val != 0 && population_numbers$val != 0)
idf$population_number <- (100000 * population_numbers$val) / idf_rate$val
else{
current_idf_rate <- idf_rate
current_population_numbers <- population_numbers
idf <- dplyr::filter(i_data, sex == gender & age == agroup & measure == dmeasure & val > 0)
idf <- dplyr::filter(idf, cause == unique(idf$cause)[1])
idf$cause <- dn
population_numbers <- dplyr::filter(idf, metric == "Number") %>% select("val")
idf_rate <- dplyr::filter(idf, metric == "Rate") %>% select("val")
idf$population_number <- 0
if (idf_rate$val != 0 && population_numbers$val != 0)
idf$population_number <- (100000 * population_numbers$val) / idf_rate$val
}
idf$rate_per_1 <- round(current_idf_rate$val / 100000, 6)
idf[[tolower(paste(dmeasure, "rate", disease_short_names$sname[d], sep = "_"))]] <- idf$rate_per_1
idf[[tolower(paste(dmeasure, "number", disease_short_names$sname[d], sep = "_"))]] <- current_population_numbers$val
idf <- dplyr::filter(idf, metric == "Number")
if (is.null(age_sex_df)){
age_sex_df <- dplyr::select(idf, age, sex, population_number, location, names(idf)[ncol(idf) - 1] , names(idf)[ncol(idf)])
}
else{
age_sex_df <- cbind(age_sex_df, dplyr::select(idf, names(idf)[ncol(idf) - 1] , names(idf)[ncol(idf)]))
}
}
}
}
if (is.null(gbd_df)){
gbd_df <- age_sex_df
}
else{
age_sex_df[setdiff(names(gbd_df), names(age_sex_df))] <- 0
gbd_df[setdiff(names(age_sex_df), names(gbd_df))] <- 0
gbd_df <- rbind(gbd_df, age_sex_df)
}
}
}
return(gbd_df)
}
test <- lapply(gbd_data_localities_raw, RunLocDf)
i_gender <- c("Male", "Female")
RunLocDf <- function(i_data) {
gbd_df <- NULL
for (ag in 1:length(unique(i_data["age"]))){
for (gender in i_gender){
age_sex_df <- NULL
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
dn <- disease_short_names$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character()
agroup <- unique(i_data['age'])[ag]
idf <- dplyr::filter(i_data, sex == gender & age == agroup & measure == dmeasure & cause == dn)
## this works, so the issue in not filter
# idf <- dplyr::filter(i_data, sex == "Female" & age == "55 to 59" & measure == "YLDs (Years Lived with Disability)" & cause == "all causes")
if (nrow(idf) > 0){
population_numbers <- dplyr::filter(idf, metric == "Number") %>% select("val")
idf_rate <- dplyr::filter(idf, metric == "Rate") %>% select("val")
current_idf_rate <- idf_rate
current_population_numbers <- population_numbers
idf$population_number <- 0
if (idf_rate$val != 0 && population_numbers$val != 0)
idf$population_number <- (100000 * population_numbers$val) / idf_rate$val
else{
current_idf_rate <- idf_rate
current_population_numbers <- population_numbers
idf <- dplyr::filter(i_data, sex == gender & age == agroup & measure == dmeasure & val > 0)
idf <- dplyr::filter(idf, cause == unique(idf$cause)[1])
idf$cause <- dn
population_numbers <- dplyr::filter(idf, metric == "Number") %>% select("val")
idf_rate <- dplyr::filter(idf, metric == "Rate") %>% select("val")
idf$population_number <- 0
if (idf_rate$val != 0 && population_numbers$val != 0)
idf$population_number <- (100000 * population_numbers$val) / idf_rate$val
}
idf$rate_per_1 <- round(current_idf_rate$val / 100000, 6)
idf[[tolower(paste(dmeasure, "rate", disease_short_names$sname[d], sep = "_"))]] <- idf$rate_per_1
idf[[tolower(paste(dmeasure, "number", disease_short_names$sname[d], sep = "_"))]] <- current_population_numbers$val
idf <- dplyr::filter(idf, metric == "Number")
if (is.null(age_sex_df)){
age_sex_df <- dplyr::select(idf, age, sex, population_number, location, names(idf)[ncol(idf) - 1] , names(idf)[ncol(idf)])
}
else{
age_sex_df <- cbind(age_sex_df, dplyr::select(idf, names(idf)[ncol(idf) - 1] , names(idf)[ncol(idf)]))
}
}
}
}
if (is.null(gbd_df)){
gbd_df <- age_sex_df
}
else{
age_sex_df[setdiff(names(gbd_df), names(age_sex_df))] <- 0
gbd_df[setdiff(names(age_sex_df), names(gbd_df))] <- 0
gbd_df <- rbind(gbd_df, age_sex_df)
}
}
}
return(gbd_df)
}
test <- lapply(gbd_data_localities_raw, RunLocDf)
gbd_data_loc_raw_city_regions<- split(gbd_data_localities_raw, gbd_data_localities_raw$cityregion)
gbd_data_localities_raw <- left_join(gbd_data_localities_raw, local_goverment_areas, by = "location")
year <- 2017
year_trend <- 2007
i_age_cohort <- c(17, 22, 27, 32, 37, 42, 47, 52, 57, 62, 67, 72, 77, 82, 87, 92, 97)
i_sex <- c("male", "female")
## Relative paths
relative_path_execute <- '../mh-execute/'
relative_path_mslt <- '../mh-mslt/'
## Get look up table from mh-execute
look_up_table <- read_csv(paste0(relative_path_execute, 'inputs/mh_regions_lad_lookup.csv'))
##NEED THESE?
# city_regions <- data.frame(unique(look_up_table$cityregion))
# city_regions <- city_regions[2:10,]
## Dataframe with local goverment areas within each city region
local_goverment_areas <-  look_up_table %>% filter(look_up_table$cityregion != "")
names(local_goverment_areas)[names(local_goverment_areas) == "lad11nm"] <- "location"
### NO NEED FOR this
# ## Generate a list of vectors of each city region and localities. Use [[]] to see each city region.
#
# city_regions <- split(local_goverment_areas$lad11nm, f = local_goverment_areas$cityregion)
## Here we should have a loop to do all the processing in a loop for each of the localities (CHECK WITH ALI)
## There will be one input data frame for processing in mslt_code for each of the city regions.
## BELOW IS NOT CONNECTED TO ABOVE CODE
## The localities should be within the city region defined in the loop
# localities <- c('Bristol, City of', 'Bath and North East Somerset', 'North Somerset', 'South Gloucestershire')
# ---- chunk-1.1: Get Global Buden of Disease data ----
## GBD MISSING DATA FOR NOTTINGHAM: Ashfield, Bassetlaw, Broxtowe, Gedling, Mansfield, Newark and Sherwood, Rushcliffe and City of London.
## Get data from GBD dowloaded data for England (all localities)
## Use code developed by Marko Tainio to extract zip files
## Created in February-March 2019 by Marko Tainio (modified by Belen Zapata June 2019 for Metahit project)
## This script extracts required Global Burden of Disease data from the zip files dowloaded from http://ghdx.healthdata.org/gbd-results-tool
## by first extracting zip-files, then reading csv file, adding required data to combined dataframe
## and finally deleiting extracted files. Resulting dataframe is then saved as csv-file.
## Defining folder where the data is stored (stored externally in my box as the GBD files are large)
## CHANGE TO v-DRIVE
"C:\Users\e95517\Dropbox\Collaborations\James Woodcock\Metahit\Data\GBD2017\IHME-GBD_2017_DATA-0a504496-1.zip"
data_folder <- "C:/Users/e95517/Dropbox/Collaborations/James Woodcock/Metahit/Data/GBD2017/"
temp_folder <- paste0(data_folder,"/temp")
result_folder <- paste0(data_folder,"/final")
gbdfile_name <- "IHME-GBD_2017_DATA-0a504496-" # CHANGE NAME WHEN NEW DATA IS DOWNLOADED
## Next two lines defines locations that will be extracted.
## NEED THIS ONCE WE HAVE TH ELOOP?
#LGAs <- unlist(read_csv("data/gbd/LGAs to be extracted.csv")[,2]) # CREATE FILE FOR YOUR LOCATIONS OF INTEREST, HERE LOCALITIES IN CITY OF BRISTOL REGION
## LOOP TO EXTRACT DATA FOR EACH CITY REGION
data_extracted <- NULL
for (i in 1:40) { # LOOP NUMBER DEPENDS ON NUMBER OF ZIP FILES, HERE I JUST GOT DATA FOR ALL LOCALITIES IN ENGLAND
file_number <- i
file_select <- paste0(data_folder,gbdfile_name, i,".zip")
unzip(file_select, exdir=temp_folder)
data_read <- read_csv((paste0(temp_folder,"/", gbdfile_name, i, ".csv")))
file.remove(paste0(temp_folder,"/", gbdfile_name, i, ".csv"))
# data_read <- subset(data_read, location_name %in% local_goverment_areas$lad11nm) # location name is easier to identify
data_extracted <- rbind(data_extracted,data_read)
}
unlink(paste0(temp_folder), recursive = TRUE)
# ---- chunk-1.2: Define parameters from data ----
## Define measure (e.g. deaths) and cause parameters (e.g. all causes, breast cancer) (this is to avoid hard coding the parameters)
## Min Length is not changing anything, how can we make it characters in the first place, rather than having to ocnvert below before running RunLocDF?
disease_short_names <- data.frame(disease = tolower(as.character(unique(data_extracted$cause_name))),
sname = tolower(abbreviate(unique(data_extracted$cause_name, max = 2))),
stringsAsFactors = F)
disease_short_names <- disease_short_names %>% mutate(is_not_dis = ifelse((str_detect(disease, "injuries") |
str_detect(disease, "All causes") |
str_detect(disease, "Lower respiratory infections")),
1, 0) )
disease_short_names[disease_short_names$sname == "allc", "is_not_dis"] <- 2
disease_short_names[disease_short_names$sname == "lwri", "is_not_dis"] <- 1
### Combine with acronyms from execute-mh
## Get execute-mh diseases (CHECK WITH ALI TO USE RELATIVE PATH TO READ DIRECLTY FROM MH-EXECUTE DIRECTORY, DATA PREP??)
disease_names_execute <- read_csv(paste0(relative_path_execute, 'inputs/dose_response/disease_outcomes_lookup.csv'))
disease_names_execute <- disease_names_execute[1:2]
disease_names_execute$disease <- tolower(disease_names_execute$GBD_name)
disease_short_names <- left_join(disease_short_names, disease_names_execute, by = "disease")
## Add injuries
disease_short_names$acronym <- ifelse(str_detect(disease_short_names$disease, "injuries"), disease_short_names$disease, disease_short_names$acronym)
## Only keep first word for acronyns
disease_short_names$acronym <- word(disease_short_names$acronym, 1)
## Add males and females only diseases
disease_short_names$males <- ifelse(disease_short_names$disease %in% c("breast cancer", "uterine cancer"), 0, 1)
disease_short_names$females <- 1
## Replace NAs with blank
disease_short_names$acronym[is.na(disease_short_names$acronym)] <- "no_pif"
## Add column to match names from mh-execute
write_csv(disease_short_names, "data/parameters/disease_names.csv")
disease_measures_list <- data.frame(measure = unique(data_extracted$measure_name)) %>%
pull(measure) %>%
as.character() %>%
as.list()
# ---- chunk-2: Dismod and Disbayes data input preparation ----
gbd_input <- data_extracted
# ---- chunk-2.1: Clean data ----
names(gbd_input) = gsub(pattern = "_name", replacement = "", x = names(gbd_input))
gbd_input <- select(gbd_input,-contains("id"))
# gbd_input <- filter(gbd_input, location %in% localities) %>% mutate_if(is.factor, as.character) Delete, already done from by using read_csv
gbd_input$cause <- tolower(gbd_input$cause)
# ---- chunk-2.2: Sort data for all local goverment area in the 9 city regions ----##
## GBD data has less localities than those in the local_goverment_areas list (Nottinham missing)
localities <- unique(gbd_input$location)
gbd_data_localities_raw <- SortGbdInput(in_data = gbd_input, in_year = year, in_locality = localities)
## Add city regions variable
gbd_data_localities_raw <- left_join(gbd_data_localities_raw, local_goverment_areas, by = "location")
## Create separate data frames from gbd_data_localities_raw for each city region.
gbd_data_loc_raw_city_regions<- split(gbd_data_localities_raw, gbd_data_localities_raw$cityregion)
test <- lapply(test_cr, RunLocDf)
