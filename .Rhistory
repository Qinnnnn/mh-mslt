### How to ignore calculations with errors?
test_bristol_2_list <- lapply(dataframe_list, ci2numDF)
data <- gbd_city_region_data[[1]]
dataframe_list <- list()
index <- 1
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
in_measure <- disease_measures_list[dm] %>% as.character() %>% tolower()
if (disease_short_names$is_not_dis[d] != 0 || in_measure == "ylds (years lived with disability)" ||
in_measure == "prevalence") {
}
else {
# || disease_short_names$acronym[d] == 'no_pif' || disease_short_names$acronym[d] == 'other')
med <- paste0(in_measure, "_med_", disease_short_names$sname[d])
low <- paste0(in_measure, "_lower95_", disease_short_names$sname[d])
upper <- paste0(in_measure, "_upper95_", disease_short_names$sname[d])
dataframe_list[[index]] <- dplyr::select(data, population_number, med, low, upper)
dataframe_list[[index]]$est <- dataframe_list[[index]][[med]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$lower <- dataframe_list[[index]][[low]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$upper <- dataframe_list[[index]][[upper]]/dataframe_list[[index]][[1]]
names(dataframe_list)[index] <- paste(in_measure, disease_short_names$sname[d], sep = '_')
index <- index + 1
}}}
### How to ignore calculations with errors?
test_bristol_2_list <- lapply(dataframe_list, ci2numDF)
data <- gbd_city_region_data[[1]]
disease_measure_list <- list()
index <- 1
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
in_measure <- disease_measures_list[dm] %>% as.character() %>% tolower()
if (disease_short_names$is_not_dis[d] != 0 || in_measure == "ylds (years lived with disability)" ||
in_measure == "prevalence") {
}
else {
# || disease_short_names$acronym[d] == 'no_pif' || disease_short_names$acronym[d] == 'other')
med <- paste0(in_measure, "_med_", disease_short_names$sname[d])
low <- paste0(in_measure, "_lower95_", disease_short_names$sname[d])
upper <- paste0(in_measure, "_upper95_", disease_short_names$sname[d])
disease_measure_list[[index]] <- dplyr::select(data, population_number, med, low, upper)
disease_measure_list[[index]]$est <- disease_measure_list[[index]][[med]]/disease_measure_list[[index]][[1]]
disease_measure_list[[index]]$lower <- disease_measure_list[[index]][[low]]/disease_measure_list[[index]][[1]]
disease_measure_list[[index]]$upper <- disease_measure_list[[index]][[upper]]/disease_measure_list[[index]][[1]]
names(disease_measure_list)[index] <- paste(in_measure, disease_short_names$sname[d], sep = '_')
index <- index + 1
}}}
### How to ignore calculations with errors?
test_bristol_2_list <- lapply(disease_measure_list, ci2numDF)
GetDataCi2Num <- function(i_data) {
disease_measure_list <- list()
index <- 1
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
in_measure <- disease_measures_list[dm] %>% as.character() %>% tolower()
if (disease_short_names$is_not_dis[d] != 0 || in_measure == "ylds (years lived with disability)" ||
in_measure == "prevalence") {
}
else {
# || disease_short_names$acronym[d] == 'no_pif' || disease_short_names$acronym[d] == 'other')
med <- paste0(in_measure, "_med_", disease_short_names$sname[d])
low <- paste0(in_measure, "_lower95_", disease_short_names$sname[d])
upper <- paste0(in_measure, "_upper95_", disease_short_names$sname[d])
disease_measure_list[[index]] <- dplyr::select(i_data, population_number, med, low, upper)
disease_measure_list[[index]]$est <- disease_measure_list[[index]][[med]]/disease_measure_list[[index]][[1]]
disease_measure_list[[index]]$lower <- disease_measure_list[[index]][[low]]/disease_measure_list[[index]][[1]]
disease_measure_list[[index]]$upper <- disease_measure_list[[index]][[upper]]/disease_measure_list[[index]][[1]]
names(disease_measure_list)[index] <- paste(in_measure, disease_short_names$sname[d], sep = '_')
index <- index + 1
}}}}
list_test_all <- lapply(GetDataCi2Num, gbd_city_region_data)
list_test_all <- lapply(gbd_city_region_data, GetDataCi2Num)
test_2 <- GetDataCi2Num(gbd_city_region_data[[1]])
### How to ignore calculations with errors?
test_bristol_2_list <- lapply(disease_measure_list, ci2numDF)
### How to ignore calculations with errors?
test_bristol_2_list <- lapply(data, ci2numDF)
dataframe_list <- list()
index <- 1
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
in_measure <- disease_measures_list[dm] %>% as.character() %>% tolower()
if (disease_short_names$is_not_dis[d] != 0 || in_measure == "ylds (years lived with disability)" ||
in_measure == "prevalence") {
}
else {
# || disease_short_names$acronym[d] == 'no_pif' || disease_short_names$acronym[d] == 'other')
med <- paste0(in_measure, "_med_", disease_short_names$sname[d])
low <- paste0(in_measure, "_lower95_", disease_short_names$sname[d])
upper <- paste0(in_measure, "_upper95_", disease_short_names$sname[d])
dataframe_list[[index]] <- dplyr::select(data, population_number, med, low, upper)
dataframe_list[[index]]$est <- dataframe_list[[index]][[med]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$lower <- dataframe_list[[index]][[low]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$upper <- dataframe_list[[index]][[upper]]/dataframe_list[[index]][[1]]
names(dataframe_list)[index] <- paste(in_measure, disease_short_names$sname[d], sep = '_')
index <- index + 1
}}}
### How to ignore calculations with errors?
test_bristol_2_list <- lapply(dataframe_list, ci2numDF)
Create_Data_ci2Num <- function(i_data) {
dataframe_list <- list()
index <- 1
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
in_measure <- disease_measures_list[dm] %>% as.character() %>% tolower()
if (disease_short_names$is_not_dis[d] != 0 || in_measure == "ylds (years lived with disability)" ||
in_measure == "prevalence") {
}
else {
# || disease_short_names$acronym[d] == 'no_pif' || disease_short_names$acronym[d] == 'other')
med <- paste0(in_measure, "_med_", disease_short_names$sname[d])
low <- paste0(in_measure, "_lower95_", disease_short_names$sname[d])
upper <- paste0(in_measure, "_upper95_", disease_short_names$sname[d])
dataframe_list[[index]] <- dplyr::select(data, population_number, med, low, upper)
dataframe_list[[index]]$est <- dataframe_list[[index]][[med]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$lower <- dataframe_list[[index]][[low]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$upper <- dataframe_list[[index]][[upper]]/dataframe_list[[index]][[1]]
names(dataframe_list)[index] <- paste(in_measure, disease_short_names$sname[d], sep = '_')
index <- index + 1
}}}}
Create_Data_ci2Num <- function(i_data) {
dataframe_list <- list()
index <- 1
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
in_measure <- disease_measures_list[dm] %>% as.character() %>% tolower()
if (disease_short_names$is_not_dis[d] != 0 || in_measure == "ylds (years lived with disability)" ||
in_measure == "prevalence") {
}
else {
# || disease_short_names$acronym[d] == 'no_pif' || disease_short_names$acronym[d] == 'other')
med <- paste0(in_measure, "_med_", disease_short_names$sname[d])
low <- paste0(in_measure, "_lower95_", disease_short_names$sname[d])
upper <- paste0(in_measure, "_upper95_", disease_short_names$sname[d])
data <- i_data
dataframe_list[[index]] <- dplyr::select(data, population_number, med, low, upper)
dataframe_list[[index]]$est <- dataframe_list[[index]][[med]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$lower <- dataframe_list[[index]][[low]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$upper <- dataframe_list[[index]][[upper]]/dataframe_list[[index]][[1]]
names(dataframe_list)[index] <- paste(in_measure, disease_short_names$sname[d], sep = '_')
index <- index + 1
}}}}
### Test function
test <- Create_Data_ci2Num(gbd_city_region_data[[1]])
### Test function
test <- list(Create_Data_ci2Num(gbd_city_region_data[[1]]))
### Test function
test <- lapply(gbd_city_region_data[[1]], Create_Data_ci2Num)
dataframe_list <- list()
index <- 1
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
in_measure <- disease_measures_list[dm] %>% as.character() %>% tolower()
if (disease_short_names$is_not_dis[d] != 0 || in_measure == "ylds (years lived with disability)" ||
in_measure == "prevalence") {
}
else {
# || disease_short_names$acronym[d] == 'no_pif' || disease_short_names$acronym[d] == 'other')
med <- paste0(in_measure, "_med_", disease_short_names$sname[d])
low <- paste0(in_measure, "_lower95_", disease_short_names$sname[d])
upper <- paste0(in_measure, "_upper95_", disease_short_names$sname[d])
data <- gbd_city_region_data[[1]]
dataframe_list[[index]] <- dplyr::select(data, population_number, med, low, upper)
dataframe_list[[index]]$est <- dataframe_list[[index]][[med]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$lower <- dataframe_list[[index]][[low]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$upper <- dataframe_list[[index]][[upper]]/dataframe_list[[index]][[1]]
names(dataframe_list)[index] <- paste(in_measure, disease_short_names$sname[d], sep = '_')
index <- index + 1
}}}
### How to ignore calculations with errors?
test_bristol_2_list <- lapply(dataframe_list, ci2numDF)
data <- gbd_city_region_data[[1]]
dataframe_list <- list()
index <- 1
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
in_measure <- disease_measures_list[dm] %>% as.character() %>% tolower()
if (disease_short_names$is_not_dis[d] != 0 || in_measure == "ylds (years lived with disability)" ||
in_measure == "prevalence") {
}
else {
# || disease_short_names$acronym[d] == 'no_pif' || disease_short_names$acronym[d] == 'other')
med <- paste0(in_measure, "_med_", disease_short_names$sname[d])
low <- paste0(in_measure, "_lower95_", disease_short_names$sname[d])
upper <- paste0(in_measure, "_upper95_", disease_short_names$sname[d])
dataframe_list[[index]] <- dplyr::select(data, population_number, med, low, upper)
dataframe_list[[index]]$est <- dataframe_list[[index]][[med]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$lower <- dataframe_list[[index]][[low]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$upper <- dataframe_list[[index]][[upper]]/dataframe_list[[index]][[1]]
names(dataframe_list)[index] <- paste(in_measure, disease_short_names$sname[d], sep = '_')
index <- index + 1
}}}
### How to ignore calculations with errors?
test_bristol_2_list <- lapply(dataframe_list, ci2numDF)
disbayes_input_beta_agg[,c(3)]=trimws(disbayes_input_beta_agg[,c(3)])
disbayes_input_beta_agg <- plyr::ldply(disbayes_inputs_beta, rbind) %>% group_by(indexagg)
disbayes_input_beta_agg[,c(3)]=trimws(disbayes_input_beta_agg[,c(3)])
dataframe_list <- list()
index <- 1
for (i in 1:length(gbd_city_region_data)) {
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
in_measure <- disease_measures_list[dm] %>% as.character() %>% tolower()
if (disease_short_names$is_not_dis[d] != 0 || in_measure == "ylds (years lived with disability)" ||
in_measure == "prevalence") {
}
else {
# || disease_short_names$acronym[d] == 'no_pif' || disease_short_names$acronym[d] == 'other')
med <- paste0(in_measure, "_med_", disease_short_names$sname[d])
low <- paste0(in_measure, "_lower95_", disease_short_names$sname[d])
upper <- paste0(in_measure, "_upper95_", disease_short_names$sname[d])
data <- gbd_city_region_data[[i]]
dataframe_list[[index]] <- dplyr::select(data, population_number, cityregion, sex_age_cat, med, low, upper)
dataframe_list[[index]]$est <- dataframe_list[[index]][[med]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$lower <- dataframe_list[[index]][[low]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$upper <- dataframe_list[[index]][[upper]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$index <- paste(in_measure, disease_short_names$sname[d], sep = "_")
dataframe_list[[index]]$indexagg <- paste(dataframe_list[[index]]$index, dataframe_list[[index]]$sex_age_cat,
dataframe_list[[index]]$cityregion, sep = "_")
suppressWarnings(names(dataframe_list)[index] <- paste(gbd_city_region_data[[i]]$cityregion,in_measure, disease_short_names$sname[d], sep = '_'))
index <- index + 1
}}}}
require(ggplot2)
# require(pillar)
require(janitor)
require(tidyverse)
require(dplyr)
require(conflicted)
require(rlist)
require(reshape)
require(reshape2)
require(zoo)
if (interactive()) {
require(conflicted)
}
conflict_prefer("filter", "dplyr")
## Packages for generation of epi inputs
require(devtools)
require(rstan)
require(Rcpp)
require(codetools)
##Additional code to make disbayes work (includes ci2num to create Credible Intervals?)
# install_github("chjackson/disbayes")
require(disbayes)
source('code/functions.R')
dataframe_list <- list()
index <- 1
for (i in 1:length(gbd_city_region_data)) {
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
in_measure <- disease_measures_list[dm] %>% as.character() %>% tolower()
if (disease_short_names$is_not_dis[d] != 0 || in_measure == "ylds (years lived with disability)" ||
in_measure == "prevalence") {
}
else {
# || disease_short_names$acronym[d] == 'no_pif' || disease_short_names$acronym[d] == 'other')
med <- paste0(in_measure, "_med_", disease_short_names$sname[d])
low <- paste0(in_measure, "_lower95_", disease_short_names$sname[d])
upper <- paste0(in_measure, "_upper95_", disease_short_names$sname[d])
data <- gbd_city_region_data[[i]]
dataframe_list[[index]] <- dplyr::select(data, population_number, cityregion, sex_age_cat, med, low, upper)
dataframe_list[[index]]$est <- dataframe_list[[index]][[med]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$lower <- dataframe_list[[index]][[low]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$upper <- dataframe_list[[index]][[upper]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$index <- paste(in_measure, disease_short_names$sname[d], sep = "_")
dataframe_list[[index]]$indexagg <- paste(dataframe_list[[index]]$index, dataframe_list[[index]]$sex_age_cat,
dataframe_list[[index]]$cityregion, sep = "_")
suppressWarnings(names(dataframe_list)[index] <- paste(gbd_city_region_data[[i]]$cityregion,in_measure, disease_short_names$sname[d], sep = '_'))
index <- index + 1
}}}}
## Create R Markdown for data preparation
# ---- chunk-intro ----
## City regions, prepare a dataset for each of them by aggregating local goverment areas
# Sheffield City Region Combined Authority: Barnsley, Doncaster, Rotherham, Sheffield.
#
# North East Combined Authority: County Durham, Gateshead, Newcastle upon Tyne, North Tyneside, Northumberland, South Tyneside, Sunderland.
#
# Greater Manchester Combined Authority: Bolton, Bury, Manchester, Oldham, Rochdale, Salford, Stockport, Tameside, Trafford, Wigan.
#
# Liverpool City Region Combined Authority: Halton, Knowsley, Liverpool, St. Helens, Sefton, Wirral.
#
# West Yorkshire Combined Authority: Bradford, Calderdale, Kirklees, Leeds, Wakefield.
#
# Bristol: Bath and North East Somerset, City of Bristol, North Somerset, South Gloucestershire.
#
# Nottingham: Ashfield, Bassetlaw, Broxtowe, Gedling, Mansfield, Nottingham, Newark and Sherwood, Rushcliffe. (NO GBD DATA AVAILABLE)
#
# West Midlands Combined Authority: Birmingham, Coventry, Dudley, Sandwell, Solihull, Walsall, Wolverhampton.
# ---- chunk-1: Data preparation ----
## Source functions
source("code/functions.R")
## Define parameters
i_sex <- c("male", "female")
## Relative paths
relative_path_execute <- '../mh-execute/'
relative_path_mslt <- '../mh-mslt/'
## Get look up table from mh-execute
look_up_table <- read_csv(paste0(relative_path_execute, 'inputs/mh_regions_lad_lookup.csv'))
## Dataframe with local goverment areas within each city region
local_goverment_areas <- look_up_table
## Add non city regions names (useful for checking totals)
names_non_cr <- c("United Kingdom", "England", "East Midlands", "East of England", "Greater London", "North East England",
'North West England', "South East England", "South West England", "West Midlands", "Yorkshire and the Humber",
"Northern Ireland", "Scotland", "Wales")
for (i in names_non_cr){
local_goverment_areas <- rbind(local_goverment_areas, c(i, i, i, i, i))
}
local_goverment_areas <-  local_goverment_areas %>% dplyr::filter(cityregion != "")
names(local_goverment_areas)[names(local_goverment_areas) == "lad11nm"] <- "location"
local_goverment_areas$location <- gsub('St. Helens', 'St Helens', local_goverment_areas$location)
city_regions <- split(local_goverment_areas$location, f = local_goverment_areas$cityregion)
# ---- chunk-1.1: Get Global Burden of Disease data ----
## GBD MISSING DATA FOR NOTTINGHAM: Ashfield, Bassetlaw, Broxtowe, Gedling, Mansfield, Newark and Sherwood, Rushcliffe and City of London.
## Get data from GBD dowloaded data for UK (all localities)
## Use code developed by Marko Tainio to extract zip files
## Created in February-March 2019 by Marko Tainio (modified by Belen Zapata June 2019 for Metahit project)
## This script extracts required Global Burden of Disease data from the zip files dowloaded from http://ghdx.healthdata.org/gbd-results-tool
## by first extracting zip-files, then reading csv file, adding required data to combined dataframe
## and finally deleiting extracted files. Resulting dataframe is then saved as csv-file.
## Defining folder where the data is stored (stored externally in my box as the GBD files are large)
## CHANGE TO v-DRIVE
work_folder <- "C:/Users/e95517/"
home_folder <- "C:/Users/Bele/"
#v_folder <- TO COMPLETE AND CHANGE BELOW.
## Change folder to work or home
# CHANGE DATA FOLDER
data_folder <- paste0(work_folder, "Dropbox/Collaborations/James Woodcock/Metahit/Data/GBD2017/")
temp_folder <- paste0(data_folder,"temp")
result_folder <- paste0(data_folder,"final")
gbdfile_name <- "IHME-GBD_2017_DATA-ac95a757-" # CHANGE NAME WHEN NEW DATA IS DOWNLOADED
## Loop to extract zip file data
data_extracted <- NULL
for (i in 1:4) { # LOOP NUMBER DEPENDS ON NUMBER OF ZIP FILES, HERE I JUST GOT DATA FOR ALL LOCALITIES IN ENGLAND
file_number <- i
file_select <- paste0(data_folder,gbdfile_name, i,".zip")
unzip(file_select, exdir=temp_folder)
data_read <- read_csv((paste0(temp_folder,"/", gbdfile_name, i, ".csv")))
file.remove(paste0(temp_folder,"/", gbdfile_name, i, ".csv"))
data_read <- subset(data_read, location_name %in% local_goverment_areas$location) # location name is easier to identify
data_extracted <- rbind(data_extracted,data_read)
}
unlink(paste0(temp_folder), recursive = TRUE)
# write_rds(data_extracted, paste0(relative_path_mslt, "data/city regions/data_extracted.rds"))
# ---- chunk-1.2: Define parameters from data ----
## Define measure (e.g. deaths) and cause parameters (e.g. all causes, breast cancer) (this is to avoid hard coding the parameters)
## Min Length is not changing anything, how can we make it characters in the first place, rather than having to ocnvert below before running RunLocDF?
disease_short_names <- data.frame(disease = tolower(as.character(unique(data_extracted$cause_name))),
sname = tolower(abbreviate(unique(data_extracted$cause_name, max = 2))),
stringsAsFactors = F)
disease_short_names <- disease_short_names %>% mutate(is_not_dis = ifelse((str_detect(disease, "injuries") |
str_detect(disease, "All causes") |
str_detect(disease, "Lower respiratory infections")),
1, 0) )
disease_short_names[disease_short_names$sname == "allc", "is_not_dis"] <- 2
disease_short_names[disease_short_names$sname == "lwri", "is_not_dis"] <- 1
### Combine with acronyms from execute-mh
## Get execute-mh diseases (CHECK WITH ALI TO USE RELATIVE PATH TO READ DIRECLTY FROM MH-EXECUTE DIRECTORY, DATA PREP??)
disease_names_execute <- read_csv(paste0(relative_path_execute, "inputs/dose_response/disease_outcomes_lookup.csv"))
disease_names_execute <- disease_names_execute[1:2]
disease_names_execute$disease <- tolower(disease_names_execute$GBD_name)
disease_short_names <- left_join(disease_short_names, disease_names_execute, by = "disease")
## Add injuries
disease_short_names$acronym <- ifelse(str_detect(disease_short_names$disease, "injuries"), disease_short_names$disease, disease_short_names$acronym)
## Only keep first word for acronyns
disease_short_names$acronym <- word(disease_short_names$acronym, 1)
## Add males and females only diseases
disease_short_names$males <- ifelse(disease_short_names$disease %in% c("breast cancer", "uterine cancer"), 0, 1)
disease_short_names$females <- 1
## Replace NAs with blank
disease_short_names$acronym[is.na(disease_short_names$acronym)] <- "no_pif"
## Add column to match names from mh-execute
write_csv(disease_short_names, "data/parameters/disease_names.csv")
disease_measures_list <- data.frame(measure = unique(data_extracted$measure_name)) %>%
pull(measure) %>%
as.character() %>%
as.list()
# ---- chunk-2: Dismod and Disbayes data input preparation ----
## ADD some intro to Markdown
# ---- chunk-2.1: Clean data ----
names(data_extracted) = gsub(pattern = "_name", replacement = "", x = names(data_extracted))
data_extracted <- select(data_extracted,-contains("id"))
data_extracted$cause <- tolower(data_extracted$cause)
data_extracted <- left_join(local_goverment_areas, data_extracted, by = "location")
# ---- chunk-2.2: Sort data per local goverment area ----
## We first derive populaiton and cases numbers (e.g. all cause mortality) for each locality and then aggregate at the City Region level.
city_regions_list_loc <- split(data_extracted , f = data_extracted$cityregion)
##NO NEED FOR COMMENTED (DELETE ONCE TESTED)
city_regions_list <- split(data_extracted , f = data_extracted$cityregion)
city_regions_list_loc <- list()
for (i in 1:length(city_regions_list)){
city_regions_list_loc[[i]] <- split(city_regions_list[[i]], f = city_regions_list[[i]]$location)
}
### Remove data extracted
remove(data_extracted)
### This code takes about 0.5 hour to run CHECK WITH ROB AND ALAN HOW TO MAKE FASTER
## Test to include lower and upper credible intervals.
## ADD CI2NUM CALCS TO THEN SUM CALCS IN AGG
index <- 1
gbd_loc_data_processed <- list()
for (i in 1:length(city_regions_list_loc)) {
gbd_loc_data_processed[[index]] <- lapply(city_regions_list_loc[[i]], RunLocDf)
index <- index + 1
}
# View(gbd_loc_data_processed[[1]][[1]])
### Delete null data frames within lists
gbd_loc_data_processed <-  list.clean(gbd_loc_data_processed, fun = is.null, recursive = TRUE)
# ---- chunk-2.3: Create data frame for city region with all localities ----
index <- 1
gbd_city_region_data <- list()
for (i in 1:length(gbd_loc_data_processed)){
gbd_city_region_data[[index]] <- bind_rows(gbd_loc_data_processed[[i]], .id = 'number')
## Drop number columns (CHECK WHAT THIS IS DOING)
gbd_city_region_data[[index]] <- gbd_city_region_data[[index]][ -c(1) ]
## Clean dataframes per city regions
gbd_city_region_data[[index]] <- dplyr::select(gbd_city_region_data[[index]], -contains('rate')) %>% mutate_if(is.factor, as.character)
gbd_city_region_data[[index]]$sex_age_cat <- paste(gbd_city_region_data[[index]]$sex, gbd_city_region_data[[index]]$age, sep = "_")
gbd_city_region_data[[index]] <- select(gbd_city_region_data[[index]], -c(age, sex))
### Add city region name here
suppressWarnings(names(gbd_city_region_data)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
index <- index + 1
}
View(gbd_city_region_data[[1]])
## Move to functions
### This works by picking up names
# in_disease <- "mvri"
# in_measure <- "prevalence"
# in_data <- gbd_city_region_data[[1]]
ci2numDF <- function(in_data) {
dataframe <- dplyr::select(in_data, population_number, est, lower, upper, sex_age_cat, cityregion, indexagg)  %>%
select(a=population_number,b= est,c= lower,d=upper, e= sex_age_cat, f=cityregion, h=indexagg) %>%
rowwise() %>%
# browser()
mutate(num=ifelse(b==0,0,ci2num(b/a,c/a,d/a)[[1]])) %>%
mutate(denom=ifelse(b==0,0,ci2num(b/a,c/a,d/a)[[2]])) %>%
mutate(population_number = a) %>%
mutate(sex_age_cat = e) %>%
mutate(cityregion = f) %>%
mutate(indexagg = h) %>%
select(population_number, indexagg, num, denom) %>%
as.data.frame()
}
### Prepare data to process in ci2numDF (incidence, prevalence and deaths as these are disbayes inputs)
### Test data for all city regions and then do a loop. I ned to create a list of city regions (23) with each containing a list of
### diseases (n=26)
# data <- gbd_city_region_data[[1]]
dataframe_list <- list()
index <- 1
for (i in 1:length(gbd_city_region_data)) {
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
in_measure <- disease_measures_list[dm] %>% as.character() %>% tolower()
if (disease_short_names$is_not_dis[d] != 0 || in_measure == "ylds (years lived with disability)" ||
in_measure == "prevalence") {
}
else {
# || disease_short_names$acronym[d] == 'no_pif' || disease_short_names$acronym[d] == 'other')
med <- paste0(in_measure, "_med_", disease_short_names$sname[d])
low <- paste0(in_measure, "_lower95_", disease_short_names$sname[d])
upper <- paste0(in_measure, "_upper95_", disease_short_names$sname[d])
data <- gbd_city_region_data[[i]]
dataframe_list[[index]] <- dplyr::select(data, population_number, cityregion, sex_age_cat, med, low, upper)
dataframe_list[[index]]$est <- dataframe_list[[index]][[med]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$lower <- dataframe_list[[index]][[low]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$upper <- dataframe_list[[index]][[upper]]/dataframe_list[[index]][[1]]
dataframe_list[[index]]$index <- paste(in_measure, disease_short_names$sname[d], sep = "_")
dataframe_list[[index]]$indexagg <- paste(dataframe_list[[index]]$index, dataframe_list[[index]]$sex_age_cat,
dataframe_list[[index]]$cityregion, sep = "_")
suppressWarnings(names(dataframe_list)[index] <- paste(gbd_city_region_data[[i]]$cityregion,in_measure, disease_short_names$sname[d], sep = '_'))
index <- index + 1
}}}}
### Run for each element of the list (time consuming, also RunLoc. Check virtual machine with Ian Thomas)
#### Add localities to the name
disbayes_inputs_beta <- lapply(dataframe_list, ci2numDF)
disbayes_input_beta_agg <- plyr::ldply(disbayes_inputs_beta, rbind) %>% group_by(indexagg)
disbayes_input_beta_agg[,c(3)]=trimws(disbayes_input_beta_agg[,c(3)])
View(disbayes_input_beta_agg)
View(disbayes_input_beta_agg)
head(disbayes_input_beta_ag)
disbayes_input_beta_agg <- plyr::ldply(disbayes_inputs_beta, rbind) %>% group_by(indexagg)
View(disbayes_input_beta_agg)
disbayes_input_beta_agg_1 <- disbayes_input_beta_agg[ -c(1) ] %>% summarise_all(funs(sum))
disbayes_input_beta_agg_1 <- disbayes_input_beta_agg[ -c(1) ] %>% summarise_all(funs(sum))
View(disbayes_input_beta_agg)
gsubDataFrame <- function(pattern, replacement, x, ...) {
stopifnot(is.data.frame(x))
for(i in seq_len(ncol(x))) {
if (is.character(x[[i]])) {
x[[i]] <- gsub(pattern, replacement, x[[i]], ...)
} else if (is.factor(x[[i]])) {
levels(x[[i]]) <- gsub(pattern, replacement, levels(x[[i]]), ...)
} # else do nothing for numeric or other column types
}
x
}
str(gsubDataFrame(" ", "", disbayes_input_beta_agg_1 ))
View(disbayes_input_beta_agg_1)
View(disbayes_input_beta_agg_1)
disbayes_input_beta_agg <- plyr::ldply(disbayes_inputs_beta, rbind) %>% group_by(indexagg)
disbayes_input_beta_agg_1 <- disbayes_input_beta_agg[ -c(1) ] %>% summarise_all(funs(sum))
str(gsubDataFrame(" ", "", disbayes_input_beta_agg_1 ))
disbayes_input_beta_agg <- plyr::ldply(disbayes_inputs_beta, rbind) %>% group_by(indexagg)
disbayes_input_beta_agg_1 <- disbayes_input_beta_agg[ -c(1) ] %>% summarise_all(funs(sum))
disbayes_input_beta_agg_1 <- str(gsubDataFrame(" ", "", disbayes_input_beta_agg_1 ))
disbayes_input_beta_agg <- plyr::ldply(disbayes_inputs_beta, rbind) %>% group_by(indexagg)
disbayes_input_beta_agg_1 <- disbayes_input_beta_agg[ -c(1) ] %>% summarise_all(funs(sum))
disbayes_input_beta_agg_1 <- str(gsubDataFrame(" ", "", disbayes_input_beta_agg_1 ))
disbayes_input_beta_agg_2 <- str(gsubDataFrame(" ", "", disbayes_input_beta_agg_1))
disbayes_input_beta_agg_1 <- disbayes_input_beta_agg[ -c(1) ] %>% summarise_all(funs(sum))
disbayes_input_beta_agg_2 <- str(gsubDataFrame(" ", "", disbayes_input_beta_agg_1))
disbayes_input_beta_agg_2 <- str(gsubDataFrame(" ", "", disbayes_input_beta_agg_2))
disbayes_input_beta_agg_1 <- disbayes_input_beta_agg[ -c(1) ] %>% summarise_all(funs(sum)) %>%
str(gsubDataFrame(" ", "", disbayes_input_beta_agg_1))
disbayes_input_beta_agg_1 <- disbayes_input_beta_agg[ -c(1) ] %>% summarise_all(funs(sum))
