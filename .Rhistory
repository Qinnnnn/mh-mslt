data_extracted <- select(data_extracted,-contains("id"))
data_extracted$cause <- tolower(data_extracted$cause)
data_extracted <- left_join(local_goverment_areas, data_extracted, by = "location")
# ---- chunk-1.4: Sort data per local goverment area ----
## We first derive population and cases numbers (e.g. all cause mortality) for each locality and then aggregate at the City Region level.
city_regions_list_loc <- split(data_extracted , f = data_extracted$cityregion)
city_regions_list <- split(data_extracted , f = data_extracted$cityregion)
city_regions_list_loc <- list()
for (i in 1:length(city_regions_list)){
city_regions_list_loc[[i]] <- split(city_regions_list[[i]], f = city_regions_list[[i]]$location)
}
### This code takes about 2hs hours to run
### some help to make it more efficient.
index <- 1
gbd_loc_data_processed <- list()
for (i in 1:length(city_regions_list_loc)) {
gbd_loc_data_processed[[index]] <- lapply(city_regions_list_loc[[i]], RunLocDf)
index <- index + 1
}
### Delete null data frames within lists
gbd_loc_data_processed <-  list.clean(gbd_loc_data_processed, fun = is.null, recursive = TRUE)
# ---- chunk-1.5: Create data frame for city region with all localities ----
#### Input for Ci2Num dataframe
index <- 1
gbd_city_region_data <- list()
for (i in 1:length(gbd_loc_data_processed)){
gbd_city_region_data[[index]] <- bind_rows(gbd_loc_data_processed[[i]])
## Drop number columns (CHECK WHAT THIS IS DOING)
#
#    gbd_city_region_data[[index]] <- gbd_city_region_data[[index]][ -c(1) ]
## Clean dataframes per city regions
gbd_city_region_data[[index]] <- dplyr::select(gbd_city_region_data[[index]], -contains('rate')) %>% mutate_if(is.factor, as.character)
gbd_city_region_data[[index]]$sex_age_cat <- paste(gbd_city_region_data[[index]]$sex, gbd_city_region_data[[index]]$age, sep = "_")
gbd_city_region_data[[index]] <- select(gbd_city_region_data[[index]], -c(age, sex))
### Add city region name here
suppressWarnings(names(gbd_city_region_data)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
gbd_city_region_data[[index]]$cityregion <- names(gbd_city_region_data)[index]
index <- index + 1
}
#### What follows are additional steps to generate data for GenInputDisbayes
### BElen check why you are doing this step
gbd_city_region_data_2 <- list()
for (i in 1:length(gbd_city_region_data)) {
gbd_city_region_data_2[[i]] <- gbd_city_region_data[[i]]
#[ -c(1,3) ]
}
### This is the input for GenInputDisbayes
gbd_city_region_data_agg <- list()
index <- 1
### Loop to generate aggregated data
for (i in 1:length(gbd_city_region_data_2)) {
gbd_city_region_data_agg[[index]] <- gbd_city_region_data_2[[i]] %>%
group_by(sex_age_cat) %>%
summarise_all(funs(if(is.numeric(.)) sum(., na.rm = TRUE) else first(.)))%>%
separate(sex_age_cat, c("sex", "age"), "_")
## Add numberical age categories
gbd_city_region_data_agg[[index]]$age_cat <- 0
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="Under 5"] <- 2
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="5 to 9"] <- 7
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="10 to 14"] <- 12
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="15 to 19"] <- 17
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="20 to 24"] <- 22
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="25 to 29"] <- 27
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="30 to 34"] <- 32
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="35 to 39"] <- 37
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="40 to 44"] <- 42
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="45 to 49"] <- 47
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="50 to 54"] <- 52
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="55 to 59"] <- 57
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="60 to 64"] <- 62
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="65 to 69"] <- 67
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="70 to 74"] <- 72
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="75 to 79"] <- 77
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="80 to 84"] <- 82
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="85 to 89"] <- 87
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="90 to 94"] <- 92
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="95 plus"] <- 97
## Change sex variable to lower case
gbd_city_region_data_agg[[index]]$sex <- tolower(gbd_city_region_data_agg[[index]]$sex)
## Create age_sex category
gbd_city_region_data_agg[[index]]$sex_age_cat <- paste(gbd_city_region_data_agg[[index]]$sex,gbd_city_region_data_agg[[index]]$age_cat, sep = "_"  )
## Order data
gbd_city_region_data_agg[[index]] <- gbd_city_region_data_agg[[index]][order(gbd_city_region_data_agg[[index]]$sex, gbd_city_region_data_agg[[index]]$age_cat),]
suppressWarnings(names(gbd_city_region_data_agg)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
### Calculate rates per one. Needed for mslt_code (exclude major depresive disorders (no deaths) and hyoertensive heart disease (no incidence))
for (d in 1:nrow(DISEASE_SHORT_NAMES)){
for (dm in 1:length(disease_measures_list)){
# dn <- DISEASE_SHORT_NAMES$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character() %>% tolower
if (DISEASE_SHORT_NAMES$is_not_dis[d] == 3){
}
else{
var_rate <- c(paste(tolower(paste(dmeasure, "rate", DISEASE_SHORT_NAMES$sname[d], sep = "_"))))
var_med <- c(paste(tolower(paste(dmeasure, "med", DISEASE_SHORT_NAMES$sname[d], sep = "_"))))
gbd_city_region_data_agg[[index]][[var_rate]] <- gbd_city_region_data_agg[[index]][[var_med]] /
gbd_city_region_data_agg[[index]]$population_number
}
}
}
index <- index + 1
}
# ---- chunk-1.6: Disbayes input generation ----
### The generations of inputs has two main sections and needs the above code to be ran first.
### Sections main functions: GenInputDisbayes (generates inc, mort, prev rates per one and prevdenom, remission is set to 0) and Ci2NumDF which generates
### num and denom for each of the localities for incidence, prevalence and mortality (later code sums localities into city regions)
### parameters
i_sex <- c('male', 'female')
# ---- chunk-1.6.1: GenInputDisbayes ----
### GenInputsDIsbayes: generates a data frame per city regions (and regions of England and countries in the UK) expanding 5-year estimates and values into
### one year intervals assuming that 5-yr age population is evenly distributed for each 1-yr within the interval and rates of dieseses are the same within the year
### interval.
index <- 1
disbayes_input_list_city_regions <- list()
for (i in 1:length(gbd_city_region_data_agg)) {
disbayes_input_list_city_regions[[index]] <- GenInpDisbayes(gbd_city_region_data_agg[[i]])
names(disbayes_input_list_city_regions)[index] <- paste0(names(gbd_city_region_data_agg[i]))
index <- index + 1
}
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])) {
disbayes_input_list_city_regions[[i]][[j]]$cityregion <- paste(names(disbayes_input_list_city_regions[i]))
}
}
disbayes_input_list_city_regions_2 <- list()
index <- 1
for (i in 1:length(gbd_city_region_data)) {
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(DISEASE_SHORT_NAMES)){
in_measure <- disease_measures_list[dm] %>% as.character() %>% tolower()
### exclude ylds for now, we are interested in disbayes inputs but later may use ylds uncertainty parameters
if (DISEASE_SHORT_NAMES$is_not_dis[d] != 0 || in_measure == "ylds (years lived with disability)"){
}
else {
med <- paste0(in_measure, "_med_", DISEASE_SHORT_NAMES$sname[d])
low <- paste0(in_measure, "_lower95_", DISEASE_SHORT_NAMES$sname[d])
upper <- paste0(in_measure, "_upper95_", DISEASE_SHORT_NAMES$sname[d])
## These data is in 5-year age groups.
data <- gbd_city_region_data[[i]]
disbayes_input_list_city_regions_2[[index]] <- dplyr::select(data, population_number, cityregion, location, sex_age_cat, med, low, upper)
##### CHRIS, ARE THE FOLLOWING CORRECT? POINT ESTIMATES AND CREDIBLE LIMITS AS RATES PER ONE?
disbayes_input_list_city_regions_2[[index]]$est <- disbayes_input_list_city_regions_2[[index]][[med]]/disbayes_input_list_city_regions_2[[index]][[1]]
disbayes_input_list_city_regions_2[[index]]$lower <- disbayes_input_list_city_regions_2[[index]][[low]]/disbayes_input_list_city_regions_2[[index]][[1]]
disbayes_input_list_city_regions_2[[index]]$upper <- disbayes_input_list_city_regions_2[[index]][[upper]]/disbayes_input_list_city_regions_2[[index]][[1]]
disbayes_input_list_city_regions_2[[index]]$index <- paste(in_measure, DISEASE_SHORT_NAMES$sname[d], sep = "_")
disbayes_input_list_city_regions_2[[index]]$indexagg <- paste(disbayes_input_list_city_regions_2[[index]]$index, disbayes_input_list_city_regions_2[[index]]$sex_age_cat,
disbayes_input_list_city_regions_2[[index]]$cityregion, sep = "_")
## Separate age and sex and
suppressWarnings(names(disbayes_input_list_city_regions_2)[index] <- paste(gbd_city_region_data[[i]]$cityregion,in_measure, DISEASE_SHORT_NAMES$sname[d], sep = '_'))
index <- index + 1
}
}
}
}
test <- Ci2NumDF(disbayes_input_list_city_regions_2[[1]])
disbayes:::ci2num(disbayes_input_list_city_regions_2[[1]]$deaths_med_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_upper95_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_lower95_espc/disbayes_input_list_city_regions_2[[1]]$population_number )
disbayes:::ci2num(disbayes_input_list_city_regions_2[[1]]$deaths_med_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_lower95_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_upper95_espc/disbayes_input_list_city_regions_2[[1]]$population_number )
disbayes:::ci2num(disbayes_input_list_city_regions_2[[1]]$deaths_med_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_lower95_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_upper95_espc/disbayes_input_list_city_regions_2[[1]]$population_number)
disbayes:::ci2num(disbayes_input_list_city_regions_2[[1]]$deaths_med_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_lower95_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_upper95_espc/disbayes_input_list_city_regions_2[[1]]$population_number)
disbayes:::ci2num(disbayes_input_list_city_regions_2[[1]]$est, disbayes_input_list_city_regions_2[[1]]$lower, disbayes_input_list_city_regions_2[[1]]$upper)
View(test)
Ci2NumDF <- function(in_data) {
dataframe <- dplyr::select(in_data, population_number, est, lower, upper, sex_age_cat, cityregion, indexagg)  %>%
dplyr::select(a=population_number,b= est,c= lower,d=upper, e= sex_age_cat, f=cityregion, h=indexagg) %>%
rowwise() %>%
# browser()
# mutate(num=ifelse(b==0,0,disbayes:::ci2num(b/a,c/a,d/a)[[1]])) %>%
# mutate(denom=ifelse(b==0,0,disbayes:::ci2num(b/a,c/a,d/a)[[2]])) %>%
mutate(num=ifelse(b==0,0,disbayes:::ci2num(b,c,d)[[1]])) %>%
mutate(denom=ifelse(b==0,0,disbayes:::ci2num(b,c,d)[[2]])) %>%
mutate(population_number = a) %>%
mutate(sex_age_cat = e) %>%
mutate(cityregion = f) %>%
mutate(indexagg = h) %>%
dplyr::select(population_number, indexagg, num, denom, est, lower, upper) %>%
as.data.frame()
}
test <- Ci2NumDF(disbayes_input_list_city_regions_2[[1]])
Ci2NumDF <- function(in_data) {
dataframe <- dplyr::select(in_data, population_number, est, lower, upper, sex_age_cat, cityregion, indexagg)  %>%
#
# dplyr::select(a=population_number,b= est,c= lower,d=upper, e= sex_age_cat, f=cityregion, h=indexagg) %>%
rowwise() %>%
# browser()
# mutate(num=ifelse(b==0,0,disbayes:::ci2num(b/a,c/a,d/a)[[1]])) %>%
# mutate(denom=ifelse(b==0,0,disbayes:::ci2num(b/a,c/a,d/a)[[2]])) %>%
mutate(num=ifelse(est==0,0,disbayes:::ci2num(est,lower, upper)[[1]])) %>%
mutate(denom=ifelse(est==0,0,disbayes:::ci2num(est,lower, upper)[[2]])) %>%
#
# mutate(population_number = a) %>%
# mutate(sex_age_cat = e) %>%
# mutate(cityregion = f) %>%
# mutate(indexagg = h) %>%
dplyr::select(population_number, indexagg, num, denom, est, lower, upper) %>%
as.data.frame()
}
test <- Ci2NumDF(disbayes_input_list_city_regions_2[[1]])
View(disbayes_input_list_city_regions_2)
source('C:/Metahit/mh-mslt/code/dataprep.R')
---
title: "Preparing data from the Global Burden of Disease for multi-state data frame"
author: "Belen Zapata-Diomedi"
date: "01/07/2020"
output: html_document
code_folding: show
params:
date:   !r Sys.Date() - 1
---
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
### Belen: how to use ~ to make it reproducible??
# relative_path_gbd <- "~/scratch/chronic"
# relative_path_execute <- "~/scratch/chronic/mh-execute"
relative_path_execute <- 'C:/Metahit/mh-execute'
relative_path_gbd <- 'C:/Metahit/mh-mslt/data/gbd/GBD2017/METAHIT/'
names_non_cr <- c("United Kingdom", "England", "East Midlands", "East of England", "Greater London", "North East England",
'North West England', "South East England", "South West England", "West Midlands", "Yorkshire and the Humber",
"Northern Ireland", "Scotland", "Wales")
local_government_areas <- read_csv(file.path(relative_path_execute, "inputs/mh_regions_lad_lookup.csv"))
for (i in names_non_cr){
local_government_areas <- rbind(local_government_areas, rep(i, ncol(local_government_areas)))
}
local_government_areas  <- local_government_areas %>%
dplyr::filter(!is.na(cityregion)) %>%
dplyr::rename(location = lad11nm) %>%
dplyr::mutate(location = gsub('St. Helens', 'St Helens', location))
gbd1 <- read_csv(file.path(relative_path_gbd, "IHME-GBD_2017_DATA-3e0b192d-1.csv"))
gbd2 <- read_csv(file.path(relative_path_gbd, "IHME-GBD_2017_DATA-3e0b192d-2.csv"))
gbd3 <- read_csv(file.path(relative_path_gbd, "IHME-GBD_2017_DATA-3e0b192d-3.csv"))
gbd4 <- read_csv(file.path(relative_path_gbd, "IHME-GBD_2017_DATA-3e0b192d-4.csv"))
gbd5 <- read_csv(file.path(relative_path_gbd, "IHME-GBD_2017_DATA-3e0b192d-5.csv"))
gbd <- rbind(gbd1, gbd2, gbd3, gbd4, gbd5) %>%
dplyr::filter(location_name %in% local_government_areas$location)
rm(gbd1, gbd2, gbd3, gbd4, gbd5)
names_non_cr <- c("United Kingdom", "England", "East Midlands", "East of England", "Greater London", "North East England",
'North West England', "South East England", "South West England", "West Midlands", "Yorkshire and the Humber",
"Northern Ireland", "Scotland", "Wales")
local_government_areas <- read_csv(file.path(relative_path_execute, "inputs/mh_regions_lad_lookup.csv"))
for (i in names_non_cr){
local_government_areas <- rbind(local_government_areas, rep(i, ncol(local_government_areas)))
}
local_government_areas  <- local_government_areas %>%
dplyr::filter(!is.na(cityregion)) %>%
dplyr::rename(location = lad11nm) %>%
dplyr::mutate(location = gsub('St. Helens', 'St Helens', location))
disease_names_execute <- read_csv(file.path(relative_path_execute, "inputs/dose_response/disease_outcomes_lookup.csv")) %>%
select(GBD_name, acronym) %>%
mutate(disease = tolower(GBD_name))
DISEASE_SHORT_NAMES <- data.frame(disease = tolower(as.character(unique(gbd$cause_name))),
sname = tolower(abbreviate(unique(gbd$cause_name, max = 2))),
stringsAsFactors = F) %>%
dplyr::mutate(is_not_dis = ifelse((str_detect(disease, "injuries") |
str_detect(disease, "All causes") |
str_detect(disease, "Lower respiratory infections")),
1, 0) ) %>%
dplyr::mutate(is_not_dis = case_when(sname == "allc"  ~  2,
sname == "lwri"  ~  1,
## Code for major depressive disorder (no deaths) and hypertensive heart disease (no incidence)
sname == "hyhd"  ~  3,
sname == "mjdd"  ~  3,
TRUE  ~  is_not_dis)) %>%
left_join(disease_names_execute, by="disease") %>%
dplyr::mutate(acronym = ifelse(str_detect(disease, "injuries"), disease, acronym),
acronym = word(acronym, 1),
males = ifelse(disease %in% c("uterine cancer", "breast cancer"), 0, 1),
females = ifelse(disease %in% "prostate cancer", 0, 1),
sname = gsub("'", '', sname),
acronym = ifelse(is.na(acronym), "no_pif", acronym))
saveRDS(DISEASE_SHORT_NAMES, paste0(relative_path_gbd, "DISEASE_SHORT_NAMES.rds"))
names(gbd) <- gsub(pattern = "_name", replacement = "", x = names(gbd))
gbd <- gbd %>%
dplyr::select(-contains("id")) %>%
dplyr::mutate(cause = tolower(cause)) %>%
left_join(local_government_areas, by="location")
gbdnum <- gbd %>%
dplyr::filter(metric=="Number") %>%
dplyr::select(measure, location, sex, age, cause, Number=val)
gbdval<- gbd %>%
dplyr::filter(metric=="Rate") %>%
dplyr::select(measure, location, sex, age, cause, val) %>%
dplyr::mutate(Rate = val / 100000)
gbdpop <- gbdval %>%
left_join(gbdnum, by=c("measure","location","sex","age","cause")) %>%
dplyr::mutate(pop = Number / Rate)
gbdnum <- gbd %>%
dplyr::filter(metric=="Number") %>%
dplyr::select(measure, location, sex, age, cause, cityregion, Number=val)
gbdval<- gbd %>%
dplyr::filter(metric=="Rate") %>%
dplyr::select(measure, location, sex, age, cause, cityregion, val) %>%
dplyr::mutate(Rate = val / 100000)
gbdpop <- gbdval %>%
left_join(gbdnum, by=c("measure","location","sex","age","cause", "cityregion")) %>%
dplyr::mutate(pop = Number / Rate)
options(dplyr.summarise.inform = FALSE)
gbd_agg <- gbdpop %>%
dplyr::select(measure, sex, age, cause, cityregion, Number, pop)
group_by(measure, sex, age, cause, cityregion) %>%
summarise(number = sum(Number), pop = sum(pop)) %>%
ungroup
options(dplyr.summarise.inform = FALSE)
gbd_agg <-  dplyr::select(gbdpop, measure, sex, age, cause, cityregion, Number, pop)
group_by(measure, sex, age, cause, cityregion) %>%
summarise(number = sum(Number), pop = sum(pop)) %>%
ungroup
options(dplyr.summarise.inform = FALSE)
gbd_agg <-  dplyr::select(gbdpop, measure, sex, age, cause, cityregion, Number, pop) %>%
group_by(measure, sex, age, cause, cityregion) %>%
summarise(number = sum(Number), pop = sum(pop)) %>%
ungroup
test <- dplyr::filter(gbd_agg, measure = "Deaths", cause = "All causes", cityregion = "England")
test <- dplyr::filter(gbd_agg, measure == "Deaths", cause == "All causes", cityregion == "England")
unique(gbd_agg$cause)
test <- dplyr::filter(gbd_agg, measure == "Deaths", cause == "all causes", cityregion == "England")
sum(test$pop)
View(test)
gbd_agg <-  gbd_agg %>%
dplyr::mutate(rate = Num / pop)
gbd_agg <-  gbd_agg %>%
dplyr::mutate(rate = Number / pop)
gbd_agg <-  gbd_agg %>%
dplyr::mutate(rate = number / pop)
unique(gbd_agg$age)
library(tidyverse)
library(progress)
### Belen: how to use ~ to make it reproducible??
# relative_path_gbd <- "~/scratch/chronic"
# relative_path_execute <- "~/scratch/chronic/mh-execute"
relative_path_execute <- 'C:/Metahit/mh-execute'
relative_path_gbd <- 'C:/Metahit/mh-mslt/data/gbd/GBD2017/METAHIT/'
gbd_agg <- gbd_agg %>%
extract(age, c("from_age", "to_age"), "(.+) to (.+)", remove=FALSE, convert=TRUE) %>%
dplyr::mutate(from_age = case_when(age=="95 plus"  ~  95L,
age=="Under 5"  ~  0L,
TRUE  ~  from_age),
to_age = case_when(age=="95 plus"  ~  99L,
age=="Under 5"  ~  4L,
TRUE  ~  to_age),
agediff = to_age - from_age + 1,  # this will equal 5
num1yr = round(num/agediff),
denom1yr = round(denom/agediff)) %>%
rename(agegroup = age)
gbd_agg <- gbd_agg %>%
extract(age, c("from_age", "to_age"), "(.+) to (.+)", remove=FALSE, convert=TRUE) %>%
dplyr::mutate(from_age = case_when(age=="95 plus"  ~  95L,
age=="Under 5"  ~  0L,
TRUE  ~  from_age),
to_age = case_when(age=="95 plus"  ~  99L,
age=="Under 5"  ~  4L,
TRUE  ~  to_age),
agediff = to_age - from_age + 1,  # this will equal 5
num1yr = round(number/agediff) %>%
rename(agegroup = age)
gbd_agg <- gbd_agg %>%
extract(age, c("from_age", "to_age"), "(.+) to (.+)", remove=FALSE, convert=TRUE) %>%
dplyr::mutate(from_age = case_when(age=="95 plus"  ~  95L,
age=="Under 5"  ~  0L,
TRUE  ~  from_age),
to_age = case_when(age=="95 plus"  ~  99L,
age=="Under 5"  ~  4L,
TRUE  ~  to_age),
agediff = to_age - from_age + 1,  # this will equal 5
num1yr = round(number/agediff) %>%
rename(agegroup = age)
gbd_agg <- gbd_agg %>%
extract(age, c("from_age", "to_age"), "(.+) to (.+)", remove=FALSE, convert=TRUE) %>%
dplyr::mutate(from_age = case_when(age=="95 plus"  ~  95L,
age=="Under 5"  ~  0L,
TRUE  ~  from_age),
to_age = case_when(age=="95 plus"  ~  99L,
age=="Under 5"  ~  4L,
TRUE  ~  to_age) %>%
# agediff = to_age - from_age + 1,  # this will equal 5
# num1yr = round(number/agediff) %>%
rename(agegroup = age)
gbd_agg <- gbd_agg %>%
extract(age, c("from_age", "to_age"), "(.+) to (.+)", remove=FALSE, convert=TRUE) %>%
dplyr::mutate(from_age = case_when(age=="95 plus"  ~  95L,
age=="Under 5"  ~  0L,
TRUE  ~  from_age),
to_age = case_when(age=="95 plus"  ~  99L,
age=="Under 5"  ~  4L,
#                           TRUE  ~  to_age) %>%
#        # agediff = to_age - from_age + 1,  # this will equal 5
#        # num1yr = round(number/agediff) %>%
# rename(agegroup = age)
gbd_agg <- gbd_agg %>%
extract(age, c("from_age", "to_age"), "(.+) to (.+)", remove=FALSE, convert=TRUE) %>%
dplyr::mutate(from_age = case_when(age=="95 plus"  ~  95L,
age=="Under 5"  ~  0L,
TRUE  ~  from_age),
to_age = case_when(age=="95 plus"  ~  99L,
age=="Under 5"  ~  4L,
TRUE  ~  to_age)
#        # agediff = to_age - from_age + 1,  # this will equal 5
#        # num1yr = round(number/agediff) %>%
# rename(agegroup = age)
rlang::last_error()
gbd_agg <- gbd_agg %>%
extract(age, c("from_age", "to_age"), "(.+) to (.+)", remove=FALSE, convert=TRUE) %>%
dplyr::mutate(from_age = case_when(age ="95 plus"  ~  95L,
age ="Under 5"  ~  0L,
TRUE  ~  from_age),
to_age = case_when(age ="95 plus"  ~  99L,
age ="Under 5"  ~  4L,
TRUE  ~  to_age)
#        # agediff = to_age - from_age + 1,  # this will equal 5
#        # num1yr = round(number/agediff) %>%
# rename(agegroup = age)
gbd_agg <- gbd_agg %>%
extract(age, c("from_age", "to_age"), "(.+) to (.+)", remove=FALSE, convert=TRUE) %>%
dplyr::mutate(from_age = case_when(age =="95 plus"  ~  95L,
age =="Under 5"  ~  0L,
TRUE  ~  from_age),
to_age = case_when(age == "95 plus"  ~  99L,
age == "Under 5"  ~  4L,
TRUE  ~  to_age)
#        # agediff = to_age - from_age + 1,  # this will equal 5
#        # num1yr = round(number/agediff) %>%
# rename(agegroup = age)
rlang::last_error()
gbd_agg <- gbd_agg %>%
extract(age, c("from_age", "to_age"), "(.+) to (.+)", remove=FALSE, convert=TRUE) %>%
dplyr::mutate(from_age = case_when(age =="95 plus"  ~  95L,
age =="Under 5"  ~  0L,
TRUE  ~  from_age),
to_age = case_when(age == "95 plus"  ~  99L,
age == "Under 5"  ~  4L,
TRUE  ~  to_age)
#        # agediff = to_age - from_age + 1,  # this will equal 5
#        # num1yr = round(number/agediff) %>%
# rename(agegroup = age)
gbd_agg <- gbd_agg %>%
extract(age, c("from_age", "to_age"), "(.+) to (.+)", remove=FALSE, convert=TRUE) %>%
dplyr::mutate(from_age = case_when(age =="95 plus"  ~  95L,
age =="Under 5"  ~  0L,
TRUE  ~  from_age),
to_age = case_when(age == "95 plus"  ~  99L,
age == "Under 5"  ~  4L,
TRUE  ~  to_age))
#        # agediff = to_age - from_age + 1,  # this will equal 5
#        # num1yr = round(number/agediff) %>%
# rename(agegroup = age)
gbd_agg <- gbd_agg %>%
extract(age, c("from_age", "to_age"), "(.+) to (.+)", remove=FALSE, convert=TRUE) %>%
dplyr::mutate(from_age = case_when(age =="95 plus"  ~  95L,
age =="Under 5"  ~  0L,
TRUE  ~  from_age),
to_age = case_when(age == "95 plus"  ~  99L,
age == "Under 5"  ~  4L,
TRUE  ~  to_age)) %>%
dplyr::mutate(age_cat = from_age + 2)
#        # agediff = to_age - from_age + 1,  # this will equal 5
#        # num1yr = round(number/agediff) %>%
# rename(agegroup = age)
unique(gbd_agg$age_cat)
gbd_agg_wider <- gbd_agg_wider %>%
pivot_wider(id_cols = c(measure, sex, age, cause, cityregion, number, pop, rate, age_cat),
names_from = c(measure, cause), values_from = c(rate, number))
gbd_agg_wider <- gbd_agg %>%
pivot_wider(id_cols = c(measure, sex, age, cause, cityregion, number, pop, rate, age_cat),
names_from = c(measure, cause), values_from = c(rate, number))
View(gbd_agg)
View(gbd_agg_wider)
gbd_agg_wider <- gbd_agg %>%
pivot_wider(id_cols = c(measure, sex, age, cause, cityregion, number, pop, rate, age_cat),
names_from = c(measure), values_from = c(rate, number))
gbd_agg_wider <- gbd_agg %>%
dplyr::mutate(disease = tolower(abbreviate(cause, max = 2))))
gbd_agg_wider <- gbd_agg %>%
dplyr::mutate(disease = tolower(abbreviate(cause, max = 2)))
gbd_agg_wider <- gbd_agg %>%
dplyr::mutate(disease = tolower(abbreviate(cause)))
# pivot_wider(id_cols = c(measure, sex, age, cause, cityregion, number, pop, rate, age_cat),
names_from = c(measure), values_from = c(rate, number))
gbd_agg_wider <- gbd_agg %>%
dplyr::mutate(disease = tolower(abbreviate(cause)))
# pivot_wider(id_cols = c(measure, sex, age, cause, cityregion, number, pop, rate, age_cat),
# names_from = c(measure), values_from = c(rate, number))
unique(gbd_agg_wider$disease)
gbd_agg_wider <- gbd_agg %>%
dplyr::mutate(disease = tolower(abbreviate(cause))) %>%
pivot_wider(id_cols = c(measure, sex, age, disease, cityregion, number, pop, rate, age_cat),
names_from = c(measure, disease), values_from = c(rate, number))
test2 <- dplyr::filter(gbd_agg_wider, cityregion = "bristol")
test2 <- dplyr::filter(gbd_agg_wider, cityregion == "bristol")
View(test2)
library(tidyverse)
library(tidyr)
### Belen: how to use ~ to make it reproducible??
# relative_path_gbd <- "~/scratch/chronic"
# relative_path_execute <- "~/scratch/chronic/mh-execute"
relative_path_execute <- 'C:/Metahit/mh-execute'
relative_path_gbd <- 'C:/Metahit/mh-mslt/data/gbd/GBD2017/METAHIT/'
gbd_agg_wider <- gbd_agg %>%
dplyr::mutate(disease = tolower(abbreviate(cause))) %>%
dplyr::mutate(age_sex = paste0(age, sex)) %>%
group_by(age_sex) %>%
pivot_wider(id_cols = c(measure, sex, age, disease, cityregion, number, pop, rate, age_cat),
names_from = c(measure, disease), values_from = c(rate, number))
names(gbd_agg_wider)
gbd_agg_wider <- gbd_agg %>%
dplyr::mutate(disease = tolower(abbreviate(cause))) %>%
dplyr::mutate(age_sex = paste0(age, sex))
# group_by(age_sex) %>%
# pivot_wider(id_cols = c(measure, sex, age, disease, cityregion, number, pop, rate, age_cat),
#           names_from = c(measure, disease), values_from = c(rate, number))
gbd_agg_wider <- gbd_agg %>%
dplyr::mutate(disease = tolower(abbreviate(cause))) %>%
dplyr::mutate(age_sex = paste0(age, sex)) %>%
group_by(age_sex) %>%
pivot_wider(id_cols = c(measure, sex, age, disease, cityregion, number, pop, rate, age_cat, age_sex),
names_from = c(measure, disease), values_from = c(rate, number))
