## Extract Summary statistics
## Add directly to dibayes input list, first 100 observations? Check with Chris
disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
## add disease names
disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
## add sex
disbayes_output_list[[index]]$sex <- sex_index
## create sex and disease category to then join to input for disease life table dataset
disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
return(disbayes_output_list)
}
test_list_output <- GenOutDisbayes(data)
conflict_prefer("fisher.test", "stats")
GenOutDisbayes <- function(i_data) {
disbayes_output_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
data <- i_data
# disbayes_input_list[[index]]
if (disease_short_names$is_not_dis[d] == 0){
datstan <- c(as.list(data), nage=nrow(data))
inits <- list(
list(cf=rep(0.0101, datstan$nage)),
list(cf=rep(0.0201, datstan$nage)),
list(cf=rep(0.0056, datstan$nage)),
list(cf=rep(0.0071, datstan$nage))
)
gbdcf <- stan("disbayes-master/gbdcf-unsmoothed.stan", data=datstan, init=inits)
## Extract Summary statistics
## Add directly to dibayes input list, first 100 observations? Check with Chris
disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
## add disease names
disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
## add sex
disbayes_output_list[[index]]$sex <- sex_index
## create sex and disease category to then join to input for disease life table dataset
disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
return(disbayes_output_list)
}
test_list_output <- GenOutDisbayes(data)
GenOutDisbayes <- function(i_data) {
disbayes_output_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
data <- i_data
# disbayes_input_list[[index]]
if (disease_short_names$is_not_dis[d] == 0){
datstan <- c(as.list(data), nage=nrow(data))
inits <- list(
list(cf=rep(0.0101, datstan$nage)),
list(cf=rep(0.0201, datstan$nage)),
list(cf=rep(0.0056, datstan$nage)),
list(cf=rep(0.0071, datstan$nage))
)
gbdcf <- stan("disbayes-master/gbdcf-unsmoothed.stan", data=datstan, init=inits)
## Extract Summary statistics
## Add directly to dibayes input list, first 100 observations? Check with Chris
disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
## add disease names
disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
## add sex
disbayes_output_list[[index]]$sex <- sex_index
## create sex and disease category to then join to input for disease life table dataset
disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
return(disbayes_output_list)
}
test_list_output <- GenOutDisbayes(data)
conflict_prefer("group_rows", "dplyr")
GenOutDisbayes <- function(i_data) {
disbayes_output_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
data <- i_data
# disbayes_input_list[[index]]
if (disease_short_names$is_not_dis[d] == 0){
datstan <- c(as.list(data), nage=nrow(data))
inits <- list(
list(cf=rep(0.0101, datstan$nage)),
list(cf=rep(0.0201, datstan$nage)),
list(cf=rep(0.0056, datstan$nage)),
list(cf=rep(0.0071, datstan$nage))
)
gbdcf <- stan("disbayes-master/gbdcf-unsmoothed.stan", data=datstan, init=inits)
## Extract Summary statistics
## Add directly to dibayes input list, first 100 observations? Check with Chris
disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
## add disease names
disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
## add sex
disbayes_output_list[[index]]$sex <- sex_index
## create sex and disease category to then join to input for disease life table dataset
disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
return(disbayes_output_list)
}
test_list_output <- GenOutDisbayes(data)
conflict_prefer("lag", "stats")
GenOutDisbayes <- function(i_data) {
disbayes_output_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
data <- i_data
# disbayes_input_list[[index]]
if (disease_short_names$is_not_dis[d] == 0){
datstan <- c(as.list(data), nage=nrow(data))
inits <- list(
list(cf=rep(0.0101, datstan$nage)),
list(cf=rep(0.0201, datstan$nage)),
list(cf=rep(0.0056, datstan$nage)),
list(cf=rep(0.0071, datstan$nage))
)
gbdcf <- stan("disbayes-master/gbdcf-unsmoothed.stan", data=datstan, init=inits)
## Extract Summary statistics
## Add directly to dibayes input list, first 100 observations? Check with Chris
disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
## add disease names
disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
## add sex
disbayes_output_list[[index]]$sex <- sex_index
## create sex and disease category to then join to input for disease life table dataset
disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
return(disbayes_output_list)
}
test_list_output <- GenOutDisbayes(data)
conflict_prefer("Position", "ggplot2")
GenOutDisbayes <- function(i_data) {
disbayes_output_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
data <- i_data
# disbayes_input_list[[index]]
if (disease_short_names$is_not_dis[d] == 0){
datstan <- c(as.list(data), nage=nrow(data))
inits <- list(
list(cf=rep(0.0101, datstan$nage)),
list(cf=rep(0.0201, datstan$nage)),
list(cf=rep(0.0056, datstan$nage)),
list(cf=rep(0.0071, datstan$nage))
)
gbdcf <- stan("disbayes-master/gbdcf-unsmoothed.stan", data=datstan, init=inits)
## Extract Summary statistics
## Add directly to dibayes input list, first 100 observations? Check with Chris
disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
## add disease names
disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
## add sex
disbayes_output_list[[index]]$sex <- sex_index
## create sex and disease category to then join to input for disease life table dataset
disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
return(disbayes_output_list)
}
test_list_output <- GenOutDisbayes(data)
GenOutDisbayes <- function(i_data) {
disbayes_output_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
data <- i_data
# disbayes_input_list[[index]]
if (disease_short_names$is_not_dis[d] == 0){
datstan <- c(as.list(data), nage=nrow(data))
inits <- list(
list(cf=rep(0.0101, datstan$nage)),
list(cf=rep(0.0201, datstan$nage)),
list(cf=rep(0.0056, datstan$nage)),
list(cf=rep(0.0071, datstan$nage))
)
gbdcf <- stan("disbayes-master/gbdcf-unsmoothed.stan", data=datstan, init=inits)
## Extract Summary statistics
## Add directly to dibayes input list, first 100 observations? Check with Chris
disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
## add disease names
disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
## add sex
disbayes_output_list[[index]]$sex <- sex_index
## create sex and disease category to then join to input for disease life table dataset
disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
return(disbayes_output_list)
}
index <- 1
disbayes_output_list_city_regions <- list()
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])){
disbayes_input_list_city_regions[[index]] <- GenOutDisbayes(disbayes_input_list_city_regions[[i]][[j]])
names(disbayes_input_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
index <- index + 1
}
}
GenOutDisbayes <- function(i_data) {
disbayes_output_list <- list()
index_f <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
data <- i_data
# disbayes_input_list[[index]]
if (disease_short_names$is_not_dis[d] == 0){
datstan <- c(as.list(data), nage=nrow(data))
inits <- list(
list(cf=rep(0.0101, datstan$nage)),
list(cf=rep(0.0201, datstan$nage)),
list(cf=rep(0.0056, datstan$nage)),
list(cf=rep(0.0071, datstan$nage))
)
gbdcf <- stan("disbayes-master/gbdcf-unsmoothed.stan", data=datstan, init=inits)
## Extract Summary statistics
## Add directly to dibayes input list, first 100 observations? Check with Chris
disbayes_output_list[[index_f]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
## add disease names
disbayes_output_list[[index_f]]$disease <- disease_short_names$sname[d]
## add sex
disbayes_output_list[[index_f]]$sex <- sex_index
## create sex and disease category to then join to input for disease life table dataset
disbayes_output_list[[index_f]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index_f <- index_f + 1
}
}
}
return(disbayes_output_list)
}
# test_path <-  paste0(relative_path_mslt, "disbayes-master/gbdcf-unsmoothed.stan")
#
# data <- disbayes_input_list_city_regions[[1]][[1]]
#
test_list_output <- GenOutDisbayes(data)
disbayes_input_list_city_regions[[1]] <- GenOutDisbayes(disbayes_input_list_city_regions[[1]][[1]])
index <- 1
disbayes_output_list_city_regions <- list()
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])){
## Give the indices numbers to see data
disbayes_input_list_city_regions[[1]] <- GenOutDisbayes(disbayes_input_list_city_regions[[1]][[1]])
names(disbayes_input_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
index <- index + 1
}
}
index <- 1
disbayes_output_list_city_regions <- list()
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])){
## Give the indices numbers to see data
disbayes_input_list_city_regions[[index]] <- GenOutDisbayes(disbayes_input_list_city_regions[[1]][[1]])
names(disbayes_input_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
index <- index + 1
}
}
index <- 1
disbayes_output_list_city_regions <- list()
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])){
## Give the indices numbers to see data
data <- disbayes_input_list_city_regions[[1]][[1]]
disbayes_input_list_city_regions[[index]] <- GenOutDisbayes(data)
names(disbayes_input_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
index <- index + 1
}
}
data <- disbayes_input_list_city_regions[[1]][[1]]
# test_path <-  paste0(relative_path_mslt, "disbayes-master/gbdcf-unsmoothed.stan")
#
data <- disbayes_input_list_city_regions[[1]][[1]]
index <- 1
disbayes_output_list_city_regions <- list()
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])){
## Give the indices numbers to see data
data[[index]] <- disbayes_input_list_city_regions[[1]][[1]]
disbayes_input_list_city_regions[[index]] <- GenOutDisbayes(data)
names(disbayes_input_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
index <- index + 1
}
}
GenInpDisbayes <- function(i_data) {
disbayes_input_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
if (disease_short_names$is_not_dis[d] == 0){
var_name <- paste0("rate_", disease_short_names$sname[d])
disbayes_input_list[[index]] <- dplyr::filter(i_data, sex == sex_index) %>% select(age, sex, ends_with(var_name), population_number)
## Add column to show disease
disbayes_input_list[[index]]$disease <- disease_short_names$sname[d]
## Change column names to match disbayes code
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("incidence_rate_", disease_short_names$sname[d]))] <- "inc"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("deaths_rate_", disease_short_names$sname[d]))] <- "mort"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== tolower(paste0("prevalence_rate_", disease_short_names$sname[d]))] <- "prev"
colnames(disbayes_input_list[[index]])[colnames(disbayes_input_list[[index]])== paste0("population_number")] <- "pop"
## We assume remission is 0
disbayes_input_list[[index]]$rem <- as.integer(0)
## create denominator for disbayes code
disbayes_input_list[[index]]$prevdenom <- c(100,100,500,500,500,500,500,500,500,500,500,500,500,500,500,500,200,200,100,100) / 10 # total sample size 3910, generous for London (from CJ)
## Added agegroups to derive age groups by 1
disbayes_input_list[[index]]$agegrp <- as.integer(seq(0,95, by=5))
## Replace 0 with small numbers for incidence, otherwise, disbayes does not work.
disbayes_input_list[[index]]$inc <- ifelse(disbayes_input_list[[index]]$inc  == 0, 1e-08, disbayes_input_list[[index]]$inc)
## Convert 5 year data file to 100 year age intervals
outage <- 0:100  # assume inc/prev/mort same in each year within a five-year age group
ind <- findInterval(outage, disbayes_input_list[[index]]$agegrp)
disbayes_input_list[[index]] <- disbayes_input_list[[index]][ind,]
disbayes_input_list[[index]]$age <- outage
disbayes_input_list[[index]] <- within(disbayes_input_list[[index]], {
ningrp <- rep(table(agegrp), table(agegrp))
# popmale <- round(popmale/ningrp) ## assume population uniform between years within age group.
pop <- round(pop/ningrp) ## assume population uniform between years within age group.
# ndieddismale <- round(popmale * (1 - exp(-mortmale)))
ndieddis <- round(pop * (1 - exp(-mort)))
# prevnmale <- round(prevdenom * prevmale)
prevn <- round(prevdenom * prev)
}
)
## add sex and disease variable to match with output data frame
disbayes_input_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <-  index +1
}
}
}
return(disbayes_input_list)
}
index <- 1
disbayes_input_list_city_regions <- list()
for (i in 1:length(gbd_city_region_data_agg)) {
disbayes_input_list_city_regions[[index]] <- GenInpDisbayes(gbd_city_region_data_agg[[i]])
names(disbayes_input_list_city_regions)[index] <- paste0(names(gbd_city_region_data_agg[i]))
index <- index + 1
}
for (i in 1:length(disbayes_input_list_city_regions)) {
city_name <- names(disbayes_input_list_city_regions[i])
for (j in 1:length(disbayes_input_list_city_regions[[i]])) {
## Add variable name to each of the diseases
disbayes_input_list_city_regions[[i]][[j]]$city_region <- city_name
temp_disease_name <- disbayes_input_list_city_regions[[i]][[j]][1,15]
print(paste0(city_name, "_",temp_disease_name))
write_rds(disbayes_input_list_city_regions[[i]][[j]],
paste0(relative_path_mslt, "data/city regions/Input disbayes/",city_name, "_",temp_disease_name,".rds"))
}
}
test <- disbayes_input_list_city_regions[[1]][[1]]
# test_path <-  paste0(relative_path_mslt, "disbayes-master/gbdcf-unsmoothed.stan")
#
data <- disbayes_input_list_city_regions[[1]][[1]]
#
test_list_output <- GenOutDisbayes(data)
index <- 1
disbayes_output_list_city_regions <- list()
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])){
disbayes_input_list_city_regions[[index]] <- GenOutDisbayes(disbayes_input_list_city_regions[[i]][[j]])
names(disbayes_input_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
index <- index + 1
}
}
index <- 1
disbayes_input_list_city_regions <- list()
for (i in 1:length(gbd_city_region_data_agg)) {
disbayes_input_list_city_regions[[index]] <- GenInpDisbayes(gbd_city_region_data_agg[[i]])
names(disbayes_input_list_city_regions)[index] <- paste0(names(gbd_city_region_data_agg[i]))
index <- index + 1
}
## Save as rds for sharing
for (i in 1:length(disbayes_input_list_city_regions)) {
city_name <- names(disbayes_input_list_city_regions[i])
for (j in 1:length(disbayes_input_list_city_regions[[i]])) {
## Add variable name to each of the diseases
disbayes_input_list_city_regions[[i]][[j]]$city_region <- city_name
temp_disease_name <- disbayes_input_list_city_regions[[i]][[j]][1,15]
print(paste0(city_name, "_",temp_disease_name))
write_rds(disbayes_input_list_city_regions[[i]][[j]],
paste0(relative_path_mslt, "data/city regions/Input disbayes/",city_name, "_",temp_disease_name,".rds"))
}
}
test <- disbayes_input_list_city_regions[[1]][[1]]
index <- 1
disbayes_output_list_city_regions <- list()
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])){
disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(disbayes_input_list_city_regions[[i]][[j]])
names(disbayes_input_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
index <- index + 1
}
}
test <- disbayes_input_list_city_regions[[1]][[1]]
index <- 1
disbayes_output_list_city_regions <- list()
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])){
disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(disbayes_input_list_city_regions[[1]][[1]])
# names(disbayes_input_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
index <- index + 1
}
}
index <- 1
disbayes_output_list_city_regions <- list()
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])){
disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(disbayes_input_list_city_regions[[i]][[j]])
# names(disbayes_input_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
index <- index + 1
}
}
index <- 1
disbayes_output_list_city_regions <- list()
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])){
disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(disbayes_input_list_city_regions[[1]][[1]])
# names(disbayes_output_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
index <- index + 1
}
}
library(devtools)
install_github("chjackson/disbayes")
install_github("chjackson/disbayes")
library(devtools)
install_github("chjackson/disbayes")
install.packages("install_github")
install_github("chjackson/disbayes")
install.packages(install_github) # (I added this)
library(devtools)
install_github("chjackson/disbayes")
require(knitr)
require(kableExtra)
require(citr)
require(gridExtra)
require(ggpubr)
require(grid)
require(ggplot2)
require(pillar)
require(devtools)
require(janitor)
require(tidyverse)
require(dplyr)
require(conflicted)
require(rlist)
if (interactive()) {
require(conflicted)
}
conflict_prefer("filter", "dplyr")
source('code/functions.R')
library(devtools)
source("code/functions.R")
source('code/functions.R')
source("code/functions.R")
library(devtools)
install.packages("devtools")
library(devtools)
library(devtools)
install.packages("devtools")
install.packages("devtools", lib="~/R/lib")
library(devtools)
# install.packages("devtools", lib="~/R/lib")
install.packages("devtools")
# install.packages("devtools", lib="~/R/lib")
install.packages("devtools")
require(knitr)
require(kableExtra)
require(citr)
require(gridExtra)
require(ggpubr)
require(grid)
require(ggplot2)
require(pillar)
require(devtools)
require(janitor)
require(tidyverse)
require(dplyr)
require(conflicted)
require(rlist)
if (interactive()) {
require(conflicted)
}
conflict_prefer("filter", "dplyr")
rm (list = ls())
options(scipen=999)
# ---- chunk-1 ----
## Functions
source('code/functions.R')
install.package('dplyr')
install.packages("dplyr")
require(tidyverse)
install.packages("dplyr")
require(dplyr)
install.packages("tidyverse")
