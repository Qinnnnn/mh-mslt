# prevnmale <- round(prevdenom * prevmale)
prevn <- round(prevdenom * prev)
}
)
## add sex and disease variable to match with output data frame
disbayes_input_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <-  index +1
}
}
}
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
disbayes_output_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
# data <- disbayes_input_list[[index]]
if (disease_short_names$disease[d] == "All causes"){
# cat("\n") #Uncomment to see list
}
if (disease_short_names$disease[d] == "Road injuries"){
}
else {
data <- data.frame(read.csv(paste0("data/city regions/bristol/dismod/input/", disease_short_names$sname[d], "_", sex_index, ".csv")))
# Exclude all cause and road injuries
## The saved data for input may be deleted or not, perhaps useful to check errors.
# data.frame(read.csv(paste0("MSLT/data/city regions/bristol/dismod/input/", d_index, "_", sex_index, ".csv")))
datstan <- c(as.list(data), nage=nrow(data))
inits <- list(
list(cf=rep(0.0101, datstan$nage)),
list(cf=rep(0.0201, datstan$nage)),
list(cf=rep(0.0056, datstan$nage)),
list(cf=rep(0.0071, datstan$nage))
)
gbdcf <- stan("disbayes-master/gbdcf-unsmoothed.stan", data=datstan, init=inits)
## Extract Summary statistics
## Add directly do dibayes input list, first 100 observations?
disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[1:101, 1:3]
## add disease names
disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
## add sex
disbayes_output_list[[index]]$sex <- sex_index
## create sex and disease category to then join to input for disease life table dataset
disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
View(disbayes_input_list[[8]])
## List of complete data for disbayes, it includes incidence from input calculations based on gbd and case fatality, estimated with disbayes
## The above disbayes_output code is ommiting some diseases, may be convergence issues, to check with Chris.
disease_lifetable_inputs_list <-  list()
for (i in 1:length(disbayes_output_list)){
for (d in 1:nrow(disease_short_names)){
## Create list same lenght as outputs
disease_lifetable_inputs_list[[i]] <- disbayes_input_list[[i]]
## Add column names for incidence and case fatality disease
disease_lifetable_inputs_list[[i]]$case_fatality  <- disbayes_output_list[[i]]$mean
disease_lifetable_inputs_list[[i]]$incidence <- disbayes_input_list[[i]]$inc
## Add age and sex column to then create unique dataset with all diseases case fatality and incidence
disease_lifetable_inputs_list[[i]][[paste("sex_age_cat", sep = "")]] <- paste(disease_lifetable_inputs_list[[i]]$sex,disease_lifetable_inputs_list[[i]]$age, sep = "_"  )
disease_lifetable_inputs_list[[i]]$disease_sex_match <- disbayes_output_list[[i]]$sex_disease
}
}
# View(disease_lifetable_inputs_list[[1]])
## Create a data frame with all diseases case fatality and incidence to process in mslt_code disease code
diseaseMeasures <- NULL
colNames <- colnames(disease_lifetable_inputs_list[[1]])
for (j in 1:length(disease_lifetable_inputs_list)){
currentTable <- disease_lifetable_inputs_list[[j]]
colnames(currentTable) <- colNames
diseaseMeasures <- rbind(diseaseMeasures,
currentTable)
}
diseaseMeasuresAge <- diseaseMeasures %>%
select(age,sex,sex_age_cat)
diseaseMeasuresCaseFatality <- diseaseMeasures %>%
#  select(age_sex_cat, disease, case_fatality=case_fatality_carc, incidence=incidence_carc) %>%
select(sex_age_cat, disease, case_fatality) %>%
mutate(disease=paste0("case_fatality_",tolower(disease))) %>%
spread(key=disease,value=case_fatality)
diseaseMeasuresIncidence <- diseaseMeasures %>%
#  select(age_sex_cat, disease, case_fatality=case_fatality_carc, incidence=incidence_carc) %>%
select(sex_age_cat, disease, incidence) %>%
mutate(disease=paste0("incidence_",tolower(disease))) %>%
spread(key=disease,value=incidence)
disease_life_table_input <- diseaseMeasuresAge %>%
left_join(diseaseMeasuresCaseFatality) %>%
left_join(diseaseMeasuresIncidence)
## Only keeping first 202 rows, the rest just repeat the same observations.
disease_life_table_input <- disease_life_table_input[1:202,]
View(disease_life_table_input)
write.csv(disease_life_table_input, "data/city regions/bristol/disease_input_data.csv")
View(disbayes_output_list[[1]])
View(disbayes_output_list[[2]])
View(disbayes_output_list[[3]])
View(disbayes_output_list[[4]])
View(disbayes_output_list[[5]])
View(disbayes_output_list[[6]])
View(disbayes_output_list[[7]])
View(disbayes_output_list[[8]])
View(disbayes_output_list[[9]])
View(disbayes_output_list[[10]])
View(disbayes_output_list[[11]])
View(disbayes_output_list[[12]])
View(disbayes_output_list[[13]])
View(disbayes_output_list[[14]])
# ---- chunk-intro ----
require(dplyr)
require(tidyverse)
require(knitr)
require(kableExtra)
require(citr)
require(gridExtra)
require(cowplot)
require(ggpubr)
require(grid)
require(ggplot2)
require(gridExtra)
require(pillar)
require(devtools)
# rm (list = ls())
options(scipen=999)
# ---- chunk-1 ----
source("code/functions.R")
## AVOID HARDCODING NAMES
# ---- chunk 2 ----
# ---------------------- Creating MSLT df ---------------------------
# Start with gbd dataframe generated in dataprep.R script
# ------------------- YLDs ---------------------------
all_ylds_df <- dplyr::select(gbd_df, starts_with("ylds (years lived with disability)_number"))
## Adjust all cause ylds for included diseases and injuries (exclude all cause )
gbd_df[["allc_ylds_adj_rate_1"]] <- (gbd_df$`ylds (years lived with disability)_number_allc`  - rowSums(select(all_ylds_df, -`ylds (years lived with disability)_number_allc`))) /
gbd_df$population_number
# ------------------- DWs ---------------------------#
disease_short_names <- mutate_all(disease_short_names, funs(tolower))
for (i in 1:nrow(disease_short_names)){
gbd_df[[paste0("dw_adj_", disease_short_names$sname[i])]] <-
(gbd_df[[paste0("ylds (years lived with disability)_number_", disease_short_names$sname[i])]] /
gbd_df[[paste0("prevalence_number_", disease_short_names$sname[i])]]) /
( 1 - gbd_df[["allc_ylds_adj_rate_1"]])
}
# Check that dws were created
# names(gbd_df)
# View(gbd_df)
# ------------------- Replace Nan and Inf numbers -------------------- #
gbd_df[mapply(is.infinite, gbd_df)] <- 0
gbd_df <- replace(gbd_df, is.na(gbd_df), 0)
# ------------------- MSLT frame --------------------------- #
mslt_df <- data.frame(age = rep(c(0:100), 2), sex = append(rep("male", 101),
rep("female", 101)))
# ------------------- Add population numbers --------------------------- #
## Model in five-year age cohorts, simulated from mid-age in cohort
mslt_df$age_cat [mslt_df$age == 2] <- 2
mslt_df$age_cat [mslt_df$age == 7] <- 7
mslt_df$age_cat [mslt_df$age == 12] <- 12
mslt_df$age_cat [mslt_df$age == 17] <- 17
mslt_df$age_cat [mslt_df$age == 22] <- 22
mslt_df$age_cat [mslt_df$age == 27] <- 27
mslt_df$age_cat [mslt_df$age == 32] <- 32
mslt_df$age_cat [mslt_df$age == 37] <- 37
mslt_df$age_cat [mslt_df$age == 42] <- 42
mslt_df$age_cat [mslt_df$age == 47] <- 47
mslt_df$age_cat [mslt_df$age == 52] <- 52
mslt_df$age_cat [mslt_df$age == 57] <- 57
mslt_df$age_cat [mslt_df$age == 62] <- 62
mslt_df$age_cat [mslt_df$age == 67] <- 67
mslt_df$age_cat [mslt_df$age == 72] <- 72
mslt_df$age_cat [mslt_df$age == 77] <- 77
mslt_df$age_cat [mslt_df$age == 82] <- 82
mslt_df$age_cat [mslt_df$age == 87] <- 87
mslt_df$age_cat [mslt_df$age == 92] <- 92
mslt_df$age_cat [mslt_df$age == 97] <- 97
mslt_df$sex_age_cat <- paste(mslt_df$sex,mslt_df$age, sep = "_"  )
gbd_popn_df <- select(gbd_df, population_number, sex_age_cat)
mslt_df <- left_join(mslt_df, gbd_popn_df, by = "sex_age_cat")
#### Interpolate rates
mslt_df[["mx"]] <- NA
mslt_df[["pyld_rate"]] <- NA
# View(mslt_df)
### Interpolate all-cause mortality rate from 5-yr rates to 1-yr rates
for(sex_index in i_sex) {
# sex_index <- "female"
# measure_index <- "deaths_rate_allc"
data <- filter(gbd_df, sex == sex_index) %>% select(age, sex, age_cat, deaths_rate_allc)
x <- data$age_cat
y <- log(data$deaths_rate_allc)
interpolation_func <- stats::splinefun(x, y, method = "monoH.FC", ties = mean)
interpolated <- as.data.frame(interpolation_func(seq(0, 100, 1)))
age <- seq(0, 100, by = 1)
interpolated <- cbind(interpolated, age)
interpolated[,1] <- exp(interpolated[,1])
## Add column with sex to create age_sex category to then merge with input_life table
interpolated$sex <- paste(sex_index)
interpolated$sex_age_cat <- paste(interpolated$sex, interpolated$age, sep = "_")
## Change name of column death to mx and ylds to pyld_rate to then merge
## with input_life table
colnames(interpolated)[1] <- paste("mx")
mslt_df[mslt_df$sex_age_cat == interpolated$sex_age_cat
& mslt_df$sex == sex_index, ]$mx <- interpolated$mx
### Interpolate all-cause ylds rate from 5-yr rates to 1-yr rates
data <- filter(gbd_df, sex == sex_index) %>% select(age, sex, age_cat, `ylds (years lived with disability)_rate_allc`)
x <- data$age_cat
y <- log(data$`ylds (years lived with disability)_rate_allc`)
interpolation_func <- stats::splinefun(x, y, method = "monoH.FC", ties = mean)
interpolated <- as.data.frame(interpolation_func(seq(0, 100, 1)))
age <- seq(0, 100, by = 1)
interpolated <- cbind(interpolated, age)
interpolated[,1] <- exp(interpolated[,1])
## Add column with sex to create age_sex category to then merge with input_life table
interpolated$sex <- paste(sex_index)
interpolated$sex_age_cat <- paste(interpolated$sex, interpolated$age, sep = "_")
## Change name of column death to mx and ylds to pyld_rate to then merge
## with input_life table
colnames(interpolated)[1] <- paste("pyld_rate")
mslt_df[mslt_df$sex_age_cat == interpolated$sex_age_cat
& mslt_df$sex == sex_index, ]$pyld_rate <- interpolated$pyld_rate
}
# names(gbd_df)
### Interpolate road injuries deaths rate from 5-yr rates to 1-yr rates
mslt_df[["pyld_rate_rdin"]] <- NA
mslt_df[["deaths_rate_rdin"]] <- NA
for(sex_index in i_sex) {
# sex_index <- "female"
# measure_index <- "deaths_rate_ri"
data <- filter(gbd_df, sex == sex_index) %>% select(age, sex, age_cat, deaths_rate_rdin)
x <- data$age_cat
y <- log(data$deaths_rate_rdin)
interpolation_func <- stats::splinefun(x, y, method = "monoH.FC", ties = mean)
interpolated <- as.data.frame(interpolation_func(seq(0, 100, 1)))
age <- seq(0, 100, by = 1)
interpolated <- cbind(interpolated, age)
interpolated[,1] <- exp(interpolated[,1])
## Add column with sex to create age_sex category to then merge with input_life table
interpolated$sex <- paste(sex_index)
interpolated$sex_age_cat <- paste(interpolated$sex, interpolated$age, sep = "_")
colnames(interpolated)[1] <- paste("deaths_rate_rdin")
mslt_df[mslt_df$sex_age_cat == interpolated$sex_age_cat
& mslt_df$sex == sex_index, ]$deaths_rate_rdin <- interpolated$deaths_rate_rdin
### Interpolate road injuries ylds rate from 5-yr rates to 1-yr rates
# for(sex_index in i_sex) {
#   # sex_index <- "female"
#   # measure_index <- "pyld_rate_ri"
data <- filter(gbd_df, sex == sex_index) %>% select(age, sex, age_cat, `ylds (years lived with disability)_rate_rdin`)
x <- data$age_cat
y <- log(data$`ylds (years lived with disability)_rate_rdin`)
interpolation_func <- stats::splinefun(x, y, method = "monoH.FC", ties = mean)
interpolated <- as.data.frame(interpolation_func(seq(0, 100, 1)))
age <- seq(0, 100, by = 1)
interpolated <- cbind(interpolated, age)
interpolated[,1] <- exp(interpolated[,1])
## Add column with sex to create age_sex category to then merge with input_life table
interpolated$sex <- paste(sex_index)
interpolated$sex_age_cat <- paste(interpolated$sex, interpolated$age, sep = "_")
colnames(interpolated)[1] <- paste("pyld_rate_rdin")
mslt_df[mslt_df$sex_age_cat == interpolated$sex_age_cat
& mslt_df$sex == sex_index, ]$pyld_rate_rdin <- interpolated$pyld_rate_rdin
}
### Interpolate dws rate from 5-yr rates to 1-yr rates
for (i in 1:nrow(disease_short_names)){
var_name <- paste0("dw_adj_", disease_short_names$sname[i])
mslt_df[, var_name] <- 1
}
for (i in 1:nrow(disease_short_names)){
for(sex_index in i_sex) {
# i <- 2
# sex_index <- "female"
var_name <- paste0("dw_adj_", disease_short_names$sname[i])
data <- filter(gbd_df, sex == sex_index) %>% select(age, sex, age_cat, starts_with(var_name))
x <- data$age_cat
y <- log(data[[var_name]])
interpolation_func <- stats::splinefun(x, y, method = "monoH.FC", ties = mean)
interpolated <- as.data.frame(interpolation_func(seq(0, 100, 1)))
age <- seq(0, 100, by = 1)
interpolated <- cbind(interpolated, age)
interpolated[,1] <- exp(interpolated[,1])
## Add column with sex to create age_sex category to then merge with input_life table
interpolated$sex <- paste(sex_index)
interpolated$sex_age_cat <- paste(interpolated$sex, interpolated$age, sep = "_")
## Change name of column death to mx and ylds to pyld_rate to then merge
## with input_life table
colnames(interpolated)[1] <- var_name
mslt_df[mslt_df$sex_age_cat == interpolated$sex_age_cat
& mslt_df$sex == sex_index, ][[var_name]] <- interpolated[[var_name]]
}
}
## Uncomment to check df
# View(mslt_df)
# names(mslt_df)
# ------------------- Replace Nan and Inf numbers  -------------------- #
mslt_df[mapply(is.infinite, mslt_df)] <- 0
mslt_df <- replace(mslt_df, is.na(mslt_df), 0)
# --------------------add incidence and case fatality ----------------- #
# ---- chunk-6 ---- CODE TO PICK UP DIRECTLY FROM dismod OUTPUT EXCEL, temporarly I copied and paste. Discuss with Alan and Carl
## Use dismod output and add to mslt_df (UPDATE)
## using Overall English data only for ihd, is, dm, bc and cc to show how it works to Carl and Alan
idata <- disease_life_table_input
# # Add age_sex category to match with mslt_df
#
# idata$sex_age_cat <- paste(idata$sex,idata$age, sep = "_"  )
idata <- select(idata, -c(age, sex))
mslt_df <- left_join(mslt_df, idata, by = "sex_age_cat")
# View(mslt_df)
# ---- chunk-7 ----
# Create baseline life tables
general_life_table_list_bl <- list()
index <- 1
for (age in i_age_cohort){
for (sex in i_sex){
# cat("age ", age, " and sex ", sex, "\n") #Uncomment to see index
general_life_table_list_bl[[index]] <- RunLifeTable(in_idata = mslt_df,
in_sex = sex, in_mid_age = age)
index <- index + 1
}
}
## Uncommnet to check life table list
View(general_life_table_list_bl[[2]])
# ---- chunk-8 ----
## Run disease life (here issue with diseases not generated in disbayes)
## WE HAVE TO DO THIS FOR NOW, AS DISBAYES IS NOT GENERATING OUTPUTS FOR ALL DISEASES, SO THE DISEASE_SHORT_NAMES VARIABLE IS NOT SUITABLE
i_disease <- c(tolower(unique(diseaseMeasures$disease)))
i_disease
## ALSO NEED TO DROP COLUMNS IN DATA FRAME FOR VARIABLES NOT INCLUDED IN DISEASE INPUT TABLE. USE idata
## Develop a code to just keep DW included in i_disease
mslt_df <- select(mslt_df, -c("dw_adj_rdin", "dw_adj_lwri", "dw_adj_allc", "dw_adj_adaod", "dw_adj_dmt2", "dw_adj_tbalc", "dw_adj_brsc", "dw_adj_utrc"))
idata <- select(idata, -c(age, sex))
disease_life_table_list_bl <- list()
index <- 1
for (age in i_age_cohort){
for (sex in i_sex){
for (disease in i_disease){
# Exclude bc for Males
# if (sex == "male" && disease == "bc"){
#   # cat("\n") #Uncomment to see list
# # }
# # if (sex == "male" && disease == "uc"){
# #   # cat("\n") #Uncomment to see list
# # }
# # if (sex == "female" && disease == "pc"){
# #   # cat("\n") #Uncomment to see list
# }
# else {
# cat("age ", age, " sex ", sex, "and disease", disease, "\n") #Uncomment to see list
disease_life_table_list_bl[[index]] <- RunDisease(in_idata = mslt_df, in_sex = sex, in_mid_age = age, in_disease = disease)
index <- index + 1
}
}
}
## Uncommnet to check disease life table list
# View(disease_life_table_list_bl[[224]])
# ---- chunk-9 ----
## Create value to use as factor changing incidence rates. REPLACE with (1-PIF) and use multiplicative PIF for common disease risk factors.
## Rob's comment about PIFs calcs: see function "health burden" in metahit_functions.R
incidence_change <- 0.95
## Generate scenario incidence (for each disease)
incidence_sc <- list()
index <- 1
for (age in i_age_cohort){
for (sex in i_sex){
for (disease in i_disease) {
# # Exclude bc for Males
# if (sex == "male" && disease == "bc"){
#   # cat("\n") # Uncomment to see list
# }
# else {
incidence_sc[[index]] <- disease_life_table_list_bl[[index]]$incidence_disease *
incidence_change
index <- index + 1
# }
}
}
}
disease_life_table_list_sc <- list()
index <- 1
for (age in i_age_cohort){
for (sex in i_sex){
for (disease in i_disease) {
# # Exclude bc for Males
# if (sex == "male" && disease == "bc"){
#   # cat("\n") #Uncomment to see list
# }
# if (sex == "male" && disease == "uc"){
#   # cat("\n") #Uncomment to see list
# }
# if (sex == "female" && disease == "pc"){
#   # cat("\n") #Uncomment to see list
# }
# else {
# cat("age ", age, " sex ", sex, "and disease", disease, "\n")
# modify mslt_df's incidence for the said scenario
td1 <- mslt_df
td1[td1$age >= age & td1$sex == sex,][[paste("incidence", disease, sep = "_")]] <- incidence_sc[[index]]
# Instead of idata, feed td to run scenarios
disease_life_table_list_sc[[index]] <- RunDisease(in_idata = td1, in_sex = sex,
in_mid_age = age, in_disease = disease)
disease_life_table_list_sc[[index]]$diff_inc_disease <-
disease_life_table_list_sc[[index]]$incidence_disease -   disease_life_table_list_bl[[index]]$incidence_disease
disease_life_table_list_sc[[index]]$diff_prev_disease <-
disease_life_table_list_sc[[index]]$px  - disease_life_table_list_bl[[index]]$px
disease_life_table_list_sc[[index]]$diff_mort_disease <-
disease_life_table_list_sc[[index]]$mx - disease_life_table_list_bl[[index]]$mx
disease_life_table_list_sc[[index]]$diff_pylds_disease <-
(disease_life_table_list_sc[[index]]$px - disease_life_table_list_bl[[index]]$px) * disease_life_table_list_bl[[index]]$dw_disease
index <- index + 1
# }
}
}
}
## Uncommnet to check scenario life tables
# View(disease_life_table_list_sc[[3]])
# ---- chunk-11 ----
## Generate total change in mortality rate
## Sum mortality rate change scenarios (mx_sc_total) (ONLY DOING MALES)
mx_sc_total <- list()
l_index <- 1
index <- 1
for (age in i_age_cohort){
for (sex in i_sex){
mortality_sum <- NULL
create_new <- T
for (disease in i_disease) {
if (sex == "male" && disease == "bc"){
# cat("\n")
}else{
if (create_new){
mortality_sum <- select(disease_life_table_list_sc[[index]],
c('age', 'sex'))
mortality_sum$total <- 0
create_new <- F
mortality_sum$total <- mortality_sum$total +
(disease_life_table_list_sc[[index]]$diff_mort_disease)
}else{
mortality_sum$total <- mortality_sum$total +
(disease_life_table_list_sc[[index]]$diff_mort_disease)
}
# cat(age, " - ", sex," - ",  disease," - ",  index, " - ", l_index,  "\n")
index <- index + 1
}
}
mx_sc_total[[l_index]] <- mortality_sum
l_index <- l_index + 1
}
}
## Uncommnet to check sceanrio mortality and changes
# View(mx_sc_total[[16]])
## Generate total change in prevalent yld rates
## Total ylds rate= sum (change prevalence disease*dw)
pylds_sc_total <- list()
l_index <- 1
index <- 1
for (age in i_age_cohort){
for (sex in i_sex){
pylds_sum <- NULL
create_new <- T
for (disease in i_disease) {
if (sex == "male" && disease == "bc"){
# cat("\n") #Uncomment to see list
}
if (sex == "male" && disease == "uc"){
# cat("\n") #Uncomment to see list
}
if (sex == "female" && disease == "pc"){
# cat("\n") #Uncomment to see list
}
else {
if (create_new){
pylds_sum <- select(disease_life_table_list_sc[[index]], c('age', 'sex'))
pylds_sum$total <- 0
create_new <- F
pylds_sum$total <- pylds_sum$total +
(disease_life_table_list_sc[[index]]$diff_pylds_disease)
}else{
pylds_sum$total <- pylds_sum$total +
(disease_life_table_list_sc[[index]]$diff_pylds_disease)
}
# cat(age, " - ", sex," - ",  disease," - ",  index, " - ", l_index,  "\n")
index <- index + 1
}
}
pylds_sc_total[[l_index]] <- pylds_sum
l_index <- l_index + 1
}
}
## Uncommnet to check scenario pyld change
# View(pylds_sc_total[[2]])
## Calculate general life tables with modified mortality and pylds total
## Original mortality rate is modified by the mx_sc_total (total change in mortality from diseases)
## Original pyld rate is modified by the change in each disease pylds
general_life_table_list_sc <- list()
index <- 1
for (age in i_age_cohort){
for (sex in i_sex){
# cat("age ", age, " and sex ", sex, "\n")
# modify idata's mortality and pyld total for the said scenario
td2 <- mslt_df
# td2 <- subset(td2, select = -c(mx, pyld_rate))
td2[td2$age >= age & td2$sex == sex,][[paste("mx")]] <- general_life_table_list_bl[[index]]$mx + mx_sc_total[[index]]$total
td2[td2$age >= age & td2$sex == sex,][[paste("pyld_rate")]] <- general_life_table_list_bl[[index]]$pyld_rate + pylds_sc_total[[index]]$total
# Instead of idata, feed td to run scenarios
general_life_table_list_sc[[index]] <- RunLifeTable(in_idata = td2, in_sex = sex, in_mid_age = age)
#
index <- index + 1
}
}
## Uncommnet to check scenario life tables
# View(general_life_table_list_sc[[32]])
# View(general_life_table_list_bl[[1]])
## Check difference life table baseline and scenario (uncomment to check)
# general_life_table_list_bl[[1]]$Lx - general_life_table_list_sc[[1]]$Lx
# general_life_table_list_bl[[1]]$Lwx - general_life_table_list_sc[[1]]$Lwx
# ---- chunk-12 ----
