pif$age [pif$age_cat =="80-84"] <- 82
pif$age [pif$age_cat =="85-89"] <- 87
pif$age [pif$age_cat =="90-94"] <- 92
pif$age [pif$age_cat =="95-120"] <- 97
## Change names to get rid of risk factors combinations in the name (BEST IF I DO NOT HAVE TO DO THIS MANUALLY)
names(pif)[names(pif) == "scen_pif_pa_ap_noise_no2_ihd"] <- "pif_ihd"
names(pif)[names(pif) == "scen_pif_pa_ap_stroke"] <- "pif_stroke"
names(pif)[names(pif) == "scen_pif_pa_colon" ] <- "pif_colon"
names(pif)[names(pif) == "scen_pif_pa_t2d"] <- "pif_t2d"
names(pif)[names(pif) == "scen_pif_pa_endo"] <- "pif_endo"
names(pif)[names(pif) == "scen_pif_pa_ap_lc"] <- "pif_lc"
names(pif)[names(pif) == "scen_pif_ap_lri"] <- "pif_lri"
names(pif)[names(pif) == "scen_pif_ap_copd"] <- "pif_copd"
names(pif)[names(pif) == "scen_pif_pa_breast"] <- "pif_breast"
names(pif)[names(pif) == "scen_cyclist_Fatal"] <- "pif_cyclist_deaths"
names(pif)[names(pif) == "scen_pedestrian_Fatal"] <- "pif_pedestrian_deaths"
names(pif)[names(pif) == "scen_cyclist_Serious"] <- "pif_cyclist_ylds"
names(pif)[names(pif) == "scen_pedestrian_Serious"] <- "pif_pedestrian_ylds"
names(pif)[names(pif) == "scen_car/taxi_Fatal"] <- "pif_motor_deaths"
names(pif)[names(pif) == "scen_motorcycle_Fatal"  ] <- "pif_motorcyclist_deaths"
names(pif)[names(pif) == "scen_car/taxi_Serious"] <- "pif_motor_ylds"
names(pif)[names(pif) == "scen_motorcycle_Serious"  ] <- "pif_motorcyclist_ylds"
## Repeat pif lri for deaths and ylds
pif$pif_lri_deaths <- pif$pif_lri
pif$pif_lri_ylds <- pif$pif_lri
## Delete pif_lri
pif <- select(pif, -c(pif_lri))
### mslt_df names are not matching pifs names, need to change this, preferably, not manually
#### MANUALLY TO CHECK THAT IT WORKS FOR ROAD INJURIES
p <- dplyr::filter(pif, sex == "male")
outage <- min(p$age):100
ind <- findInterval(outage, p$age)
pif_expanded <- p[ind,]
pif_expanded$age <- outage
p_1 <- filter(pif, sex == "female")
outage <- min(p_1$age):100
ind <- findInterval(outage, p_1$age)
pif_expanded_1 <- p_1[ind,]
pif_expanded_1$age <- outage
pif_expanded <- rbind(pif_expanded, pif_expanded_1)
write_csv(pif_expanded, "data/pif_expanded.csv")
local_goverment_areas <- rbind(local_goverment_areas, c("", "England", "", "England", "England"), c("", "Greater London", "", "Greater London", "Greater London"))
unique(local_goverment_areas$cityregion)
local_goverment_areas <- rbind(local_goverment_areas, c("", "England", "", "England", "England"), c("", "Greater London", "", "Greater London", "Greater London"),
c("", "South West England", "", "South West England", "South West England"), c("", "East Midlands", "", "East Midlands", "East Midlands"),
c("", "West Midlands", "", "West Midlands", "West Midlands"), c("", "East of England", "", "East of England", "East of England"),
c("", "South East England", "", "South East England", "South East England"),
c("", "North East England", "", "North East England", "North East England"),
c("", "North West England", "", "North West England", "North West England"),)
local_goverment_areas <- rbind(local_goverment_areas, c("", "England", "", "England", "England"), c("", "Greater London", "", "Greater London", "Greater London"))
local_goverment_areas <- rbind(local_goverment_areas, c("", "England", "", "England", "England"), c("", "Greater London", "", "Greater London", "Greater London"),
c("", "South West England", "", "South West England", "South West England"), c("", "East Midlands", "", "East Midlands", "East Midlands"),
c("", "West Midlands", "", "West Midlands", "West Midlands"), c("", "East of England", "", "East of England", "East of England"),
c("", "South East England", "", "South East England", "South East England"),
c("", "North East England", "", "North East England", "North East England"),
c("", "North West England", "", "North West England", "North West England"))
city_regions <- split(local_goverment_areas$location, f = local_goverment_areas$cityregion)
data_folder <- "C:/Users/e95517/Dropbox/Collaborations/James Woodcock/Metahit/Data/GBD2017/"
temp_folder <- paste0(data_folder,"temp")
result_folder <- paste0(data_folder,"final")
gbdfile_name <- "IHME-GBD_2017_DATA-c9f807db-" # CHANGE NAME WHEN NEW DATA IS DOWNLOADED
## Loop to extract zip file data
data_extracted <- NULL
for (i in 1:2) { # LOOP NUMBER DEPENDS ON NUMBER OF ZIP FILES, HERE I JUST GOT DATA FOR ALL LOCALITIES IN ENGLAND
file_number <- i
file_select <- paste0(data_folder,gbdfile_name, i,".zip")
unzip(file_select, exdir=temp_folder)
data_read <- read_csv((paste0(temp_folder,"/", gbdfile_name, i, ".csv")))
file.remove(paste0(temp_folder,"/", gbdfile_name, i, ".csv"))
# data_read <- subset(data_read, location_name %in% local_goverment_areas$lad11nm) # location name is easier to identify
data_extracted <- rbind(data_extracted,data_read)
}
unlink(paste0(temp_folder), recursive = TRUE)
unique(data_extracted$location_name)
disease_short_names <- data.frame(disease = tolower(as.character(unique(data_extracted$cause_name))),
sname = tolower(abbreviate(unique(data_extracted$cause_name, max = 2))),
stringsAsFactors = F)
disease_short_names <- disease_short_names %>% mutate(is_not_dis = ifelse((str_detect(disease, "injuries") |
str_detect(disease, "All causes") |
str_detect(disease, "Lower respiratory infections")),
1, 0) )
disease_short_names[disease_short_names$sname == "allc", "is_not_dis"] <- 2
disease_short_names[disease_short_names$sname == "lwri", "is_not_dis"] <- 1
### Combine with acronyms from execute-mh
## Get execute-mh diseases (CHECK WITH ALI TO USE RELATIVE PATH TO READ DIRECLTY FROM MH-EXECUTE DIRECTORY, DATA PREP??)
disease_names_execute <- read_csv(paste0('../mh-execute/', "inputs/dose_response/disease_outcomes_lookup.csv"))
disease_names_execute <- disease_names_execute[1:2]
disease_names_execute$disease <- tolower(disease_names_execute$GBD_name)
disease_short_names <- left_join(disease_short_names, disease_names_execute, by = "disease")
## Add injuries
disease_short_names$acronym <- ifelse(str_detect(disease_short_names$disease, "injuries"), disease_short_names$disease, disease_short_names$acronym)
## Only keep first word for acronyns
disease_short_names$acronym <- word(disease_short_names$acronym, 1)
## Add males and females only diseases
disease_short_names$males <- ifelse(disease_short_names$disease %in% c("breast cancer", "uterine cancer"), 0, 1)
disease_short_names$females <- 1
## Replace NAs with blank
disease_short_names$acronym[is.na(disease_short_names$acronym)] <- "no_pif"
## Add column to match names from mh-execute
write_csv(disease_short_names, "data/parameters/disease_names.csv")
disease_measures_list <- data.frame(measure = unique(data_extracted$measure_name)) %>%
pull(measure) %>%
as.character() %>%
as.list()
# ---- chunk-2: Dismod and Disbayes data input preparation ----
gbd_input <- data_extracted
# ---- chunk-2.1: Clean data ----
names(gbd_input) = gsub(pattern = "_name", replacement = "", x = names(gbd_input))
gbd_input <- select(gbd_input,-contains("id"))
# gbd_input <- filter(gbd_input, location %in% localities) %>% mutate_if(is.factor, as.character)
gbd_input$cause <- tolower(gbd_input$cause)
gbd_input <- left_join(local_goverment_areas, gbd_input, by = "location")
unique(gbd_input$location)
unique(gbd_input$cityregion)
city_regions_list <- split(gbd_input , f = gbd_input$cityregion)
city_regions_list_loc <- list()
for (i in 1:length(city_regions_list)){
city_regions_list_loc[[i]] <- split(city_regions_list[[i]], f = city_regions_list[[i]]$location)
}
index <- 1
gbd_loc_data_processed <- list()
for (i in 1:length(city_regions_list_loc)) {
gbd_loc_data_processed[[index]] <-  RunLocDf(city_regions_list_loc[[i]])
index <- index + 1
}
index <- 1
gbd_loc_data_processed <- list()
for (i in 1:length(city_regions_list_loc)) {
gbd_loc_data_processed[[index]] <- lapply(city_regions_list_loc[[i]], RunLocDf)
index <- index + 1
}
View(gbd_loc_data_processed)
index <- 1
gbd_city_region_data <- list()
for (i in 1:length(gbd_loc_data_processed)){
gbd_city_region_data[[index]] <- bind_rows(gbd_loc_data_processed[[i]], .id = 'number')
## Drop number columns
gbd_city_region_data[[index]] <- gbd_city_region_data[[index]][ -c(1) ]
## Clean dataframes per city regions
gbd_city_region_data[[index]] <- dplyr::select(gbd_city_region_data[[index]], -contains('rate')) %>% mutate_if(is.factor, as.character)
gbd_city_region_data[[index]]$sex_age_cat <- paste(gbd_city_region_data[[index]]$sex, gbd_city_region_data[[index]]$age, sep = "_")
gbd_city_region_data[[index]] <- select(gbd_city_region_data[[index]], -c(age, sex, location))
suppressWarnings(names(gbd_city_region_data)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
index <- index + 1
}
View(gbd_city_region_data)
gbd_city_region_data_agg <- list()
index <- 1
for (i in 1:length(gbd_city_region_data)) {
gbd_city_region_data_agg[[index]] <- gbd_city_region_data[[i]] %>%
group_by(sex_age_cat) %>%
summarise_all(funs(sum))%>%
separate(sex_age_cat, c("sex", "age"), "_")
## Add numberical age categories
gbd_city_region_data_agg[[index]]$age_cat <- 0
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="Under 5"] <- 2
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="5 to 9"] <- 7
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="10 to 14"] <- 12
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="15 to 19"] <- 17
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="20 to 24"] <- 22
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="25 to 29"] <- 27
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="30 to 34"] <- 32
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="35 to 39"] <- 37
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="40 to 44"] <- 42
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="45 to 49"] <- 47
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="50 to 54"] <- 52
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="55 to 59"] <- 57
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="60 to 64"] <- 62
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="65 to 69"] <- 67
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="70 to 74"] <- 72
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="75 to 79"] <- 77
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="80 to 84"] <- 82
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="85 to 89"] <- 87
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="90 to 94"] <- 92
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="95 plus"] <- 97
## Change sex variable to lower case
gbd_city_region_data_agg[[index]]$sex <- tolower(gbd_city_region_data_agg[[index]]$sex)
## Create age_sex category
gbd_city_region_data_agg[[index]]$sex_age_cat <- paste(gbd_city_region_data_agg[[index]]$sex,gbd_city_region_data_agg[[index]]$age_cat, sep = "_"  )
## Order data
gbd_city_region_data_agg[[index]] <- gbd_city_region_data_agg[[index]][order(gbd_city_region_data_agg[[index]]$sex, gbd_city_region_data_agg[[index]]$age_cat),]
## Calculate rates per one
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
dn <- disease_short_names$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character()
gbd_city_region_data_agg[[index]][[tolower(paste(dmeasure, "rate", disease_short_names$sname[d], sep = "_"))]] <- gbd_city_region_data_agg[[index]][[tolower(paste(dmeasure, "number", disease_short_names$sname[d], sep = "_"))]]/
gbd_city_region_data_agg[[index]]$population_number
}
}
suppressWarnings(names(gbd_city_region_data_agg)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
## Save as csv (path)
write_csv(gbd_city_region_data_agg[[index]], paste0(relative_path_mslt, "data/city regions/GBD sorted/", unique(city_regions_list_loc[[i]][[1]]$cityregion), ".csv"))
index <- index + 1
}
index <- 1
disbayes_input_list_city_regions <- list()
for (i in 1:length(gbd_city_region_data_agg)) {
disbayes_input_list_city_regions[[index]] <- GenInpDisbayes(gbd_city_region_data_agg[[i]])
names(disbayes_input_list_city_regions)[index] <- paste0(names(gbd_city_region_data_agg[i]))
index <- index + 1
}
for (i in 1:length(disbayes_input_list_city_regions)) {
city_name <- names(disbayes_input_list_city_regions[i])
for (j in 1:length(disbayes_input_list_city_regions[[i]])) {
## Add variable name to each of the diseases
disbayes_input_list_city_regions[[i]][[j]]$city_region <- city_name
temp_disease_name <- disbayes_input_list_city_regions[[i]][[j]][1,15]
print(paste0(city_name, "_",temp_disease_name))
write_csv(disbayes_input_list_city_regions[[i]][[j]],
paste0(relative_path_mslt, "data/city regions/Input disbayes/",city_name, "_",temp_disease_name,".csv"))
}
}
index <- 1
disbayes_output_list_city_regions <- list()
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])){
disbayes_input_list_city_regions[[index]] <- GenInpDisbayes(disbayes_input_list_city_regions[[i]][[j]])
names(disbayes_input_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
index <- index + 1
}
}
test <- disbayes_input_list_city_regions[[1]][[1]]
View(test)
GenOutDisbayes <- function(i_data) {
disbayes_output_list <- list()
index <- 1
for (d in 1:nrow(disease_short_names)){
for (sex_index in i_sex){
data <- i_data
# disbayes_input_list[[index]]
if (disease_short_names$is_not_dis[d] == 0){
datstan <- c(as.list(data), nage=nrow(data))
inits <- list(
list(cf=rep(0.0101, datstan$nage)),
list(cf=rep(0.0201, datstan$nage)),
list(cf=rep(0.0056, datstan$nage)),
list(cf=rep(0.0071, datstan$nage))
)
gbdcf <- stan("disbayes-master/gbdcf-unsmoothed.stan", data=datstan, init=inits)
## Extract Summary statistics
## Add directly to dibayes input list, first 100 observations? Check with Chris
disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
## add disease names
disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
## add sex
disbayes_output_list[[index]]$sex <- sex_index
## create sex and disease category to then join to input for disease life table dataset
disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
return(disbayes_output_list)
}
index <- 1
disbayes_output_list_city_regions <- list()
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])){
disbayes_input_list_city_regions[[index]] <- GenInpDisbayes(disbayes_input_list_city_regions[[i]][[j]])
# names(disbayes_input_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
index <- index + 1
}
}
index <- 1
disbayes_output_list_city_regions <- list()
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])){
disbayes_input_list_city_regions[[index]] <- GenOutDisbayes(disbayes_input_list_city_regions[[i]][[j]])
names(disbayes_input_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
index <- index + 1
}
}
unique(local_goverment_areas$gordet)
View(disease_short_names)
look_up_table <- read_csv(paste0(relative_path_execute, 'inputs/mh_regions_lad_lookup.csv'))
View(look_up_table)
local_goverment_areas <- look_up_table
other_non_city_regions <- unique(local_goverment_areas$gordet)
local_goverment_areas <- look_up_table %>% rbind(unique(local_goverment_areas$gordet))
View(local_goverment_areas)
local_goverment_areas <- look_up_table
data_folder <- "C:/Users/e95517/Dropbox/Collaborations/James Woodcock/Metahit/Data/GBD2017/"
temp_folder <- paste0(data_folder,"temp")
result_folder <- paste0(data_folder,"final")
gbdfile_name <- "IHME-GBD_2017_DATA-ac95a757-" # CHANGE NAME WHEN NEW DATA IS DOWNLOADED
## Loop to extract zip file data
data_extracted <- NULL
for (i in 1:4) { # LOOP NUMBER DEPENDS ON NUMBER OF ZIP FILES, HERE I JUST GOT DATA FOR ALL LOCALITIES IN ENGLAND
file_number <- i
file_select <- paste0(data_folder,gbdfile_name, i,".zip")
unzip(file_select, exdir=temp_folder)
data_read <- read_csv((paste0(temp_folder,"/", gbdfile_name, i, ".csv")))
file.remove(paste0(temp_folder,"/", gbdfile_name, i, ".csv"))
# data_read <- subset(data_read, location_name %in% local_goverment_areas$lad11nm) # location name is easier to identify
data_extracted <- rbind(data_extracted,data_read)
}
unlink(paste0(temp_folder), recursive = TRUE)
names_non_cr <- (unique(local_goverment_areas$gordet))
names_non_cr <- as.data.frame((unique(local_goverment_areas$gordet)))
names_non_cr <- as.data.frame(unique(local_goverment_areas$gordet))
names_non_cr <- unique(local_goverment_areas$gordet)
for (i in names_non_cr){
local_goverment_areas <- rbind(local_goverment_areas, c("", i, "", i, i))
}
View(local_goverment_areas)
local_goverment_areas <-  look_up_table %>% dplyr::filter(cityregion != "")
names(local_goverment_areas)[names(local_goverment_areas) == "lad11nm"] <- "location"
View(local_goverment_areas)
local_goverment_areas <- look_up_table
## Add non city regions names
names_non_cr <- unique(local_goverment_areas$gordet)
for (i in names_non_cr){
local_goverment_areas <- rbind(local_goverment_areas, c("", i, "", i, i))
View(local_goverment_areas)
View(local_goverment_areas)
View(local_goverment_areas)
View(local_goverment_areas)
View(local_goverment_areas)
View(local_goverment_areas)
local_goverment_areas <- look_up_table
names_non_cr <- unique(local_goverment_areas$gordet)
for (i in names_non_cr){
local_goverment_areas <- rbind(local_goverment_areas, c("", i, "", i, i))
}
View(local_goverment_areas)
local_goverment_areas <-  local_goverment_areas %>% dplyr::filter(cityregion != "")
View(local_goverment_areas)
names(local_goverment_areas)[names(local_goverment_areas) == "lad11nm"] <- "location"
city_regions <- split(local_goverment_areas$location, f = local_goverment_areas$cityregion)
data_folder <- "C:/Users/e95517/Dropbox/Collaborations/James Woodcock/Metahit/Data/GBD2017/"
temp_folder <- paste0(data_folder,"temp")
result_folder <- paste0(data_folder,"final")
gbdfile_name <- "IHME-GBD_2017_DATA-ac95a757-" # CHANGE NAME WHEN NEW DATA IS DOWNLOADED
## Loop to extract zip file data
data_extracted <- NULL
for (i in 1:4) { # LOOP NUMBER DEPENDS ON NUMBER OF ZIP FILES, HERE I JUST GOT DATA FOR ALL LOCALITIES IN ENGLAND
file_number <- i
file_select <- paste0(data_folder,gbdfile_name, i,".zip")
unzip(file_select, exdir=temp_folder)
data_read <- read_csv((paste0(temp_folder,"/", gbdfile_name, i, ".csv")))
file.remove(paste0(temp_folder,"/", gbdfile_name, i, ".csv"))
# data_read <- subset(data_read, location_name %in% local_goverment_areas$lad11nm) # location name is easier to identify
data_extracted <- rbind(data_extracted,data_read)
}
unlink(paste0(temp_folder), recursive = TRUE)
disease_short_names <- data.frame(disease = tolower(as.character(unique(data_extracted$cause_name))),
sname = tolower(abbreviate(unique(data_extracted$cause_name, max = 2))),
stringsAsFactors = F)
disease_short_names <- disease_short_names %>% mutate(is_not_dis = ifelse((str_detect(disease, "injuries") |
str_detect(disease, "All causes") |
str_detect(disease, "Lower respiratory infections")),
1, 0) )
disease_short_names[disease_short_names$sname == "allc", "is_not_dis"] <- 2
disease_short_names[disease_short_names$sname == "lwri", "is_not_dis"] <- 1
### Combine with acronyms from execute-mh
## Get execute-mh diseases (CHECK WITH ALI TO USE RELATIVE PATH TO READ DIRECLTY FROM MH-EXECUTE DIRECTORY, DATA PREP??)
disease_names_execute <- read_csv(paste0('../mh-execute/', "inputs/dose_response/disease_outcomes_lookup.csv"))
disease_names_execute <- disease_names_execute[1:2]
disease_names_execute$disease <- tolower(disease_names_execute$GBD_name)
disease_short_names <- left_join(disease_short_names, disease_names_execute, by = "disease")
## Add injuries
disease_short_names$acronym <- ifelse(str_detect(disease_short_names$disease, "injuries"), disease_short_names$disease, disease_short_names$acronym)
## Only keep first word for acronyns
disease_short_names$acronym <- word(disease_short_names$acronym, 1)
## Add males and females only diseases
disease_short_names$males <- ifelse(disease_short_names$disease %in% c("breast cancer", "uterine cancer"), 0, 1)
disease_short_names$females <- 1
## Replace NAs with blank
disease_short_names$acronym[is.na(disease_short_names$acronym)] <- "no_pif"
## Add column to match names from mh-execute
write_csv(disease_short_names, "data/parameters/disease_names.csv")
disease_measures_list <- data.frame(measure = unique(data_extracted$measure_name)) %>%
pull(measure) %>%
as.character() %>%
as.list()
# ---- chunk-2: Dismod and Disbayes data input preparation ----
gbd_input <- data_extracted
# ---- chunk-2.1: Clean data ----
names(gbd_input) = gsub(pattern = "_name", replacement = "", x = names(gbd_input))
gbd_input <- select(gbd_input,-contains("id"))
# gbd_input <- filter(gbd_input, location %in% localities) %>% mutate_if(is.factor, as.character)
gbd_input$cause <- tolower(gbd_input$cause)
gbd_input <- left_join(local_goverment_areas, gbd_input, by = "location")
# ---- chunk-2.2: Sort data per local goverment area ----
## We first derive populaiton and cases numbers (e.g. all cause mortality) for each locality and then aggregate at the City Region level.
city_regions_list <- split(gbd_input , f = gbd_input$cityregion)
city_regions_list_loc <- list()
for (i in 1:length(city_regions_list)){
city_regions_list_loc[[i]] <- split(city_regions_list[[i]], f = city_regions_list[[i]]$location)
}
### This code takes about 0.5 hour to run CHECK WITH ROB AND ALAN HOW TO MAKE FASTER
index <- 1
gbd_loc_data_processed <- list()
for (i in 1:length(city_regions_list_loc)) {
gbd_loc_data_processed[[index]] <- lapply(city_regions_list_loc[[i]], RunLocDf)
index <- index + 1
}
# ---- chunk-2.3: Create data frame for city region with all localities ----
index <- 1
gbd_city_region_data <- list()
for (i in 1:length(gbd_loc_data_processed)){
gbd_city_region_data[[index]] <- bind_rows(gbd_loc_data_processed[[i]], .id = 'number')
## Drop number columns
gbd_city_region_data[[index]] <- gbd_city_region_data[[index]][ -c(1) ]
## Clean dataframes per city regions
gbd_city_region_data[[index]] <- dplyr::select(gbd_city_region_data[[index]], -contains('rate')) %>% mutate_if(is.factor, as.character)
gbd_city_region_data[[index]]$sex_age_cat <- paste(gbd_city_region_data[[index]]$sex, gbd_city_region_data[[index]]$age, sep = "_")
gbd_city_region_data[[index]] <- select(gbd_city_region_data[[index]], -c(age, sex, location))
suppressWarnings(names(gbd_city_region_data)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
index <- index + 1
}
# View(gbd_city_region_data[[1]])
## Create aggregated data frame (sums all numbers from localities within a city region)
gbd_city_region_data_agg <- list()
index <- 1
for (i in 1:length(gbd_city_region_data)) {
gbd_city_region_data_agg[[index]] <- gbd_city_region_data[[i]] %>%
group_by(sex_age_cat) %>%
summarise_all(funs(sum))%>%
separate(sex_age_cat, c("sex", "age"), "_")
## Add numberical age categories
gbd_city_region_data_agg[[index]]$age_cat <- 0
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="Under 5"] <- 2
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="5 to 9"] <- 7
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="10 to 14"] <- 12
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="15 to 19"] <- 17
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="20 to 24"] <- 22
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="25 to 29"] <- 27
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="30 to 34"] <- 32
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="35 to 39"] <- 37
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="40 to 44"] <- 42
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="45 to 49"] <- 47
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="50 to 54"] <- 52
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="55 to 59"] <- 57
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="60 to 64"] <- 62
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="65 to 69"] <- 67
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="70 to 74"] <- 72
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="75 to 79"] <- 77
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="80 to 84"] <- 82
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="85 to 89"] <- 87
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="90 to 94"] <- 92
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="95 plus"] <- 97
## Change sex variable to lower case
gbd_city_region_data_agg[[index]]$sex <- tolower(gbd_city_region_data_agg[[index]]$sex)
## Create age_sex category
gbd_city_region_data_agg[[index]]$sex_age_cat <- paste(gbd_city_region_data_agg[[index]]$sex,gbd_city_region_data_agg[[index]]$age_cat, sep = "_"  )
## Order data
gbd_city_region_data_agg[[index]] <- gbd_city_region_data_agg[[index]][order(gbd_city_region_data_agg[[index]]$sex, gbd_city_region_data_agg[[index]]$age_cat),]
## Calculate rates per one
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
dn <- disease_short_names$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character()
gbd_city_region_data_agg[[index]][[tolower(paste(dmeasure, "rate", disease_short_names$sname[d], sep = "_"))]] <- gbd_city_region_data_agg[[index]][[tolower(paste(dmeasure, "number", disease_short_names$sname[d], sep = "_"))]]/
gbd_city_region_data_agg[[index]]$population_number
}
}
suppressWarnings(names(gbd_city_region_data_agg)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
## Save as csv (path)
write_csv(gbd_city_region_data_agg[[index]], paste0(relative_path_mslt, "data/city regions/GBD sorted/", unique(city_regions_list_loc[[i]][[1]]$cityregion), ".csv"))
index <- index + 1
}
### Check that numbers for regions () add up to England total
index <- 1
gbd_city_region_data <- list()
for (i in 1:length(gbd_loc_data_processed)){
gbd_city_region_data[[index]] <- bind_rows(gbd_loc_data_processed[[i]], .id = 'number')
## Drop number columns
gbd_city_region_data[[index]] <- gbd_city_region_data[[index]][ -c(1) ]
## Clean dataframes per city regions
gbd_city_region_data[[index]] <- dplyr::select(gbd_city_region_data[[index]], -contains('rate')) %>% mutate_if(is.factor, as.character)
gbd_city_region_data[[index]]$sex_age_cat <- paste(gbd_city_region_data[[index]]$sex, gbd_city_region_data[[index]]$age, sep = "_")
gbd_city_region_data[[index]] <- select(gbd_city_region_data[[index]], -c(age, sex, location))
suppressWarnings(names(gbd_city_region_data)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
index <- index + 1
}
index <- 1
gbd_city_region_data <- list()
for (i in 1:length(gbd_loc_data_processed)){
gbd_city_region_data[[index]] <- bind_rows(gbd_loc_data_processed[[i]], .id = 'number')
## Drop number columns
# gbd_city_region_data[[index]] <- gbd_city_region_data[[index]][ -c(1) ]
## Clean dataframes per city regions
gbd_city_region_data[[index]] <- dplyr::select(gbd_city_region_data[[index]], -contains('rate')) %>% mutate_if(is.factor, as.character)
gbd_city_region_data[[index]]$sex_age_cat <- paste(gbd_city_region_data[[index]]$sex, gbd_city_region_data[[index]]$age, sep = "_")
gbd_city_region_data[[index]] <- select(gbd_city_region_data[[index]], -c(age, sex, location))
suppressWarnings(names(gbd_city_region_data)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
index <- index + 1
}
index <- 1
gbd_city_region_data <- list()
for (i in 1:length(gbd_loc_data_processed)){
gbd_city_region_data[[index]] <- bind_rows(gbd_loc_data_processed[[i]], .id = 'number')
browser()
## Drop number columns
# gbd_city_region_data[[index]] <- gbd_city_region_data[[index]][ -c(1) ]
## Clean dataframes per city regions
gbd_city_region_data[[index]] <- dplyr::select(gbd_city_region_data[[index]], -contains('rate')) %>% mutate_if(is.factor, as.character)
gbd_city_region_data[[index]]$sex_age_cat <- paste(gbd_city_region_data[[index]]$sex, gbd_city_region_data[[index]]$age, sep = "_")
gbd_city_region_data[[index]] <- select(gbd_city_region_data[[index]], -c(age, sex, location))
suppressWarnings(names(gbd_city_region_data)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
index <- index + 1
}
View(gbd_loc_data_processed)
View(gbd_input)
tail(gbd_input, 100)
tail(gbd_input, 10)
tail(data_extracted, 10)
names\
names_non_cr
rm (list = ls())
