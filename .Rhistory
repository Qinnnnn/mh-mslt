### CHECK WHAT HAPPENEND WITH CITY REGIONS AND THATN INDEX IS THE SAME AS IN DISBAYES INPUT DATAFRAME2
disbayes_inputs_df$index <- paste(disbayes_inputs_df$sex_disease, disbayes_inputs_df$age_cat, disbayes_inputs_df$cityregion, sep = "_")
## Second data set with num and denom
disbayes_inputs_df2 <- do.call(rbind, disbayes_input_list2)
View(disbayes_inputs_df2)
unique(disbayes_inputs_df2$cityregion)
test <- filter(disbayes_input_list_city_regions_7, cityregions = "Northern Ireland")
test <- dplyr::filter(disbayes_input_list_city_regions_7, cityregions = "Northern Ireland")
test <- dplyr::filter(disbayes_input_list_city_regions_7, cityregions = `Northern Ireland`)
test <- dplyr::filter(disbayes_input_list_city_regions_7, cityregions == "scotland")
test <- dplyr::filter(disbayes_input_list_city_regions_7, cityregion == "Scotland")
View(test)
## Final data set to process in disbayes. Filter data by city region, disease and sex. COMPARE with saved data in rds
disbayes_inputs_latest <- disbayes_inputs_df %>%
left_join(disbayes_inputs_df2) %>%
separate(sex_disease, c("drop", "disease"))
disbayes_inputs_latest <- disbayes_inputs_latest[, !(colnames(disbayes_inputs_latest) %in% c("drop","index"))]
names(disbayes_inputs_latest)[names(disbayes_inputs_latest) == "age_cat"] <- "age"
View(disbayes_inputs_latest)
disbayes_inputs_df2 <-   disbayes_inputs_df2[ -c(1:2,3,5,12)
disbayes_inputs_df2 <-   disbayes_inputs_df2[ -c(1:2,3,5,12) ]
## Final data set to process in disbayes. Filter data by city region, disease and sex. COMPARE with saved data in rds
disbayes_inputs_latest <- disbayes_inputs_df %>%
left_join(disbayes_inputs_df2, by = "index") %>%
separate(sex_disease, c("drop", "disease"))
View(disbayes_inputs_latest)
## First data set rates
disbayes_inputs_df <- do.call(rbind, disbayes_input_list_city_regions)
View(disbayes_inputs_df)
## First data set rates
disbayes_inputs_df <- do.call(rbind, disbayes_input_list_city_regions)
View(disbayes_inputs_df)
### Some issue with disease column, which we do not need, to rbind to dataframe
disbayes_inputs_df <- lapply(disbayes_inputs_df, function(x) { x["disease"] <- NULL; x })
## First data set rates
disbayes_inputs_df <- do.call(rbind, disbayes_input_list_city_regions)
disbayes_inputs_df <- dplyr::bind_rows(disbayes_inputs_df)
View(disbayes_inputs_df)
### CHECK WHAT HAPPENEND WITH CITY REGIONS AND THATN INDEX IS THE SAME AS IN DISBAYES INPUT DATAFRAME2
disbayes_inputs_df$index <- paste(disbayes_inputs_df$sex_disease, disbayes_inputs_df$age_cat, disbayes_inputs_df$cityregion, sep = "_")
## Second list with num and denom
disbayes_inputs_df2 <- do.call(rbind, disbayes_input_list2)
View(disbayes_inputs_df2)
sapply(disbayes_inputs_df2, function(x) sum(is.na(x)))
test_NA <- dplyr::filter(disbayes_inputs_df2, num_prevalence == NA)
test_NA <- dplyr::filter(disbayes_inputs_df2, num_prevalence == "NA")
test_NA <- dplyr::filter(disbayes_inputs_df2, is.na(num_prevalence))
View(test)
View(disbayes_inputs_df2)
View(DISEASE_SHORT_NAMES)
disbayes_inputs_df2 <-   disbayes_inputs_df2[ -c(1:3,5,12) ]
## Final data set to process in disbayes. Filter data by city region, disease and sex. COMPARE with saved data in rds
disbayes_inputs_latest <- disbayes_inputs_df %>%
left_join(disbayes_inputs_df2, by = "index")
View(disbayes_inputs_latest)
disbayes_inputs_df$index <- paste(disbayes_inputs_df$sex_disease, disbayes_inputs_df$age_cat, disbayes_inputs_df$cityregion, sep = "_")
## Second list with num and denom
disbayes_inputs_df2 <- do.call(rbind, disbayes_input_list2)
disbayes_inputs_df2 <-   disbayes_inputs_df2[ -c(1:4,5,12) ]
## Final data set to process in disbayes. Filter data by city region, disease and sex. COMPARE with saved data in rds
disbayes_inputs_latest <- disbayes_inputs_df %>%
left_join(disbayes_inputs_df2, by = "index")
View(disbayes_inputs_latest)
unique(disbayes_inputs$index)
unique(disbayes_inputs_df2$index)
## Second list with num and denom
disbayes_inputs_df2 <- do.call(rbind, disbayes_input_list2)
unique(disbayes_inputs_df2$cityregion)
test <- dplyr::filter(disbayes_inputs_df2, cityregions `West Midlands`)
test <- dplyr::filter(disbayes_inputs_df2, cityregions ==`West Midlands`)
test <- dplyr::filter(disbayes_inputs_df2, cityregion ==`West Midlands`)
test <- dplyr::filter(disbayes_inputs_df2, cityregion ==`West Midlands`)
test <- dplyr::filter(disbayes_inputs_df2, cityregion =="West Midlands")
View(test)
### CHECK WHAT HAPPENEND WITH CITY REGIONS AND THATN INDEX IS THE SAME AS IN DISBAYES INPUT DATAFRAME2
disbayes_inputs_df$index <- tolower(paste(disbayes_inputs_df$sex_disease, disbayes_inputs_df$age_cat, disbayes_inputs_df$cityregion, sep = "_"))
## Second list with num and denom
disbayes_inputs_df2 <- do.call(rbind, disbayes_input_list2)
disbayes_inputs_df2 <-   disbayes_inputs_df2[ -c(1:4,5,12) ]
## Final data set to process in disbayes. Filter data by city region, disease and sex. COMPARE with saved data in rds
disbayes_inputs_latest <- disbayes_inputs_df %>%
left_join(disbayes_inputs_df2, by = "index")
disbayes_inputs_latest <- disbayes_inputs_latest[, !(colnames(disbayes_inputs_latest) %in% c("sex_index","index"))]
names(disbayes_inputs_latest)[names(disbayes_inputs_latest) == "age_cat"] <- "age"
View(disbayes_inputs_latest)
sapply(disbayes_inputs_df2, function(x) sum(is.na(x)))
write_rds(disbayes_inputs_latest, paste0(relative_path_mslt, "data/city regions/Input disbayes/disbayes_inputs_new", ".rds"))
disbayes_inputs_latest <- disbayes_inputs_latest[, !(colnames(disbayes_inputs_latest) %in% c("sex_index","index", "sex_disease"))]
names(disbayes_inputs_latest)[names(disbayes_inputs_latest) == "age_cat"] <- "age"
write_rds(disbayes_inputs_latest, paste0(relative_path_mslt, "data/city regions/Input disbayes/disbayes_inputs_new", ".rds"))
gbd_data <- plyr::ldply(gbd_city_region_data_agg, rbind)
gbd_data$area <- gbd_data$.id
unique(disbayes_inputs_latest$disease)
NAs <- DF[rowSums(is.na(disbayes_inputs_latest)) > 0,]
NAs <- disbayes_inputs_latest[rowSums(is.na(disbayes_inputs_latest)) > 0,]
View(NAs)
unique(NAs$disease)
unique(NAs$cityregion)
View(disbayes_input_list2)
View(disbayes_input_list_city_regions_3)
index <- 1
disbayes_input_list_city_regions_3b <- list()
for (i in 1:length(disbayes_input_list_city_regions_3)) {
if(NCOL(disbayes_input_list_city_regions_3[[i]]) != as.numeric(4)) {}
else{
disbayes_input_list_city_regions_3b[[index]] <- disbayes_input_list_city_regions_3[[i]]
}
index <- index + 1
}
disbayes_input_list_city_regions_3b <-  list.clean(disbayes_input_list_city_regions_3b, fun = is.null, recursive = TRUE)
disbayes_input_list_city_regions_4 <- disbayes_input_list_city_regions_3b %>% lapply(as.data.frame) %>% bind_rows() %>% group_by(indexagg)
disbayes_input_list_city_regions_5 <- disbayes_input_list_city_regions_4 %>% summarise_all(funs(sum))
NAs_test1 <- disbayes_input_list_city_regions_5[rowSums(is.na(disbayes_input_list_city_regions_5)) > 0,]
disbayes_input_list_city_regions_6 <- disbayes_input_list_city_regions_5 %>%
mutate(index = indexagg) %>%
separate(indexagg, into=c("measure", "disease", "sex", "age", "cityregion"), sep = "_")
NAs_test2 <- disbayes_input_list_city_regions_6[rowSums(is.na(disbayes_input_list_city_regions_6)) > 0,]
disbayes_input_list_city_regions_6$agegr <- 0
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="Under 5"] <- 0
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="5 to 9"] <- 5
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="10 to 14"] <- 10
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="15 to 19"] <- 15
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="20 to 24"] <- 20
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="25 to 29"] <- 25
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="30 to 34"] <- 30
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="35 to 39"] <- 35
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="40 to 44"] <- 40
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="45 to 49"] <- 45
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="50 to 54"] <- 50
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="55 to 59"] <- 55
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="60 to 64"] <- 60
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="65 to 69"] <- 65
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="70 to 74"] <- 70
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="75 to 79"] <- 75
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="80 to 84"] <- 80
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="85 to 89"] <- 85
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="90 to 94"] <- 90
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="95 plus"] <- 95
city_regions_names <- unique(disbayes_input_list_city_regions_6$cityregion)
disease_disbayes <- unique(disbayes_input_list_city_regions_6$disease)
measure_disbayes <- unique(disbayes_input_list_city_regions_6$measure)
sex_disbayes <- unique(disbayes_input_list_city_regions_6$sex)
disbayes_input_list_city_regions_7 <- disbayes_input_list_city_regions_6 %>%
pivot_wider(id_cols = c(agegr, sex, population_number, cityregion, measure, disease),
names_from = measure, values_from = c(num, denom))
NAs_test3 <- disbayes_input_list_city_regions_7[rowSums(is.na(disbayes_input_list_city_regions_7)) > 0,]
View(test_NA)
View(disbayes_input_list_city_regions_4)
View(disbayes_input_list_city_regions_3b)
View(disbayes_input_list_city_regions_5)
View(disbayes_input_list_city_regions_6)
test2 <- dplyr::filter(disbayes_input_list_city_regions_6, measure == "prevalence")
View(test2)
test2 <- dplyr::filter(disbayes_input_list_city_regions_6, measure == "prevalence", disease == "strk")
View(test2)
test2 <- dplyr::filter(disbayes_input_list_city_regions_6, measure == "prevalence", disease == "dmt2")
View(test2)
View(disbayes_input_list_city_regions_6)
disbayes_input_list_city_regions_7 <- disbayes_input_list_city_regions_6 %>%
pivot_wider(id_cols = c(measure, disease, sex, age, cityregion, population_number, agegr),
names_from = measure, values_from = c(num, denom))
NAs_test3 <- disbayes_input_list_city_regions_7[rowSums(is.na(disbayes_input_list_city_regions_7)) > 0,]
View(NAs_test3)
unique(NAs_test3$disease)
disbayes_input_list_city_regions_3b <-  list.clean(disbayes_input_list_city_regions_3b, fun = is.null, recursive = TRUE)
disbayes_input_list_city_regions_4 <- disbayes_input_list_city_regions_3b %>% lapply(as.data.frame) %>% bind_rows() %>% group_by(indexagg)
### Old, does not work, replaced by code above
# disbayes_input_list_city_regions_4 <- dplyr::ldply(disbayes_input_list_city_regions_3b, rbind) %>% group_by(indexagg)
disbayes_input_list_city_regions_5 <- disbayes_input_list_city_regions_4 %>% summarise_all(funs(sum))
#### Check NAs
NAs_test1 <- disbayes_input_list_city_regions_5[rowSums(is.na(disbayes_input_list_city_regions_5)) > 0,]
# disbayes_input_list_city_regions_5$indexagg <- gsub("'", '', disbayes_input_list_city_regions_5$indexagg)
disbayes_input_list_city_regions_6 <- disbayes_input_list_city_regions_5 %>%
mutate(index = indexagg) %>%
separate(indexagg, into=c("measure", "disease", "sex", "age", "cityregion"), sep = "_")
# mutate_if(is.character)%>%
NAs_test2 <- disbayes_input_list_city_regions_6[rowSums(is.na(disbayes_input_list_city_regions_6)) > 0,]
## Add new variable with mid-age group
disbayes_input_list_city_regions_6$agegr <- 0
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="Under 5"] <- 0
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="5 to 9"] <- 5
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="10 to 14"] <- 10
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="15 to 19"] <- 15
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="20 to 24"] <- 20
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="25 to 29"] <- 25
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="30 to 34"] <- 30
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="35 to 39"] <- 35
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="40 to 44"] <- 40
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="45 to 49"] <- 45
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="50 to 54"] <- 50
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="55 to 59"] <- 55
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="60 to 64"] <- 60
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="65 to 69"] <- 65
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="70 to 74"] <- 70
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="75 to 79"] <- 75
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="80 to 84"] <- 80
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="85 to 89"] <- 85
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="90 to 94"] <- 90
disbayes_input_list_city_regions_6$agegr [ disbayes_input_list_city_regions_6$age =="95 plus"] <- 95
city_regions_names <- unique(disbayes_input_list_city_regions_6$cityregion)
disease_disbayes <- unique(disbayes_input_list_city_regions_6$disease)
measure_disbayes <- unique(disbayes_input_list_city_regions_6$measure)
sex_disbayes <- unique(disbayes_input_list_city_regions_6$sex)
## To wider
disbayes_input_list_city_regions_7 <- disbayes_input_list_city_regions_6 %>%
pivot_wider(id_cols = c(measure, disease, sex, age, cityregion, population_number, agegr),
names_from = measure, values_from = c(num, denom))
NAs_test3 <- disbayes_input_list_city_regions_7[rowSums(is.na(disbayes_input_list_city_regions_7)) > 0,]
unique(disbayes_input_list_city_regions_6$measure
unique(disbayes_input_list_city_regions_6$measure)
unique(disbayes_input_list_city_regions_6$measure)
unique(disbayes_input_list_city_regions_6$disease)
disbayes_input_list_city_regions_7 <- disbayes_input_list_city_regions_6 %>%
pivot_wider(id_cols = c(measure, disease, sex, age, cityregion, population_number, agegr),
names_from = measure, values_from = c(num, denom))
NAs_test3 <- disbayes_input_list_city_regions_7[rowSums(is.na(disbayes_input_list_city_regions_7)) > 0,]
## Create R Markdown for data preparation
# ---- chunk-intro ----
rm (list = ls())
options(scipen=999)
library(readr)
library(rlist)
library(dplyr)
library(tidyverse)
library(conflicted)
library(tidyr)
library(devtools)
library(disbayes)
## set wd
setwd("C:/Metahit/")
## Relative paths
relative_path_execute <- paste0(getwd(), '/mh-execute/')
relative_path_mslt <- paste0(getwd(),'/mh-mslt/')
##get funcions
source(paste0(relative_path_mslt,'code/DATA_PREP_functions.R'))
# ---- chunk-1: Data preparation MSLT data inputs ----
## Get look up table from mh-execute
look_up_table <- read_csv(paste0(relative_path_execute, '/inputs/mh_regions_lad_lookup.csv'))
## Dataframe with local goverment areas within each city region
local_goverment_areas <- look_up_table
## Add non city regions names (useful for checking totals)
names_non_cr <- c("United Kingdom", "England", "East Midlands", "East of England", "Greater London", "North East England",
'North West England', "South East England", "South West England", "West Midlands", "Yorkshire and the Humber",
"Northern Ireland", "Scotland", "Wales")
for (i in names_non_cr){
local_goverment_areas <- rbind(local_goverment_areas, c(i, i, i, i, i))
}
local_goverment_areas <-  local_goverment_areas %>% dplyr::filter(cityregion != "")
names(local_goverment_areas)[names(local_goverment_areas) == "lad11nm"] <- "location"
local_goverment_areas$location <- gsub('St. Helens', 'St Helens', local_goverment_areas$location)
city_regions <- split(local_goverment_areas$location, f = local_goverment_areas$cityregion)
# ---- chunk-1.1: Get Global Burden of Disease data ----
## GBD MISSING DATA FOR NOTTINGHAM: Ashfield, Bassetlaw, Broxtowe, Gedling, Mansfield, Newark and Sherwood, Rushcliffe and City of London.
work_folder <- "C:/Users/e95517/Dropbox/"
r_user_folder <- "C:/Users/rstudio/Dropbox/"
v_folder <- "V:/Studies/MOVED/HealthImpact/Data/Global_Burden_Disease_Metahit/"
## Change folder to work or home
# CHANGE DATA FOLDER
data_folder <- paste0(r_user_folder, "Collaborations/James Woodcock/Metahit/Data/GBD2017/")
temp_folder <- paste0(data_folder,"temp")
result_folder <- paste0(data_folder,"final")
gbdfile_name_new <- "IHME-GBD_2017_DATA-3e0b192d-" # CHANGE NAME WHEN NEW DATA IS DOWNLOADED
gbdfile_name_old <- "IHME-GBD_2017_DATA-ac95a757-" # CHANGE NAME WHEN NEW DATA IS DOWNLOADED
data_extracted <- NULL
for (i in 1:5) { # LOOP NUMBER DEPENDS ON NUMBER OF ZIP FILES, HERE I JUST GOT DATA FOR ALL LOCALITIES IN ENGLAND
file_number <- i
file_select <- paste0(data_folder,gbdfile_name_new, i,".zip")
unzip(file_select, exdir=temp_folder)
data_read <- read_csv((paste0(temp_folder,"/", gbdfile_name_new, i, ".csv")))
file.remove(paste0(temp_folder,"/", gbdfile_name_new, i, ".csv"))
data_read <- subset(data_read, location_name %in% local_goverment_areas$location) # location name is easier to identify
data_extracted <- rbind(data_extracted, data_read)
}
unlink(paste0(temp_folder), recursive = TRUE)
# ---- chunk-1.2: Define parameters from data ----
### Cause (e.g. diabetes, all cause)
DISEASE_SHORT_NAMES <- data.frame(disease = tolower(as.character(unique(data_extracted$cause_name))),
sname = tolower(abbreviate(unique(data_extracted$cause_name, max = 2))),
stringsAsFactors = F)
DISEASE_SHORT_NAMES <- DISEASE_SHORT_NAMES %>% mutate(is_not_dis = ifelse((str_detect(disease, "injuries") |
str_detect(disease, "All causes") |
str_detect(disease, "Lower respiratory infections")),
1, 0) )
DISEASE_SHORT_NAMES[DISEASE_SHORT_NAMES$sname == "allc", "is_not_dis"] <- 2
DISEASE_SHORT_NAMES[DISEASE_SHORT_NAMES$sname == "lwri", "is_not_dis"] <- 1
### Code for major depresive disorder (no deaths) and hypertensive heart disease (no incidence)
DISEASE_SHORT_NAMES[DISEASE_SHORT_NAMES$sname == "hyhd", "is_not_dis"] <- 3
DISEASE_SHORT_NAMES[DISEASE_SHORT_NAMES$sname == "mjdd", "is_not_dis"] <- 3
### Combine with acronyms from execute-mh
## Get execute-mh diseases
disease_names_execute <- read_csv(paste0(relative_path_execute, "inputs/dose_response/disease_outcomes_lookup.csv"))
disease_names_execute <- disease_names_execute[1:2]
disease_names_execute$disease <- tolower(disease_names_execute$GBD_name)
DISEASE_SHORT_NAMES <- left_join(DISEASE_SHORT_NAMES, disease_names_execute, by = "disease")
## Add injuries
DISEASE_SHORT_NAMES$acronym <- ifelse(str_detect(DISEASE_SHORT_NAMES$disease, "injuries"), DISEASE_SHORT_NAMES$disease, DISEASE_SHORT_NAMES$acronym)
## Only keep first word for acronyns
DISEASE_SHORT_NAMES$acronym <- word(DISEASE_SHORT_NAMES$acronym, 1)
## Add males and females only diseases
DISEASE_SHORT_NAMES$males <- ifelse(DISEASE_SHORT_NAMES$disease %in% c("breast cancer", "uterine cancer"), 0, 1)
DISEASE_SHORT_NAMES$females <- ifelse(DISEASE_SHORT_NAMES$disease %in% c("prostate cancer"), 0, 1)
DISEASE_SHORT_NAMES$sname <- gsub("'", '', DISEASE_SHORT_NAMES$sname)
## Replace NAs with blank
DISEASE_SHORT_NAMES$acronym[is.na(DISEASE_SHORT_NAMES$acronym)] <- "no_pif"
## Add column to match names from mh-execute
### Saving, but not required
write_csv(DISEASE_SHORT_NAMES, paste0(relative_path_mslt,"data/parameters/disease_names.csv"))
### Measure (e.g. deaths, prevalence)
disease_measures_list <- data.frame(measure = unique(data_extracted$measure_name)) %>%
pull(measure) %>%
as.character() %>%
as.list()
# ---- chunk-1.3: Clean data ----
names(data_extracted) = gsub(pattern = "_name", replacement = "", x = names(data_extracted))
data_extracted <- select(data_extracted,-contains("id"))
data_extracted$cause <- tolower(data_extracted$cause)
data_extracted <- left_join(local_goverment_areas, data_extracted, by = "location")
# ---- chunk-1.4: Sort data per local goverment area ----
## We first derive population and cases numbers (e.g. all cause mortality) for each locality and then aggregate at the City Region level.
city_regions_list_loc <- split(data_extracted , f = data_extracted$cityregion)
city_regions_list <- split(data_extracted , f = data_extracted$cityregion)
city_regions_list_loc <- list()
for (i in 1:length(city_regions_list)){
city_regions_list_loc[[i]] <- split(city_regions_list[[i]], f = city_regions_list[[i]]$location)
}
### This code takes about 2hs hours to run
### some help to make it more efficient.
index <- 1
gbd_loc_data_processed <- list()
for (i in 1:length(city_regions_list_loc)) {
gbd_loc_data_processed[[index]] <- lapply(city_regions_list_loc[[i]], RunLocDf)
index <- index + 1
}
### Delete null data frames within lists
gbd_loc_data_processed <-  list.clean(gbd_loc_data_processed, fun = is.null, recursive = TRUE)
# ---- chunk-1.5: Create data frame for city region with all localities ----
#### Input for Ci2Num dataframe
index <- 1
gbd_city_region_data <- list()
for (i in 1:length(gbd_loc_data_processed)){
gbd_city_region_data[[index]] <- bind_rows(gbd_loc_data_processed[[i]])
## Drop number columns (CHECK WHAT THIS IS DOING)
#
#    gbd_city_region_data[[index]] <- gbd_city_region_data[[index]][ -c(1) ]
## Clean dataframes per city regions
gbd_city_region_data[[index]] <- dplyr::select(gbd_city_region_data[[index]], -contains('rate')) %>% mutate_if(is.factor, as.character)
gbd_city_region_data[[index]]$sex_age_cat <- paste(gbd_city_region_data[[index]]$sex, gbd_city_region_data[[index]]$age, sep = "_")
gbd_city_region_data[[index]] <- select(gbd_city_region_data[[index]], -c(age, sex))
### Add city region name here
suppressWarnings(names(gbd_city_region_data)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
gbd_city_region_data[[index]]$cityregion <- names(gbd_city_region_data)[index]
index <- index + 1
}
#### What follows are additional steps to generate data for GenInputDisbayes
### BElen check why you are doing this step
gbd_city_region_data_2 <- list()
for (i in 1:length(gbd_city_region_data)) {
gbd_city_region_data_2[[i]] <- gbd_city_region_data[[i]]
#[ -c(1,3) ]
}
### This is the input for GenInputDisbayes
gbd_city_region_data_agg <- list()
index <- 1
### Loop to generate aggregated data
for (i in 1:length(gbd_city_region_data_2)) {
gbd_city_region_data_agg[[index]] <- gbd_city_region_data_2[[i]] %>%
group_by(sex_age_cat) %>%
summarise_all(funs(if(is.numeric(.)) sum(., na.rm = TRUE) else first(.)))%>%
separate(sex_age_cat, c("sex", "age"), "_")
## Add numberical age categories
gbd_city_region_data_agg[[index]]$age_cat <- 0
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="Under 5"] <- 2
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="5 to 9"] <- 7
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="10 to 14"] <- 12
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="15 to 19"] <- 17
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="20 to 24"] <- 22
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="25 to 29"] <- 27
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="30 to 34"] <- 32
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="35 to 39"] <- 37
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="40 to 44"] <- 42
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="45 to 49"] <- 47
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="50 to 54"] <- 52
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="55 to 59"] <- 57
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="60 to 64"] <- 62
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="65 to 69"] <- 67
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="70 to 74"] <- 72
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="75 to 79"] <- 77
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="80 to 84"] <- 82
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="85 to 89"] <- 87
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="90 to 94"] <- 92
gbd_city_region_data_agg[[index]]$age_cat [ gbd_city_region_data_agg[[index]]$age =="95 plus"] <- 97
## Change sex variable to lower case
gbd_city_region_data_agg[[index]]$sex <- tolower(gbd_city_region_data_agg[[index]]$sex)
## Create age_sex category
gbd_city_region_data_agg[[index]]$sex_age_cat <- paste(gbd_city_region_data_agg[[index]]$sex,gbd_city_region_data_agg[[index]]$age_cat, sep = "_"  )
## Order data
gbd_city_region_data_agg[[index]] <- gbd_city_region_data_agg[[index]][order(gbd_city_region_data_agg[[index]]$sex, gbd_city_region_data_agg[[index]]$age_cat),]
suppressWarnings(names(gbd_city_region_data_agg)[index] <- paste(city_regions_list_loc[[i]][[1]]$cityregion, sep = '_'))
### Calculate rates per one. Needed for mslt_code (exclude major depresive disorders (no deaths) and hyoertensive heart disease (no incidence))
for (d in 1:nrow(DISEASE_SHORT_NAMES)){
for (dm in 1:length(disease_measures_list)){
# dn <- DISEASE_SHORT_NAMES$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character() %>% tolower
if (DISEASE_SHORT_NAMES$is_not_dis[d] == 3){
}
else{
var_rate <- c(paste(tolower(paste(dmeasure, "rate", DISEASE_SHORT_NAMES$sname[d], sep = "_"))))
var_med <- c(paste(tolower(paste(dmeasure, "med", DISEASE_SHORT_NAMES$sname[d], sep = "_"))))
gbd_city_region_data_agg[[index]][[var_rate]] <- gbd_city_region_data_agg[[index]][[var_med]] /
gbd_city_region_data_agg[[index]]$population_number
}
}
}
index <- index + 1
}
# ---- chunk-1.6: Disbayes input generation ----
### The generations of inputs has two main sections and needs the above code to be ran first.
### Sections main functions: GenInputDisbayes (generates inc, mort, prev rates per one and prevdenom, remission is set to 0) and Ci2NumDF which generates
### num and denom for each of the localities for incidence, prevalence and mortality (later code sums localities into city regions)
### parameters
i_sex <- c('male', 'female')
# ---- chunk-1.6.1: GenInputDisbayes ----
### GenInputsDIsbayes: generates a data frame per city regions (and regions of England and countries in the UK) expanding 5-year estimates and values into
### one year intervals assuming that 5-yr age population is evenly distributed for each 1-yr within the interval and rates of dieseses are the same within the year
### interval.
index <- 1
disbayes_input_list_city_regions <- list()
for (i in 1:length(gbd_city_region_data_agg)) {
disbayes_input_list_city_regions[[index]] <- GenInpDisbayes(gbd_city_region_data_agg[[i]])
names(disbayes_input_list_city_regions)[index] <- paste0(names(gbd_city_region_data_agg[i]))
index <- index + 1
}
for (i in 1:length(disbayes_input_list_city_regions)){
for (j in 1:length(disbayes_input_list_city_regions[[i]])) {
disbayes_input_list_city_regions[[i]][[j]]$cityregion <- paste(names(disbayes_input_list_city_regions[i]))
}
}
disbayes_input_list_city_regions_2 <- list()
index <- 1
for (i in 1:length(gbd_city_region_data)) {
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(DISEASE_SHORT_NAMES)){
in_measure <- disease_measures_list[dm] %>% as.character() %>% tolower()
### exclude ylds for now, we are interested in disbayes inputs but later may use ylds uncertainty parameters
if (DISEASE_SHORT_NAMES$is_not_dis[d] != 0 || in_measure == "ylds (years lived with disability)"){
}
else {
med <- paste0(in_measure, "_med_", DISEASE_SHORT_NAMES$sname[d])
low <- paste0(in_measure, "_lower95_", DISEASE_SHORT_NAMES$sname[d])
upper <- paste0(in_measure, "_upper95_", DISEASE_SHORT_NAMES$sname[d])
## These data is in 5-year age groups.
data <- gbd_city_region_data[[i]]
disbayes_input_list_city_regions_2[[index]] <- dplyr::select(data, population_number, cityregion, location, sex_age_cat, med, low, upper)
##### CHRIS, ARE THE FOLLOWING CORRECT? POINT ESTIMATES AND CREDIBLE LIMITS AS RATES PER ONE?
disbayes_input_list_city_regions_2[[index]]$est <- disbayes_input_list_city_regions_2[[index]][[med]]/disbayes_input_list_city_regions_2[[index]][[1]]
disbayes_input_list_city_regions_2[[index]]$lower <- disbayes_input_list_city_regions_2[[index]][[low]]/disbayes_input_list_city_regions_2[[index]][[1]]
disbayes_input_list_city_regions_2[[index]]$upper <- disbayes_input_list_city_regions_2[[index]][[upper]]/disbayes_input_list_city_regions_2[[index]][[1]]
disbayes_input_list_city_regions_2[[index]]$index <- paste(in_measure, DISEASE_SHORT_NAMES$sname[d], sep = "_")
disbayes_input_list_city_regions_2[[index]]$indexagg <- paste(disbayes_input_list_city_regions_2[[index]]$index, disbayes_input_list_city_regions_2[[index]]$sex_age_cat,
disbayes_input_list_city_regions_2[[index]]$cityregion, sep = "_")
## Separate age and sex and
suppressWarnings(names(disbayes_input_list_city_regions_2)[index] <- paste(gbd_city_region_data[[i]]$cityregion,in_measure, DISEASE_SHORT_NAMES$sname[d], sep = '_'))
index <- index + 1
}
}
}
}
test <- Ci2NumDF(disbayes_input_list_city_regions_2[[1]])
disbayes:::ci2num(disbayes_input_list_city_regions_2[[1]]$deaths_med_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_upper95_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_lower95_espc/disbayes_input_list_city_regions_2[[1]]$population_number )
disbayes:::ci2num(disbayes_input_list_city_regions_2[[1]]$deaths_med_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_lower95_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_upper95_espc/disbayes_input_list_city_regions_2[[1]]$population_number )
disbayes:::ci2num(disbayes_input_list_city_regions_2[[1]]$deaths_med_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_lower95_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_upper95_espc/disbayes_input_list_city_regions_2[[1]]$population_number)
disbayes:::ci2num(disbayes_input_list_city_regions_2[[1]]$deaths_med_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_lower95_espc/disbayes_input_list_city_regions_2[[1]]$population_number, disbayes_input_list_city_regions_2[[1]]$deaths_upper95_espc/disbayes_input_list_city_regions_2[[1]]$population_number)
disbayes:::ci2num(disbayes_input_list_city_regions_2[[1]]$est, disbayes_input_list_city_regions_2[[1]]$lower, disbayes_input_list_city_regions_2[[1]]$upper)
View(test)
Ci2NumDF <- function(in_data) {
dataframe <- dplyr::select(in_data, population_number, est, lower, upper, sex_age_cat, cityregion, indexagg)  %>%
dplyr::select(a=population_number,b= est,c= lower,d=upper, e= sex_age_cat, f=cityregion, h=indexagg) %>%
rowwise() %>%
# browser()
# mutate(num=ifelse(b==0,0,disbayes:::ci2num(b/a,c/a,d/a)[[1]])) %>%
# mutate(denom=ifelse(b==0,0,disbayes:::ci2num(b/a,c/a,d/a)[[2]])) %>%
mutate(num=ifelse(b==0,0,disbayes:::ci2num(b,c,d)[[1]])) %>%
mutate(denom=ifelse(b==0,0,disbayes:::ci2num(b,c,d)[[2]])) %>%
mutate(population_number = a) %>%
mutate(sex_age_cat = e) %>%
mutate(cityregion = f) %>%
mutate(indexagg = h) %>%
dplyr::select(population_number, indexagg, num, denom, est, lower, upper) %>%
as.data.frame()
}
test <- Ci2NumDF(disbayes_input_list_city_regions_2[[1]])
Ci2NumDF <- function(in_data) {
dataframe <- dplyr::select(in_data, population_number, est, lower, upper, sex_age_cat, cityregion, indexagg)  %>%
#
# dplyr::select(a=population_number,b= est,c= lower,d=upper, e= sex_age_cat, f=cityregion, h=indexagg) %>%
rowwise() %>%
# browser()
# mutate(num=ifelse(b==0,0,disbayes:::ci2num(b/a,c/a,d/a)[[1]])) %>%
# mutate(denom=ifelse(b==0,0,disbayes:::ci2num(b/a,c/a,d/a)[[2]])) %>%
mutate(num=ifelse(est==0,0,disbayes:::ci2num(est,lower, upper)[[1]])) %>%
mutate(denom=ifelse(est==0,0,disbayes:::ci2num(est,lower, upper)[[2]])) %>%
#
# mutate(population_number = a) %>%
# mutate(sex_age_cat = e) %>%
# mutate(cityregion = f) %>%
# mutate(indexagg = h) %>%
dplyr::select(population_number, indexagg, num, denom, est, lower, upper) %>%
as.data.frame()
}
test <- Ci2NumDF(disbayes_input_list_city_regions_2[[1]])
View(disbayes_input_list_city_regions_2)
source('C:/Metahit/mh-mslt/code/dataprep.R')
