scale_color_discrete(name = paste(''), labels = c('Baseline', 'Difference', 'Scenario')) +
theme(plot.title = element_text(hjust = 0.5))
print(p_aggr_females_d_list)
dev.off()
# p_aggr_females_list <- p_aggr_list_index
# index <- index + 1
#
}
}
}
p_aggr_females_nd_list <- list()
index <- 1
for (ioutcome in i_outcome_nd) {
for (d in 1:nrow(DISEASE_SHORT_NAMES)) {
if (DISEASE_SHORT_NAMES$is_not_dis[d] != 1 || DISEASE_SHORT_NAMES$acronym[d] == 'other' || DISEASE_SHORT_NAMES$acronym[d] == 'no_pif'){
}
else {
pdf(paste0(output_dir, 'total_', DISEASE_SHORT_NAMES$acronym[d],'_', 'female', '_', ioutcome, '.pdf'),width=5.5,height=4)
p_aggr_females_nd_list <- ggplot(aggregate_females_df[1:84,], aes(x = aggregate_females_df[['simulation_yr']])) +
geom_line(mapping = aes(y = aggregate_females_df[[paste('total', ioutcome, 'num_bl', DISEASE_SHORT_NAMES$acronym[d], sep = '_')]], colour = paste('total', ioutcome, 'num_bl', DISEASE_SHORT_NAMES$acronym[d], sep = '_'))) +
theme_classic() +
geom_hline(yintercept=0, linetype='dashed', color = 'black') +
geom_line(mapping = aes(y = aggregate_females_df[[paste('total', ioutcome, 'num_sc', DISEASE_SHORT_NAMES$acronym[d], sep = '_')]], colour = paste('total', ioutcome, 'num_sc', DISEASE_SHORT_NAMES$acronym[d], sep = '_'))) +
geom_line(mapping = aes(y = aggregate_females_df[[paste('total', ioutcome, 'num_diff', DISEASE_SHORT_NAMES$acronym[d], sep = '_')]], colour = paste('total', ioutcome, 'num_diff', DISEASE_SHORT_NAMES$acronym[d], sep = '_'))) +
xlab ('Simulation years') + ylab ('Cases') + labs (title = paste(DISEASE_SHORT_NAMES$disease[d], ifelse(ioutcome == 'inc', 'incidence', 'deaths'))) +
theme(plot.title = element_text(hjust = 0.5, size = 12)) +
scale_color_discrete(name = paste(''), labels = c('Baseline', 'Difference', 'Scenario')) +
theme(plot.title = element_text(hjust = 0.5))
print(p_aggr_females_nd_list)
dev.off()
# p_aggr_females_list <- p_aggr_list_index
# index <- index + 1
#
}
}
}
p_aggr_males_d_list <- list()
index <- 1
for (ioutcome in i_outcome_d) {
for (d in 1:nrow(DISEASE_SHORT_NAMES)) {
if (isex == 'male' && (DISEASE_SHORT_NAMES$disease[d] %in% c('breast cancer', 'uterine cancer'))
|| DISEASE_SHORT_NAMES$acronym[d] == 'no_pif' || DISEASE_SHORT_NAMES$acronym[d] == 'other' || DISEASE_SHORT_NAMES$is_not_dis[d] !=0){
}
else{
pdf(paste0(output_dir, 'total_', DISEASE_SHORT_NAMES$sname[d],'_', 'female', '_', ioutcome, '.pdf'),width=5.5,height=4)
p_aggr_males_d_list <- ggplot(aggregate_males_df[1:84,], aes(x = aggregate_males_df[['simulation_yr']])) +
geom_line(mapping = aes(y = aggregate_males_df[[paste('total', ioutcome, 'num_bl', DISEASE_SHORT_NAMES$sname[d], sep = '_')]], colour = paste('total', ioutcome, 'num_bl', DISEASE_SHORT_NAMES$sname[d], sep = '_'))) +
theme_classic() +
geom_hline(yintercept=0, linetype='dashed', color = 'black') +
geom_line(mapping = aes(y = aggregate_males_df[[paste('total', ioutcome, 'num_sc', DISEASE_SHORT_NAMES$sname[d], sep = '_')]], colour = paste('total', ioutcome, 'num_sc', DISEASE_SHORT_NAMES$sname[d], sep = '_'))) +
geom_line(mapping = aes(y = aggregate_males_df[[paste('total', ioutcome, 'num_diff', DISEASE_SHORT_NAMES$sname[d], sep = '_')]], colour = paste('total', ioutcome, 'num_diff', DISEASE_SHORT_NAMES$sname[d], sep = '_'))) +
xlab ('Simulation years') + ylab ('Cases') + labs (title = paste(DISEASE_SHORT_NAMES$disease[d], ifelse(ioutcome == 'inc', 'incidence', 'deaths'))) +
theme(plot.title = element_text(hjust = 0.5, size = 12)) +
scale_color_discrete(name = paste(''), labels = c('Baseline', 'Difference', 'Scenario')) +
theme(plot.title = element_text(hjust = 0.5))
print(p_aggr_males_d_list)
dev.off()
# p_aggr_males_list <- p_aggr_list_index
# index <- index + 1
#
}
}
}
### Males-non_diseases
p_aggr_males_nd_list <- list()
index <- 1
for (ioutcome in i_outcome_nd) {
for (d in 1:nrow(DISEASE_SHORT_NAMES)) {
if (DISEASE_SHORT_NAMES$is_not_dis[d] != 1 || DISEASE_SHORT_NAMES$acronym[d] == 'other' || DISEASE_SHORT_NAMES$acronym[d] == 'no_pif'){
}
else {
pdf(paste0(output_dir, 'total_', DISEASE_SHORT_NAMES$acronym[d],'_', 'female', '_', ioutcome, '.pdf'),width=5.5,height=4)
p_aggr_males_nd_list <- ggplot(aggregate_males_df[1:84,], aes(x = aggregate_males_df[['simulation_yr']])) +
geom_line(mapping = aes(y = aggregate_males_df[[paste('total', ioutcome, 'num_bl', DISEASE_SHORT_NAMES$acronym[d], sep = '_')]], colour = paste('total', ioutcome, 'num_bl', DISEASE_SHORT_NAMES$acronym[d], sep = '_'))) +
theme_classic() +
geom_hline(yintercept=0, linetype='dashed', color = 'black') +
geom_line(mapping = aes(y = aggregate_males_df[[paste('total', ioutcome, 'num_sc', DISEASE_SHORT_NAMES$acronym[d], sep = '_')]], colour = paste('total', ioutcome, 'num_sc', DISEASE_SHORT_NAMES$acronym[d], sep = '_'))) +
geom_line(mapping = aes(y = aggregate_males_df[[paste('total', ioutcome, 'num_diff', DISEASE_SHORT_NAMES$acronym[d], sep = '_')]], colour = paste('total', ioutcome, 'num_diff', DISEASE_SHORT_NAMES$acronym[d], sep = '_'))) +
xlab ('Simulation years') + ylab ('Cases') + labs (title = paste(DISEASE_SHORT_NAMES$disease[d], ifelse(ioutcome == 'inc', 'incidence', 'deaths'))) +
theme(plot.title = element_text(hjust = 0.5, size = 12)) +
scale_color_discrete(name = paste(''), labels = c('Baseline', 'Difference', 'Scenario')) +
theme(plot.title = element_text(hjust = 0.5))
print(p_aggr_males_nd_list)
dev.off()
# p_aggr_males_list <- p_aggr_list_index
# index <- index + 1
#
}
}
}
total_aggr <- cbind.data.frame(total_aggr1, total_aggr2)
total_aggr$sim_year <- seq.int(nrow(total_aggr))
## Uncomment to see total data frame
View(total_aggr)
## Test that total_aggr is adding males and females dataframes
#
# (aggregate_frame_females2$Lx.Lx_bl_22 + aggregate_frame_males2$Lx.Lx_bl_22) -total_aggr$Lx.Lx_bl_22
p_aggr_list <- list()
index <- 1
for (outcome in i_outcome) {
for (disease in i_disease) {
# outcome <- i_outcome[1]
# disease <- i_disease[1]
p_aggr_list_index <- ggplot(total_aggr[1:79,], aes(x = total_aggr[['sim_year']])) +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_bl', disease, sep = '_')]], colour = paste('total', outcome, 'num_bl', disease, sep = '_'))) +
theme_classic() +
geom_hline(yintercept=0, linetype='dashed', color = 'black') +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_sc', disease, sep = '_')]], colour = paste('total', outcome, 'num_sc', disease, sep = '_'))) +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_diff', disease, sep = '_')]], colour = paste('total', outcome, 'num_diff', disease, sep = '_'))) +
xlab ('Simulation years') + ylab ('Cases') + labs (title = paste(disease, outcome)) +
theme(plot.title = element_text(hjust = 0.5, size = 12)) +
scale_color_discrete(name = paste(''), labels = c('Baseline', 'Difference', 'Scenario')) +
theme(plot.title = element_text(hjust = 0.5))
p_aggr_list[[index]] <- p_aggr_list_index
index <- index + 1
}
}
index <- 1
interpolation_index <- 1
for (outcome in i_outcome) {
for (disease in i_disease) {
file_name = paste('output/graphs', 'Aggregated Outcomes', outcome, disease, '.jpeg', sep=' ')
jpeg(file_name)
print(p_aggr_list[[index]])
index <- index + 1
dev.off()
}
}
p_aggregated <- do.call(marrangeGrob, list(grobs=p_aggr_list, nrow = 2, ncol = 2))
p_aggregated
names(output_df)
p_aggr_females_d_list <- list()
index <- 1
for (ioutcome in i_outcome_d) {
for (d in 1:nrow(DISEASE_SHORT_NAMES)) {
if (isex == 'male' && (DISEASE_SHORT_NAMES$disease[d] %in% c('breast cancer', 'uterine cancer'))
|| DISEASE_SHORT_NAMES$acronym[d] == 'no_pif' || DISEASE_SHORT_NAMES$acronym[d] == 'other' || DISEASE_SHORT_NAMES$is_not_dis[d] !=0){
}
else{
pdf(paste0(output_dir, 'total_', DISEASE_SHORT_NAMES$sname[d],'_', 'female', '_', ioutcome, '.pdf'),width=5.5,height=4)
p_aggr_females_d_list <- ggplot(aggregate_females_df[1:84,], aes(x = aggregate_females_df[['simulation_yr']])) +
geom_line(mapping = aes(y = aggregate_females_df[[paste('total', ioutcome, 'num_bl', DISEASE_SHORT_NAMES$sname[d], sep = '_')]], colour = paste('total', ioutcome, 'num_bl', DISEASE_SHORT_NAMES$sname[d], sep = '_'))) +
theme_classic() +
geom_hline(yintercept=0, linetype='dashed', color = 'black') +
geom_line(mapping = aes(y = aggregate_females_df[[paste('total', ioutcome, 'num_sc', DISEASE_SHORT_NAMES$sname[d], sep = '_')]], colour = paste('total', ioutcome, 'num_sc', DISEASE_SHORT_NAMES$sname[d], sep = '_'))) +
geom_line(mapping = aes(y = aggregate_females_df[[paste('total', ioutcome, 'num_diff', DISEASE_SHORT_NAMES$sname[d], sep = '_')]], colour = paste('total', ioutcome, 'num_diff', DISEASE_SHORT_NAMES$sname[d], sep = '_'))) +
xlab ('Simulation years') + ylab ('Cases') + labs (title = paste(DISEASE_SHORT_NAMES$disease[d], ifelse(ioutcome == 'inc', 'incidence', 'deaths'))) +
theme(plot.title = element_text(hjust = 0.5, size = 12)) +
scale_color_discrete(name = paste(''), labels = c('Baseline', 'Difference', 'Scenario')) +
theme(plot.title = element_text(hjust = 0.5))
print(p_aggr_females_d_list)
dev.off()
# p_aggr_females_list <- p_aggr_list_index
# index <- index + 1
#
}
}
}
p_aggr_females_nd_list <- list()
index <- 1
for (ioutcome in i_outcome_nd) {
for (d in 1:nrow(DISEASE_SHORT_NAMES)) {
if (DISEASE_SHORT_NAMES$is_not_dis[d] != 1 || DISEASE_SHORT_NAMES$acronym[d] == 'other' || DISEASE_SHORT_NAMES$acronym[d] == 'no_pif'){
}
else {
pdf(paste0(output_dir, 'total_', DISEASE_SHORT_NAMES$acronym[d],'_', 'female', '_', ioutcome, '.pdf'),width=5.5,height=4)
p_aggr_females_nd_list <- ggplot(aggregate_females_df[1:84,], aes(x = aggregate_females_df[['simulation_yr']])) +
geom_line(mapping = aes(y = aggregate_females_df[[paste('total', ioutcome, 'num_bl', DISEASE_SHORT_NAMES$acronym[d], sep = '_')]], colour = paste('total', ioutcome, 'num_bl', DISEASE_SHORT_NAMES$acronym[d], sep = '_'))) +
theme_classic() +
geom_hline(yintercept=0, linetype='dashed', color = 'black') +
geom_line(mapping = aes(y = aggregate_females_df[[paste('total', ioutcome, 'num_sc', DISEASE_SHORT_NAMES$acronym[d], sep = '_')]], colour = paste('total', ioutcome, 'num_sc', DISEASE_SHORT_NAMES$acronym[d], sep = '_'))) +
geom_line(mapping = aes(y = aggregate_females_df[[paste('total', ioutcome, 'num_diff', DISEASE_SHORT_NAMES$acronym[d], sep = '_')]], colour = paste('total', ioutcome, 'num_diff', DISEASE_SHORT_NAMES$acronym[d], sep = '_'))) +
xlab ('Simulation years') + ylab ('Cases') + labs (title = paste(DISEASE_SHORT_NAMES$disease[d], ifelse(ioutcome == 'inc', 'incidence', 'deaths'))) +
theme(plot.title = element_text(hjust = 0.5, size = 12)) +
scale_color_discrete(name = paste(''), labels = c('Baseline', 'Difference', 'Scenario')) +
theme(plot.title = element_text(hjust = 0.5))
print(p_aggr_females_nd_list)
dev.off()
# p_aggr_females_list <- p_aggr_list_index
# index <- index + 1
#
}
}
}
p_aggr_males_d_list <- list()
index <- 1
for (ioutcome in i_outcome_d) {
for (d in 1:nrow(DISEASE_SHORT_NAMES)) {
if (isex == 'male' && (DISEASE_SHORT_NAMES$disease[d] %in% c('breast cancer', 'uterine cancer'))
|| DISEASE_SHORT_NAMES$acronym[d] == 'no_pif' || DISEASE_SHORT_NAMES$acronym[d] == 'other' || DISEASE_SHORT_NAMES$is_not_dis[d] !=0){
}
else{
pdf(paste0(output_dir, 'total_', DISEASE_SHORT_NAMES$sname[d],'_', 'female', '_', ioutcome, '.pdf'),width=5.5,height=4)
p_aggr_males_d_list <- ggplot(aggregate_males_df[1:84,], aes(x = aggregate_males_df[['simulation_yr']])) +
geom_line(mapping = aes(y = aggregate_males_df[[paste('total', ioutcome, 'num_bl', DISEASE_SHORT_NAMES$sname[d], sep = '_')]], colour = paste('total', ioutcome, 'num_bl', DISEASE_SHORT_NAMES$sname[d], sep = '_'))) +
theme_classic() +
geom_hline(yintercept=0, linetype='dashed', color = 'black') +
geom_line(mapping = aes(y = aggregate_males_df[[paste('total', ioutcome, 'num_sc', DISEASE_SHORT_NAMES$sname[d], sep = '_')]], colour = paste('total', ioutcome, 'num_sc', DISEASE_SHORT_NAMES$sname[d], sep = '_'))) +
geom_line(mapping = aes(y = aggregate_males_df[[paste('total', ioutcome, 'num_diff', DISEASE_SHORT_NAMES$sname[d], sep = '_')]], colour = paste('total', ioutcome, 'num_diff', DISEASE_SHORT_NAMES$sname[d], sep = '_'))) +
xlab ('Simulation years') + ylab ('Cases') + labs (title = paste(DISEASE_SHORT_NAMES$disease[d], ifelse(ioutcome == 'inc', 'incidence', 'deaths'))) +
theme(plot.title = element_text(hjust = 0.5, size = 12)) +
scale_color_discrete(name = paste(''), labels = c('Baseline', 'Difference', 'Scenario')) +
theme(plot.title = element_text(hjust = 0.5))
print(p_aggr_males_d_list)
dev.off()
# p_aggr_males_list <- p_aggr_list_index
# index <- index + 1
#
}
}
}
p_aggr_males_nd_list <- list()
index <- 1
for (ioutcome in i_outcome_nd) {
for (d in 1:nrow(DISEASE_SHORT_NAMES)) {
if (DISEASE_SHORT_NAMES$is_not_dis[d] != 1 || DISEASE_SHORT_NAMES$acronym[d] == 'other' || DISEASE_SHORT_NAMES$acronym[d] == 'no_pif'){
}
else {
pdf(paste0(output_dir, 'total_', DISEASE_SHORT_NAMES$acronym[d],'_', 'female', '_', ioutcome, '.pdf'),width=5.5,height=4)
p_aggr_males_nd_list <- ggplot(aggregate_males_df[1:84,], aes(x = aggregate_males_df[['simulation_yr']])) +
geom_line(mapping = aes(y = aggregate_males_df[[paste('total', ioutcome, 'num_bl', DISEASE_SHORT_NAMES$acronym[d], sep = '_')]], colour = paste('total', ioutcome, 'num_bl', DISEASE_SHORT_NAMES$acronym[d], sep = '_'))) +
theme_classic() +
geom_hline(yintercept=0, linetype='dashed', color = 'black') +
geom_line(mapping = aes(y = aggregate_males_df[[paste('total', ioutcome, 'num_sc', DISEASE_SHORT_NAMES$acronym[d], sep = '_')]], colour = paste('total', ioutcome, 'num_sc', DISEASE_SHORT_NAMES$acronym[d], sep = '_'))) +
geom_line(mapping = aes(y = aggregate_males_df[[paste('total', ioutcome, 'num_diff', DISEASE_SHORT_NAMES$acronym[d], sep = '_')]], colour = paste('total', ioutcome, 'num_diff', DISEASE_SHORT_NAMES$acronym[d], sep = '_'))) +
xlab ('Simulation years') + ylab ('Cases') + labs (title = paste(DISEASE_SHORT_NAMES$disease[d], ifelse(ioutcome == 'inc', 'incidence', 'deaths'))) +
theme(plot.title = element_text(hjust = 0.5, size = 12)) +
scale_color_discrete(name = paste(''), labels = c('Baseline', 'Difference', 'Scenario')) +
theme(plot.title = element_text(hjust = 0.5))
print(p_aggr_males_nd_list)
dev.off()
# p_aggr_males_list <- p_aggr_list_index
# index <- index + 1
#
}
}
}
total_aggr <- cbind.data.frame(total_aggr1, total_aggr2)
total_aggr$sim_year <- seq.int(nrow(total_aggr))
## Uncomment to see total data frame
View(total_aggr)
p_aggr_list <- list()
index <- 1
for (outcome in i_outcome) {
for (disease in i_disease) {
# outcome <- i_outcome[1]
# disease <- i_disease[1]
p_aggr_list_index <- ggplot(total_aggr[1:79,], aes(x = total_aggr[['sim_year']])) +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_bl', disease, sep = '_')]], colour = paste('total', outcome, 'num_bl', disease, sep = '_'))) +
theme_classic() +
geom_hline(yintercept=0, linetype='dashed', color = 'black') +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_sc', disease, sep = '_')]], colour = paste('total', outcome, 'num_sc', disease, sep = '_'))) +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_diff', disease, sep = '_')]], colour = paste('total', outcome, 'num_diff', disease, sep = '_'))) +
xlab ('Simulation years') + ylab ('Cases') + labs (title = paste(disease, outcome)) +
theme(plot.title = element_text(hjust = 0.5, size = 12)) +
scale_color_discrete(name = paste(''), labels = c('Baseline', 'Difference', 'Scenario')) +
theme(plot.title = element_text(hjust = 0.5))
p_aggr_list[[index]] <- p_aggr_list_index
index <- index + 1
}
}
index <- 1
interpolation_index <- 1
for (outcome in i_outcome) {
for (disease in i_disease) {
file_name = paste('output/graphs', 'Aggregated Outcomes', outcome, disease, '.jpeg', sep=' ')
jpeg(file_name)
print(p_aggr_list[[index]])
index <- index + 1
dev.off()
}
}
p_aggregated <- do.call(marrangeGrob, list(grobs=p_aggr_list, nrow = 2, ncol = 2))
p_aggregated
# ---- chunk-16 ----
### aDJUST THIS CODE TO FO FEMALES, MALES, DISEASE, NOS DISEASES AND UPDATE LIST OF OUTCOMES.
####This plot has to be customised to in_outcomes, here, only totals shown, but specifications are up to the user. ADD LOOP for all outcomes over time and total TABLE.
####[] is used here to indicate the number of simulation years into the future.
####Disease outcomes has to be changed to the outcome of interest
#### Test code with loops for aggregated outcomes diseases burden. NOT WORKING.
### Compare with loops for age and sex cohort outcomes.
p_aggr_list <- list()
index <- 1
for (outcome in i_outcome_d) {
for (disease in i_disease) {
# outcome <- i_outcome[1]
# disease <- i_disease[1]
p_aggr_list_index <- ggplot(total_aggr[1:79,], aes(x = total_aggr[['sim_year']])) +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_bl', disease, sep = '_')]], colour = paste('total', outcome, 'num_bl', disease, sep = '_'))) +
theme_classic() +
geom_hline(yintercept=0, linetype='dashed', color = 'black') +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_sc', disease, sep = '_')]], colour = paste('total', outcome, 'num_sc', disease, sep = '_'))) +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_diff', disease, sep = '_')]], colour = paste('total', outcome, 'num_diff', disease, sep = '_'))) +
xlab ('Simulation years') + ylab ('Cases') + labs (title = paste(disease, outcome)) +
theme(plot.title = element_text(hjust = 0.5, size = 12)) +
scale_color_discrete(name = paste(''), labels = c('Baseline', 'Difference', 'Scenario')) +
theme(plot.title = element_text(hjust = 0.5))
p_aggr_list[[index]] <- p_aggr_list_index
index <- index + 1
}
}
index <- 1
interpolation_index <- 1
for (outcome in i_outcome_d) {
for (disease in i_disease) {
file_name = paste('output/graphs', 'Aggregated Outcomes', outcome, disease, '.jpeg', sep=' ')
jpeg(file_name)
print(p_aggr_list[[index]])
index <- index + 1
dev.off()
}
}
p_aggregated <- do.call(marrangeGrob, list(grobs=p_aggr_list, nrow = 2, ncol = 2))
p_aggregated
p_aggr_list <- list()
index <- 1
for (outcome in i_outcome_d) {
for (disease in 1:nrow(DISEASE_SHORT_NAMES$sname)) {
# outcome <- i_outcome[1]
# disease <- i_disease[1]
p_aggr_list_index <- ggplot(total_aggr[1:79,], aes(x = total_aggr[['sim_year']])) +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_bl', disease, sep = '_')]], colour = paste('total', outcome, 'num_bl', disease, sep = '_'))) +
theme_classic() +
geom_hline(yintercept=0, linetype='dashed', color = 'black') +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_sc', disease, sep = '_')]], colour = paste('total', outcome, 'num_sc', disease, sep = '_'))) +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_diff', disease, sep = '_')]], colour = paste('total', outcome, 'num_diff', disease, sep = '_'))) +
xlab ('Simulation years') + ylab ('Cases') + labs (title = paste(disease, outcome)) +
theme(plot.title = element_text(hjust = 0.5, size = 12)) +
scale_color_discrete(name = paste(''), labels = c('Baseline', 'Difference', 'Scenario')) +
theme(plot.title = element_text(hjust = 0.5))
p_aggr_list[[index]] <- p_aggr_list_index
index <- index + 1
}
}
p_aggr_list <- list()
index <- 1
for (outcome in i_outcome_d) {
for (d in 1:nrow(DISEASE_SHORT_NAMES)) {
# outcome <- i_outcome[1]
# disease <- i_disease[1]
p_aggr_list_index <- ggplot(total_aggr[1:79,], aes(x = total_aggr[['sim_year']])) +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_bl', DISEASE_SHORT_NAMES$sname[d], sep = '_')]], colour = paste('total', outcome, 'num_bl', DISEASE_SHORT_NAMES$sname[d], sep = '_'))) +
theme_classic() +
geom_hline(yintercept=0, linetype='dashed', color = 'black') +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_sc', DISEASE_SHORT_NAMES$sname[d], sep = '_')]], colour = paste('total', outcome, 'num_sc', DISEASE_SHORT_NAMES$sname[d], sep = '_'))) +
geom_line(mapping = aes(y = total_aggr[[paste('total', outcome, 'num_diff', DISEASE_SHORT_NAMES$sname[d], sep = '_')]], colour = paste('total', outcome, 'num_diff', DISEASE_SHORT_NAMES$sname[d], sep = '_'))) +
xlab ('Simulation years') + ylab ('Cases') + labs (title = paste(DISEASE_SHORT_NAMES$sname[d], outcome)) +
theme(plot.title = element_text(hjust = 0.5, size = 12)) +
scale_color_discrete(name = paste(''), labels = c('Baseline', 'Difference', 'Scenario')) +
theme(plot.title = element_text(hjust = 0.5))
p_aggr_list[[index]] <- p_aggr_list_index
index <- index + 1
}
}
## Create a copy of aggregate_frame_females.
total_aggr1 <- aggregate_frame_females
## Add aggregate_frame_males values to it
for (i in 1:ncol(aggregate_frame_females)){
total_aggr1[i] <- total_aggr1[i] + aggregate_frame_males[i]
}
## Add data frames 2 with life years (check adds Lx and Lwx at the beginning of the variable name)
total_aggr2 <- aggregate_frame_females2
## Add aggregate_frame_males values to it
for (i in 1:ncol(aggregate_frame_females2)){
total_aggr2[i] <- total_aggr2[i] + aggregate_frame_males2[i]
}
#### Compare old data with new data
### Differences ischemic stroke
datanewiscs <- dplyr::filter(data_extracted_new, cause_name == "Ischemic stroke")
dataoldiscs <- dplyr::filter(data_extracted_, cause_name == "Ischemic stroke")
#### Compare old data with new data
### Differences ischemic stroke
datanewiscs <- dplyr::filter(data_extracted_new, cause_name == "Ischemic stroke")
dataoldiscs <- dplyr::filter(data_extracted_old, cause_name == "Ischemic stroke")
summary(comparedf(datanewiscs, dataoldiscs, by = "val"))
summary(comparedf(datanewiscs, dataoldisc))
summary(comparedf(datanewiscs, dataoldiscs))
View(MSLT_DF)
View(local_goverment_areas)
dataoldiscs$location_id
unique(dataoldiscs$location_name)
unique(datanewiscs$location_name)
data.frame(unique(datanewiscs$location_name, dataoldiscs$location_name))
data.frame(unique(datanewiscs$location_name), unique(dataoldiscs$location_name))
data.frame(order(unique(datanewiscs$location_name)), order(unique(dataoldiscs$location_name))
data.frame(order(unique(datanewiscs$location_name)), order(unique(dataoldiscs$location_name)))
new_loc <- order(unique(datanewiscs$location_name))
old_loc <- order(unique(dataoldiscs$location_name))
new_loc <- unique(datanewiscs$location_name)
old_loc <- unique(dataoldiscs$location_name)
new_loc <- unique(datanewiscs$location_name) %>% order()
new_loc <- unique(datanewiscs$location_name)
new_loc <- unique(datanewiscs$location_name)  %>%
select(sort(current_vars()))
select(sort(current_vars())
new_loc <- as.data.frame(unique(datanewiscs$location_name))  %>%
select(sort(current_vars()))
select(sort(current_vars()))
old_loc <- as.data.frame(unique(dataoldiscs$location_name)) %>%
select(sort(current_vars()))
View(old_loc)
new_loc <- as.data.frame(unique(datanewiscs$location_name))  %>%
select(sort(current_vars()))
old_loc <- as.data.frame(unique(dataoldiscs$location_name)) %>%
select(sort(current_vars()))
View(new_loc)
new_loc[,order(colnames(new_loc))]
old_loc[,order(colnames(old_loc))]
new_loc <- as.data.frame(unique(datanewiscs$location_name))
old_loc <- as.data.frame(unique(dataoldiscs$location_name))
new_loc[,order(colnames(new_loc))]
old_loc[,order(colnames(old_loc))]
new_loc <- new_loc[,order(colnames(new_loc))]
old_loc <- old_loc[,order(colnames(old_loc))]
summary(comaparedf(new_loc, old_loc))
summary(comparedf(new_loc, old_loc))
new_loc <- as.data.frame(new_loc[,order(colnames(new_loc))])
old_loc <- as.data.frame(old_loc[,order(colnames(old_loc))])
new_loc <- new_loc[,order(colnames(new_loc))]
old_loc <- old_loc[,order(colnames(old_loc))]
new_loc <- as.data.frame(unique(datanewiscs$location_name))
old_loc <- as.data.frame(unique(dataoldiscs$location_name))
new_loc <- new_loc[,order(colnames(new_loc))]
old_loc <- old_loc[,order(colnames(old_loc))]
compare <- as.data.frame(c(new_loc, old_loc)))
compare <- as.data.frame(c(new_loc, old_loc))
View(compare)
data.frame(order(unique(datanewiscs$location_name)), order(unique(dataoldiscs$location_name)))
new_loc
new_loc$loc <- as.data.frame(unique(datanewiscs$location_name))
new_loc$loc <- unique(datanewiscs$location_name))
new_loc$loc <- unique(datanewiscs$location_name)
new_loc <- as.data.frame()
new_loc <- as.data.frame()
new_loc <- data.frame()
new_loc$loc <- unique(datanewiscs$location_name)
loc <- unique(datanewiscs$location_name)
new_loc$loc <- loc
new_loc$loc <- loc
### Order data
datanewiscs <- datanewiscs[order(datanewiscs$measure_id)]
### Order data
datanewiscs <- datanewiscs[order(datanewiscs$measure_name)]
### Order data
datanewiscs <- datanewiscs[order(datanewiscs$location_name)]
View(local_goverment_areas)
#### Compare old data with new data
### Differences ischemic stroke
datanewiscs <- dplyr::filter(data_extracted_new, cause_name == "Ischemic stroke", location_name == "City of London")
dataoldiscs <- dplyr::filter(data_extracted_old, cause_name == "Ischemic stroke", location_name == "City of London")
#### Compare old data with new data
### Differences ischemic stroke
datanewiscs <- dplyr::filter(data_extracted_new, cause_name == "Ischemic stroke", location_name == "Greater London")
dataoldiscs <- dplyr::filter(data_extracted_old, cause_name == "Ischemic stroke", location_name == "Greater London")
### Order data
datanewiscs <- datanewiscs[order(datanewiscs$location_name)]
### Order data
datanewiscs <- datanewiscs[order(datanewiscs$measure_id)]
### Order data
datanewiscs <- datanewiscs[order(datanewiscs$measure_name)]
### Order data
datanewiscs <- datanewiscs[order(datanewiscs$measure_name),]
### Order data
datanewiscs <- datanewiscs[order(datanewiscs$measure_id),]
### Order data
datanewiscs <- datanewiscs[order(datanewiscs$measure_id, datanewiscs$measure_name,
datanewiscs$location_id, datanewiscs$location_name,
datanewiscs$sex_id, datanewiscs$sex_name, datanewiscs$age_id,
datanewiscs$age_name, datanewiscs$cause_id, datanewiscs$cause_name,
datanewiscs$metric_id, datanewiscs$metric_name, datanewiscs$),]
### Order data
datanewiscs <- datanewiscs[order(datanewiscs$measure_id, datanewiscs$measure_name,
datanewiscs$location_id, datanewiscs$location_name,
datanewiscs$sex_id, datanewiscs$sex_name, datanewiscs$age_id,
datanewiscs$age_name, datanewiscs$cause_id, datanewiscs$cause_name,
datanewiscs$metric_id, datanewiscs$metric_name),]
dataoldiscs <- dataoldiscs[order(dataoldiscs$measure_id, dataoldiscs$measure_name,
dataoldiscs$location_id, dataoldiscs$location_name,
dataoldiscs$sex_id, dataoldiscs$sex_name, dataoldiscs$age_id,
dataoldiscs$age_name, dataoldiscs$cause_id, dataoldiscs$cause_name,
dataoldiscs$metric_id, dataoldiscs$metric_name),]
summary(comaredf(datanewiscs, dataoldiscs))
summary(comparedf(datanewiscs, dataoldiscs))
areas <- unique(disbayes_output$area)
mslt_df <- as.data.frame(NULL)
mslt_df_list <- list()
index <- 1
for (a in areas) {
### selected data here should be gbd_data with all data, see how the code works with it
data_1 <-  dplyr::filter(gbd_data, area == a)
data_2 <- dplyr::filter(disbayes_output, area == a)
mslt_df_list[[index]] <- GenMSLTDF(data_1, data_2)
mslt_df_list[[index]]<- replace(mslt_df_list[[index]], is.na(mslt_df_list[[index]]), 0)
### Change names to match with Rob's injury code
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "deaths_rate_pdri"] <- "deaths_rate_pedestrian"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "ylds (years lived with disability)_rate_pdri"] <- "ylds_rate_pedestrian"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "deaths_rate_cyri"] <- "deaths_rate_cyclist"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "ylds (years lived with disability)_rate_cyri"] <- "ylds_rate_cyclist"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "deaths_rate_mtri"] <- "deaths_rate_motorcyclist"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "ylds (years lived with disability)_rate_mtri"] <- "ylds_rate_motorcyclist"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "deaths_rate_mvri"] <- "deaths_rate_motor"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "ylds (years lived with disability)_rate_mvri"] <- "ylds_rate_motor"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "deaths_rate_otri"] <- "deaths_rate_other"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "ylds (years lived with disability)_rate_otri"] <- "ylds_rate_other"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "deaths_rate_lwri"] <- "deaths_rate_lri"
names(mslt_df_list[[index]])[names(mslt_df_list[[index]]) == "ylds (years lived with disability)_rate_lwri"] <- "ylds_rate_lri"
mslt_df_list[[index]]$sex <- as.character(mslt_df_list[[index]]$sex)
index <- index + 1
}
View(mslt_df_list[[1]])
View(gbd_data$deaths_med_iscs)
View(gbd_data$deaths_rate_adaod)
