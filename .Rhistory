# For the UK (GBD Ref): For the UK the analyses is by Local Administrative Area (level 6 in GBD hierarchy).
# Do a set of Dismod outputs with remission for cancers to test the difference in results.
# use yml to define variables to facilitate reuse of code. See Carls suggestions.config.yml
# Get all data from the GBD
# add diabetes do CVD loop
# add road injuries spreadsheet and data (by victim type)
# apply RRs correction methods (see Jan's 2010 paper, this is what rr erzats function does)
# Modelling of lower respiratory infecito
getwd()
# Change to own wd
# ---- chunk-intro ----
require(dplyr)
require(tidyverse)
require(knitr)
require(kableExtra)
require(citr)
require(gridExtra)
require(cowplot)
require(ggpubr)
require(grid)
require(ggplot2)
require(gridExtra)
require(pillar)
require(devtools)
require(janitor)
require(reshape2)
# rm (list = ls())
options(scipen=999)
# ---- chunk-1 ----
source("code/functions.R")
## AVOID HARDCODING NAMES
year <- 2017
year_trend <- 2007
i_age_cohort <- c(22, 27, 32, 37, 42, 47, 52, 57, 62, 67, 72, 77, 82, 87, 92, 97)
i_sex <- c("male", "female")
# ---- chunk-2 ----
## Create baseline life tables
general_life_table_list_bl <- list()
index <- 1
for (age in i_age_cohort){
for (sex in i_sex){
# cat("age ", age, " and sex ", sex, "\n") #Uncomment to see index
general_life_table_list_bl[[index]] <- RunLifeTable(in_idata = mslt_df,
in_sex = sex, in_mid_age = age)
index <- index + 1
}
}
## Uncommnet to check life table list
# View(general_life_table_list_bl[[2]])
# ---- chunk-3 ----
## Create basline disease life tables
disease_life_table_list_bl <- list()
index <- 1
for (age in i_age_cohort){
for (sex in i_sex){
for (d in 1:nrow(disease_short_names)){
# Exclude non-males diseases
if (sex == "male" && disease_short_names$sname[d] == "brsc"){
}
if (sex == "male" && disease_short_names$sname[d] == "utrc"){
}
## Exclude non-chronic diseases and road injuries
if (disease_short_names$is_not_dis[d] == 1 | disease_short_names$is_not_dis[d] == 2){
}
else {
disease_life_table_list_bl[[index]] <- RunDisease(in_idata = mslt_df, in_sex = sex, in_mid_age = age, in_disease = disease_short_names$sname[d])
index <- index + 1
}
}
}
}
Q
index_output_list <- index_output_list + 1
index_output_list <- index_output_list + 1
index_output_list <- index_output_list + 1
index_output_list <- index_output_list + 1
index_output_list <- index_output_list + 1
index_output_list <- index_output_list + 1
require(dplyr)
require(tidyverse)
require(knitr)
require(kableExtra)
require(citr)
require(gridExtra)
require(cowplot)
require(ggpubr)
require(grid)
require(ggplot2)
require(gridExtra)
require(pillar)
require(devtools)
require(janitor)
require(reshape2)
year <- 2017
year_trend <- 2007
i_age_cohort <- c(22, 27, 32, 37, 42, 47, 52, 57, 62, 67, 72, 77, 82, 87, 92, 97)
i_sex <- c("male", "female")
non_disease_mortality_sc <- list()
index <- 1
index_output_list <- 1
for (age in i_age_cohort) {
for (sex in i_sex) {
for (d in 1:nrow(disease_short_names)){
## Exclude lower respiratory infection
if ((disease_short_names$sname[d] == "lwri" || disease_short_names$is_not_dis[d] == 0 ||
disease_short_names$is_not_dis[d] == 2 ) ){
}
else {
var_name <- paste0("deaths_rate_", disease_short_names$sname[d])
for (i in 1:length(non_disease_list_bl)){
if (length(names(select(non_disease_list_bl[[i]], contains(var_name)))) > 0){
non_disease_mortality_sc[[index_output_list]] <-  (non_disease_list_bl[[i]][[var_name]] %>% as.data.frame()) *
rate_ratio_mortality
index_output_list <- index_output_list + 1
}
}
}
index <- index + 1
}
}
}
non_disease_list_bl <- list()
index <- 1
for (age in i_age_cohort) {
for (sex in i_sex) {
for (d in 1:nrow(disease_short_names)){
## Exclude chronic disease and all-cause mortality and pyld
if (disease_short_names$is_not_dis[d] == 0 | disease_short_names$is_not_dis[d] == 2){
}
else {
non_disease_list_bl[[index]] <-  RunNonDisease (mslt_df, in_sex = sex, in_mid_age = age, in_non_disease = disease_short_names$sname[d])
index <- index + 1
}
}
}
}
test_non_disease <- RunNonDisease(mslt_df, "male", 2, "pdri")
# ---- chunk 5 ----
## add baseline diabetes prevalence
## calculate
# ---- chunk-6 ----
## Create value to use as factor changing incidence rates. REPLACE with (1-PIF) and use multiplicative PIF for common disease risk factors.
## Rob's comment about PIFs calcs: see function "health burden" in metahit_functions.R
## this is an example, to genrate scenario life tables, we need pifs by age and gender
incidence_change <- 0.95
## Example value to mofify road injuries and lwri mortality and ylds
rate_ratio_mortality <- 1.1
rate_ratio <- ylds <- 1.1
lwri_mortality_change <- 0.95
lwri_yld_change <- 0.95
non_disease_list_bl <- list()
index <- 1
for (age in i_age_cohort) {
for (sex in i_sex) {
for (d in 1:nrow(disease_short_names)){
## Exclude chronic disease and all-cause mortality and pyld
if (disease_short_names$is_not_dis[d] == 0 || disease_short_names$is_not_dis[d] == 2) {
}
else {
non_disease_list_bl[[index]] <-  RunNonDisease (mslt_df, in_sex = sex, in_mid_age = age, in_non_disease = disease_short_names$sname[d])
index <- index + 1
}
}
}
}
non_disease_mortality_sc <- list()
index <- 1
index_output_list <- 1
for (age in i_age_cohort) {
for (sex in i_sex) {
for (d in 1:nrow(disease_short_names)){
## Exclude lower respiratory infection
if ((disease_short_names$sname[d] == "lwri" || disease_short_names$is_not_dis[d] == 0 ||
disease_short_names$is_not_dis[d] == 2 ) ){
}
else {
var_name <- paste0("deaths_rate_", disease_short_names$sname[d])
for (i in 1:length(non_disease_list_bl)){
if (length(names(select(non_disease_list_bl[[i]], contains(var_name)))) > 0){
non_disease_mortality_sc[[index_output_list]] <-  (non_disease_list_bl[[i]][[var_name]] %>% as.data.frame()) *
rate_ratio_mortality
index_output_list <- index_output_list + 1
}
}
}
index <- index + 1
}
}
}
non_disease_mortality_sc[[1]] %>% View()
length(non_disease_list_bl)
rate_ratio_mortality
non_disease_mortality_sc <- list()
index <- 1
index_output_list <- 1
for (age in i_age_cohort) {
for (sex in i_sex) {
for (d in 1:nrow(disease_short_names)){
## Exclude lower respiratory infection
if ((disease_short_names$sname[d] == "lwri" || disease_short_names$is_not_dis[d] == 0 ||
disease_short_names$is_not_dis[d] == 2 ) ){
}
else {
var_name <- paste0("deaths_rate_", disease_short_names$sname[d])
for (i in 1:length(non_disease_list_bl)){
if (length(names(select(non_disease_list_bl[[i]], contains(var_name)))) > 0){
non_disease_mortality_sc[[index_output_list]] <-
(non_disease_list_bl[[i]][[var_name]] %>% as.data.frame()) * rate_ratio_mortality
browser()
index_output_list <- index_output_list + 1
}
}
}
index <- index + 1
}
}
}
i
View(non_disease_list_bl[[2]])
View(non_disease_list_bl)
View(non_disease_list_bl[[1]])
View(non_disease_list_bl[[2]])
View(non_disease_list_bl[[3]])
non_disease_list_bl <- list()
index <- 1
for (age in i_age_cohort) {
for (sex in i_sex) {
for (d in 1:nrow(disease_short_names)){
## Exclude chronic disease and all-cause mortality and pyld
if (disease_short_names$is_not_dis[d] == 0 || disease_short_names$is_not_dis[d] == 2) {
}
else {
non_disease_list_bl[[index]] <-  RunNonDisease (mslt_df, in_sex = sex, in_mid_age = age, in_non_disease = disease_short_names$sname[d])
index <- index + 1
}
}
}
}
non_disease_mortality_sc[[1]] %>% View()
non_disease_list_bl[[1]] %>% View()
non_disease_list_bl <- list()
index <- 1
for (age in i_age_cohort) {
for (sex in i_sex) {
for (d in 1:nrow(disease_short_names)){
## Exclude chronic disease and all-cause mortality and pyld
if (disease_short_names$is_not_dis[d] == 0 | disease_short_names$is_not_dis[d] == 2) {
}
else {
non_disease_list_bl[[index]] <-  RunNonDisease (mslt_df, in_sex = sex, in_mid_age = age, in_non_disease = disease_short_names$sname[d])
index <- index + 1
}
}
}
}
non_disease_list_bl[[1]] %>% View()
View(mslt_df)
gbd_df <- gbd_city_region_2017
## Add numberical age categories
gbd_df$age_cat <- 0
gbd_df$age_cat [gbd_df$age =="Under 5"] <- 2
gbd_df$age_cat [gbd_df$age =="5 to 9"] <- 7
gbd_df$age_cat [gbd_df$age =="10 to 14"] <- 12
gbd_df$age_cat [gbd_df$age =="15 to 19"] <- 17
gbd_df$age_cat [gbd_df$age =="20 to 24"] <- 22
gbd_df$age_cat [gbd_df$age =="25 to 29"] <- 27
gbd_df$age_cat [gbd_df$age =="30 to 34"] <- 32
gbd_df$age_cat [gbd_df$age =="35 to 39"] <- 37
gbd_df$age_cat [gbd_df$age =="40 to 44"] <- 42
gbd_df$age_cat [gbd_df$age =="45 to 49"] <- 47
gbd_df$age_cat [gbd_df$age =="50 to 54"] <- 52
gbd_df$age_cat [gbd_df$age =="55 to 59"] <- 57
gbd_df$age_cat [gbd_df$age =="60 to 64"] <- 62
gbd_df$age_cat [gbd_df$age =="65 to 69"] <- 67
gbd_df$age_cat [gbd_df$age =="70 to 74"] <- 72
gbd_df$age_cat [gbd_df$age =="75 to 79"] <- 77
gbd_df$age_cat [gbd_df$age =="80 to 84"] <- 82
gbd_df$age_cat [gbd_df$age =="85 to 89"] <- 87
gbd_df$age_cat [gbd_df$age =="90 to 94"] <- 92
gbd_df$age_cat [gbd_df$age =="95 plus"] <- 97
## change sex to lower case
gbd_df$sex <- tolower(gbd_df$sex)
## Create age_sex category, NOT SURE WHERE THIS IS BEING USED
gbd_df$sex_age_cat <- paste(gbd_df$sex,gbd_df$age_cat, sep = "_"  )
## Order data
gbd_df <- gbd_df[order(gbd_df$sex, gbd_df$age_cat),]
## Calculate rates per one, base on aggregated numbers from localities
for (dm in 1:length(disease_measures_list)){
for (d in 1:nrow(disease_short_names)){
dn <- disease_short_names$disease[d]
dmeasure <- disease_measures_list[dm] %>% as.character()
gbd_df[[tolower(paste(dmeasure, "rate", disease_short_names$sname[d], sep = "_"))]] <- gbd_df[[tolower(paste(dmeasure, "number", disease_short_names$sname[d], sep = "_"))]]/gbd_df$population_number
}
}
## Write csv file to process in Dismod
write_csv(gbd_df, "data/city regions/bristol/dismod/input_data.csv")
# ---- chunk-2.5: Disability weights ----
all_ylds_df <- dplyr::select(gbd_df, starts_with("ylds (years lived with disability)_number"))
## Adjust all cause ylds for included diseases and injuries (exclude all cause )
gbd_df[["allc_ylds_adj_rate_1"]] <- (gbd_df$`ylds (years lived with disability)_number_allc`  - rowSums(select(all_ylds_df, -`ylds (years lived with disability)_number_allc`))) /
gbd_df$population_number
# ------------------- DWs ---------------------------#
disease_short_names <- mutate_all(disease_short_names, funs(tolower))
for (d in 1:nrow(disease_short_names)){
gbd_df[[paste0("dw_adj_", disease_short_names$sname[d])]] <-
(gbd_df[[paste0("ylds (years lived with disability)_number_", disease_short_names$sname[d])]] /
gbd_df[[paste0("prevalence_number_", disease_short_names$sname[d])]]) /
( 1 - gbd_df[["allc_ylds_adj_rate_1"]])
}
gbd_df[mapply(is.infinite, gbd_df)] <- 0
gbd_df <- replace(gbd_df, is.na(gbd_df), 0)
mslt_df <- data.frame(age = rep(c(0:100), 2), sex = append(rep("male", 101),
rep("female", 101)))
## Add age groups for cohort modelling
mslt_df$age_cat [mslt_df$age == 2] <- 2
mslt_df$age_cat [mslt_df$age == 7] <- 7
mslt_df$age_cat [mslt_df$age == 12] <- 12
mslt_df$age_cat [mslt_df$age == 17] <- 17
mslt_df$age_cat [mslt_df$age == 22] <- 22
mslt_df$age_cat [mslt_df$age == 27] <- 27
mslt_df$age_cat [mslt_df$age == 32] <- 32
mslt_df$age_cat [mslt_df$age == 37] <- 37
mslt_df$age_cat [mslt_df$age == 42] <- 42
mslt_df$age_cat [mslt_df$age == 47] <- 47
mslt_df$age_cat [mslt_df$age == 52] <- 52
mslt_df$age_cat [mslt_df$age == 57] <- 57
mslt_df$age_cat [mslt_df$age == 62] <- 62
mslt_df$age_cat [mslt_df$age == 67] <- 67
mslt_df$age_cat [mslt_df$age == 72] <- 72
mslt_df$age_cat [mslt_df$age == 77] <- 77
mslt_df$age_cat [mslt_df$age == 82] <- 82
mslt_df$age_cat [mslt_df$age == 87] <- 87
mslt_df$age_cat [mslt_df$age == 92] <- 92
mslt_df$age_cat [mslt_df$age == 97] <- 97
## Add population numbers (here we can choose, from GBD derived or directly from synthetic population)
mslt_df$sex_age_cat <- paste(mslt_df$sex,mslt_df$age, sep = "_"  )
## GBD population
gbd_popn_df <- select(gbd_df, population_number, sex_age_cat)
## Synthetic population (TO DO)
synthetic_pop <- read_csv("data/population/pop_england_2017.csv")
mslt_df <- left_join(mslt_df, gbd_popn_df, by = "sex_age_cat")
# ---- chunk-6.1: Interpolate rates ----
## Data has to be interpolated from 5-year age groups to 1-year age groups.
## Create variable names.
for (d in 1:nrow(disease_short_names)){
if (disease_short_names$is_not_dis[d] == 0){
var_name <- paste0("dw_adj_", disease_short_names$sname[d])
mslt_df[, var_name] <- 1
}
}
## Interpolate dw rates (NOT LOOPING THROUGH DISEASES)
for (d in 1:nrow(disease_short_names)){
for(sex_index in i_sex) {
for (var in c('dw_adj')){#, 'deaths_rate', 'ylds (years lived with disability)_rate')){
if (disease_short_names$is_not_dis[d] == 0) {
var_name <- paste0(var, '_', disease_short_names$sname[d])
data <- filter(gbd_df, sex == sex_index) %>% select(age, sex, age_cat, starts_with(var_name))
# browser()
x <- data$age_cat
y <- log(data[[var_name]])
InterFunc <- stats::splinefun(x, y, method = "monoH.FC", ties = mean)
interpolated <- as.data.frame(InterFunc(seq(0, 100, 1)))
age <- seq(0, 100, by = 1)
interpolated <- cbind(interpolated, age)
interpolated[,1] <- exp(interpolated[,1])
## Add column with sex to create age_sex category to then merge with input_life table
interpolated$sex <- paste(sex_index)
interpolated$sex_age_cat <- paste(interpolated$sex, interpolated$age, sep = "_")
## Change name of column death to mx and ylds to pyld_rate to then merge
## with input_life table
colnames(interpolated)[1] <- var_name
interpolated[IsNanDataFrame(interpolated)] <- 0
interpolated[IsInfDataFrame(interpolated)] <- 0
mslt_df[mslt_df$sex_age_cat == interpolated$sex_age_cat
& mslt_df$sex == sex_index, ][[var_name]] <- interpolated[[var_name]]
index <- index + 1
}
}
}
}
## Interpolate all cause mortality and pylds and road injuries
### Create variable names
for (d in 1:nrow(disease_short_names)){
if (disease_short_names$is_not_dis[d] != 0){
var_name1 <- paste0("deaths_rate", "_", disease_short_names$sname[d])
var_name2 <- paste0("ylds (years lived with disability)_rate", "_", disease_short_names$sname[d])
mslt_df[, var_name1] <- 1
mslt_df[, var_name2] <- 1
}
}
### Deaths
for (d in 1:nrow(disease_short_names)){
for(sex_index in i_sex) {
for (var in c('deaths_rate')) {
if (disease_short_names$is_not_dis[d] != 0){
var_name1 <- paste0(var, '_', disease_short_names$sname[d])
data <- filter(gbd_df, sex == sex_index) %>% select(age, sex, age_cat, starts_with(var_name1))
x <- data$age_cat
y <- log(data[[var_name1]])
InterFunc <- stats::splinefun(x, y, method = "monoH.FC", ties = mean)
interpolated <- as.data.frame(InterFunc(seq(0, 100, 1)))
age <- seq(0, 100, by = 1)
interpolated <- cbind(interpolated, age)
interpolated[,1] <- exp(interpolated[,1])
## Add column with sex to create age_sex category to then merge with input_life table
interpolated$sex <- paste(sex_index)
interpolated$sex_age_cat <- paste(interpolated$sex, interpolated$age, sep = "_")
## Change name of column death to mx and ylds to pyld_rate to then merge
## with input_life table
colnames(interpolated)[1] <- var_name1
interpolated[IsNanDataFrame(interpolated)] <- 0
interpolated[IsInfDataFrame(interpolated)] <- 0
mslt_df[mslt_df$sex_age_cat == interpolated$sex_age_cat
& mslt_df$sex == sex_index, ][[var_name1]] <- interpolated[[var_name1]]
}
}
}
}
# names(gbd_df)
# gbd_df$`ylds (years lived with disability)_rate_mtri`
# gbd_df$deaths_rate_lwri
### YLDs
for (d in 1:nrow(disease_short_names)){
for(sex_index in i_sex) {
for (var in c("ylds (years lived with disability)_rate")){
if (disease_short_names$is_not_dis[d] != 0){
var_name2 <- paste0(var, '_', disease_short_names$sname[d])
data <- filter(gbd_df, sex == sex_index) %>% select(age, sex, age_cat, starts_with(var_name2))
# browser() Data input and x and y are fine, different for all, however, interpolated values are all the same.
x <- data$age_cat
y <- log(data[[var_name2]])
interpolated <- as.data.frame(InterFunc(seq(0, 100, 1)))
# browser()
age <- seq(0, 100, by = 1)
interpolated <- cbind(interpolated, age)
interpolated[,1] <- exp(interpolated[,1])
# browser()
## Add column with sex to create age_sex category to then merge with input_life table
interpolated$sex <- paste(sex_index)
interpolated$sex_age_cat <- paste(interpolated$sex, interpolated$age, sep = "_")
## Change name of column death to mx and ylds to pyld_rate to then merge
## with input_life table
colnames(interpolated)[1] <- var_name2
# browser()
interpolated[IsNanDataFrame(interpolated)] <- 0
interpolated[IsInfDataFrame(interpolated)] <- 0
mslt_df[mslt_df$sex_age_cat == interpolated$sex_age_cat
& mslt_df$sex == sex_index, ][[var_name2]] <- interpolated[[var_name2]]
#}
}
}
}
}
## Give names to mortality all cause and pYLD all cause to match general_life_table function.
names(mslt_df)[names(mslt_df) == "deaths_rate_allc"] <- "mx"
names(mslt_df)[names(mslt_df) == "ylds (years lived with disability)_rate_allc"] <- "pyld_rate"
# add incidence, case fatality and prevalence to mslt data frame
disease_life_table_input_1 <- select(disease_life_table_input, -c(age, sex))
mslt_df <- left_join(mslt_df, disease_life_table_input_1, by = "sex_age_cat")
## ADJUST DISABILTIY WEIGHTS WITH DISBAYES GENERATED OUTCOMES
mslt_df$
write_csv(mslt_df, ("data/mslt_df.csv"))
View(mslt_df)
non_disease_list_bl <- list()
index <- 1
for (age in i_age_cohort) {
for (sex in i_sex) {
for (d in 1:nrow(disease_short_names)){
## Exclude chronic disease and all-cause mortality and pyld
if (disease_short_names$is_not_dis[d] == 0 || disease_short_names$is_not_dis[d] == 2) {
}
else {
non_disease_list_bl[[index]] <-  RunNonDisease (mslt_df, in_sex = sex, in_mid_age = age, in_non_disease = disease_short_names$sname[d])
index <- index + 1
}
}
}
}
test_non_disease <- RunNonDisease(mslt_df, "male", 2, "pdri")
View(test_non_disease)
incidence_change <- 0.95
## Example value to mofify road injuries and lwri mortality and ylds
rate_ratio_mortality <- 1.1
rate_ratio <- ylds <- 1.1
lwri_mortality_change <- 0.95
lwri_yld_change <- 0.95
non_disease_mortality_sc <- list()
index <- 1
index_output_list <- 1
for (age in i_age_cohort) {
for (sex in i_sex) {
for (d in 1:nrow(disease_short_names)){
## Exclude lower respiratory infection
if ((disease_short_names$sname[d] == "lwri" || disease_short_names$is_not_dis[d] == 0 ||
disease_short_names$is_not_dis[d] == 2 ) ){
}
else {
var_name <- paste0("deaths_rate_", disease_short_names$sname[d])
for (i in 1:length(non_disease_list_bl)){
if (length(names(select(non_disease_list_bl[[i]], contains(var_name)))) > 0){
non_disease_mortality_sc[[index_output_list]] <-
(non_disease_list_bl[[i]][[var_name]] %>% as.data.frame()) * rate_ratio_mortality
index_output_list <- index_output_list + 1
}
}
}
index <- index + 1
}
}
}
View(non_disease_mortality_sc[[1])
View(non_disease_mortality_sc[[1]]
