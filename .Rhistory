## Replace NAs with blank
DISEASE_SHORT_NAMES$acronym[is.na(DISEASE_SHORT_NAMES$acronym)] <- "no_pif"
## Add column to match names from mh-execute
write_csv(DISEASE_SHORT_NAMES, "data/parameters/disease_names.csv")
disease_measures_list <- data.frame(measure = unique(data_extracted$measure_name)) %>%
pull(measure) %>%
as.character() %>%
as.list()
View(DISEASE_SHORT_NAMES)
View(DISEASE_SHORT_NAMES)
DISEASE_SHORT_NAMES$females <- ifelse(DISEASE_SHORT_NAMES$disease %in% c("prostate cancer"), 0, 1)
GenOutDisbayes <- function(i_data) {
disbayes_output_list <- list()
index_f <- 1
for (d in 1:nrow(DISEASE_SHORT_NAMES)){
for (sex_index in i_sex){
if (DISEASE_SHORT_NAMES$males == 0 ||  DISEASE_SHORT_NAMES$females == 0 ||
DISEASE_SHORT_NAMES$is_not_dis[d] == 0 || DISEASE_SHORT_NAMES$acronym[d] == 'no_pif' || DISEASE_SHORT_NAMES$acronym[d] == 'other'){
}
else {
data <- i_data
resu <- disbayes:::disbayes(dat = data,
## You can supply either estimates and denominators, or estimates with credible intervals, or numerators and denominators.  See help(disbayes)
inc = "inc",
inc_denom = "pop",
prev_num = "prevn",
prev_denom = "prevdenom",
mort = "mort",
mort_denom = "pop",
## You'll need to change this for different diseases:
## the age below which all case fatalities are
## assumed equal in the smoothed model
eqage = 30,
smooth = TRUE  # or FALSE if don't want smoothed estimates
)
## Posterior medians and 95% credible intervals for all unknowns in the model
disbayes_output_list[[index_f]] <- disbayes:::summary.disbayes(resu)
disbayes_output_list[[index_f]]$area <- i_data$city_region
disbayes_output_list[[index_f]]$sex <- i_data$sex
disbayes_output_list[[index_f]]$disease <- i_data$disease
index_f <- index_f + 1
}
}
}
return(disbayes_output_list)
}
index <- 1
for (c in c(unique(disbayes_inputs$cityregion))) {
for (d in c(unique(disbayes_inputs$disease))){
for (s in c(unique(disbayes_inputs$sex))){
data <- dplyr::filter(disbayes_inputs, cityregion == c , disease == d , sex == s)
disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(data)
# names(disbayes_output_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
# ## Add directly to dibayes input list, first 100 observations? Check with Chris
# disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
#
#
# ## add disease names
# disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
#
# ## add sex
# disbayes_output_list[[index]]$sex <- sex_index
#
# ## create sex and disease category to then join to input for disease life table dataset
#
# disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
disbayes_inputs <- readRDS("/media/sf_C_DRIVE/Metahit/mh-mslt/data/city regions/Input disbayes/disbayes_inputs.rds")
index <- 1
for (c in c(unique(disbayes_inputs$cityregion))) {
for (d in c(unique(disbayes_inputs$disease))){
for (s in c(unique(disbayes_inputs$sex))){
data <- dplyr::filter(disbayes_inputs, cityregion == c , disease == d , sex == s)
disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(data)
# names(disbayes_output_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
# ## Add directly to dibayes input list, first 100 observations? Check with Chris
# disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
#
#
# ## add disease names
# disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
#
# ## add sex
# disbayes_output_list[[index]]$sex <- sex_index
#
# ## create sex and disease category to then join to input for disease life table dataset
#
# disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
i_sex <- c('male', 'female')
index <- 1
for (c in c(unique(disbayes_inputs$cityregion))) {
for (d in c(unique(disbayes_inputs$disease))){
for (s in c(unique(disbayes_inputs$sex))){
data <- dplyr::filter(disbayes_inputs, cityregion == c , disease == d , sex == s)
disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(data)
# names(disbayes_output_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
# ## Add directly to dibayes input list, first 100 observations? Check with Chris
# disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
#
#
# ## add disease names
# disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
#
# ## add sex
# disbayes_output_list[[index]]$sex <- sex_index
#
# ## create sex and disease category to then join to input for disease life table dataset
#
# disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
#### CODE for packaged disbayes
GenOutDisbayes <- function(i_data) {
disbayes_output_list <- list()
index_f <- 1
for (d in 1:nrow(DISEASE_SHORT_NAMES)){
for (sex_index in i_sex){
data <- i_data
resu <- disbayes:::disbayes(dat = data,
## You can supply either estimates and denominators, or estimates with credible intervals, or numerators and denominators.  See help(disbayes)
inc = "inc",
inc_denom = "pop",
prev_num = "prevn",
prev_denom = "prevdenom",
mort = "mort",
mort_denom = "pop",
## You'll need to change this for different diseases:
## the age below which all case fatalities are
## assumed equal in the smoothed model
eqage = 30,
smooth = TRUE  # or FALSE if don't want smoothed estimates
)
## Posterior medians and 95% credible intervals for all unknowns in the model
disbayes_output_list[[index_f]] <- disbayes:::summary.disbayes(resu)
disbayes_output_list[[index_f]]$area <- i_data$city_region
disbayes_output_list[[index_f]]$sex <- i_data$sex
disbayes_output_list[[index_f]]$disease <- i_data$disease
index_f <- index_f + 1
}
}
return(disbayes_output_list)
}
i_sex <- c('male', 'female')
### Loop to generate disbayes outputs for: diseases, sex and area. Uses GenOutDisbayes. Assumptions and inputs for disbayes
### need changing in the function.
index <- 1
for (c in c(unique(disbayes_inputs$cityregion))) {
for (d in c(unique(disbayes_inputs$disease))){
for (s in c(unique(disbayes_inputs$sex))){
if (DISEASE_SHORT_NAMES$males == 0 ||  DISEASE_SHORT_NAMES$females == 0 ||
DISEASE_SHORT_NAMES$is_not_dis[d] == 0 || DISEASE_SHORT_NAMES$acronym[d] == 'no_pif' || DISEASE_SHORT_NAMES$acronym[d] == 'other'){
}
else {
data <- dplyr::filter(disbayes_inputs, cityregion == c , disease == d , sex == s)
disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(data)
# names(disbayes_output_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
# ## Add directly to dibayes input list, first 100 observations? Check with Chris
# disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
#
#
# ## add disease names
# disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
#
# ## add sex
# disbayes_output_list[[index]]$sex <- sex_index
#
# ## create sex and disease category to then join to input for disease life table dataset
#
# disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
}
index <- 1
for (c in c(unique(disbayes_inputs$cityregion))) {
for (d in c(unique(disbayes_inputs$disease))){
for (s in c(unique(disbayes_inputs$sex))){
if (DISEASE_SHORT_NAMES$males[d] == 0 ||  DISEASE_SHORT_NAMES$females[d] == 0 ||
DISEASE_SHORT_NAMES$is_not_dis[d] == 0 || DISEASE_SHORT_NAMES$acronym[d] == 'no_pif' || DISEASE_SHORT_NAMES$acronym[d] == 'other'){
}
else {
data <- dplyr::filter(disbayes_inputs, cityregion == c , disease == d , sex == s)
disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(data)
# names(disbayes_output_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
# ## Add directly to dibayes input list, first 100 observations? Check with Chris
# disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
#
#
# ## add disease names
# disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
#
# ## add sex
# disbayes_output_list[[index]]$sex <- sex_index
#
# ## create sex and disease category to then join to input for disease life table dataset
#
# disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
}
index <- 1
for (c in c(unique(disbayes_inputs$cityregion))) {
for (d in c(unique(disbayes_inputs$disease))){
for (s in c(unique(disbayes_inputs$sex))){
if (DISEASE_SHORT_NAMES$males[d] == 0 ||  DISEASE_SHORT_NAMES$females[d] == 0 ||
DISEASE_SHORT_NAMES$is_not_dis[d] != 0 || DISEASE_SHORT_NAMES$acronym[d] == 'no_pif' || DISEASE_SHORT_NAMES$acronym[d] == 'other'){
}
else {
data <- dplyr::filter(disbayes_inputs, cityregion == c , disease == d , sex == s)
disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(data)
# names(disbayes_output_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
# ## Add directly to dibayes input list, first 100 observations? Check with Chris
# disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
#
#
# ## add disease names
# disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
#
# ## add sex
# disbayes_output_list[[index]]$sex <- sex_index
#
# ## create sex and disease category to then join to input for disease life table dataset
#
# disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
}
GenOutDisbayes <- function(i_data) {
disbayes_output_list <- list()
index_f <- 1
for (d in 1:nrow(DISEASE_SHORT_NAMES)){
for (sex_index in i_sex){
data <-  i_data
if(DISEASE_SHORT_NAMES$is_not_dis == 0){
resu <- disbayes:::disbayes(dat = data,
## You can supply either estimates and denominators, or estimates with credible intervals, or numerators and denominators.  See help(disbayes)
inc = "inc",
inc_denom = "pop",
prev_num = "prevn",
prev_denom = "prevdenom",
mort = "mort",
mort_denom = "pop",
## You'll need to change this for different diseases:
## the age below which all case fatalities are
## assumed equal in the smoothed model
eqage = 30,
smooth = TRUE  # or FALSE if don't want smoothed estimates
)
## Posterior medians and 95% credible intervals for all unknowns in the model
disbayes_output_list[[index_f]] <- disbayes:::summary.disbayes(resu)
disbayes_output_list[[index_f]]$area <- i_data$city_region
disbayes_output_list[[index_f]]$sex <- i_data$sex
disbayes_output_list[[index_f]]$disease <- i_data$disease
index_f <- index_f + 1
}
}
}
return(disbayes_output_list)
}
index <- 1
for (c in c(unique(disbayes_inputs$cityregion))) {
for (d in c(unique(disbayes_inputs$disease))){
for (s in c(unique(disbayes_inputs$sex))){
data <- dplyr::filter(disbayes_inputs, cityregion == c , disease == d , sex == s)
if (data$sex == "male" &&  data$disease  %in% c("brsc", "utrc") || data$sex == "female" &&  data$disease == "prsc"){}
else {
disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(data)
# names(disbayes_output_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
# ## Add directly to dibayes input list, first 100 observations? Check with Chris
# disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
#
#
# ## add disease names
# disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
#
# ## add sex
# disbayes_output_list[[index]]$sex <- sex_index
#
# ## create sex and disease category to then join to input for disease life table dataset
#
# disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
}
i_sex <- c('male', 'female')
### Loop to generate disbayes outputs for: diseases, sex and area. Uses GenOutDisbayes. Assumptions and inputs for disbayes
### need changing in the function.
index <- 1
for (c in c(unique(disbayes_inputs$cityregion))) {
for (d in c(unique(disbayes_inputs$disease))){
for (s in c(unique(disbayes_inputs$sex))){
data <- dplyr::filter(disbayes_inputs, cityregion == c , disease == d , sex == s)
browser()
if (data$sex == "male" &&  data$disease  %in% c("brsc", "utrc") || data$sex == "female" &&  data$disease == "prsc"){}
else {
disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(data)
# names(disbayes_output_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
# ## Add directly to dibayes input list, first 100 observations? Check with Chris
# disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
#
#
# ## add disease names
# disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
#
# ## add sex
# disbayes_output_list[[index]]$sex <- sex_index
#
# ## create sex and disease category to then join to input for disease life table dataset
#
# disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
}
i_sex <- c('male', 'female')
### Loop to generate disbayes outputs for: diseases, sex and area. Uses GenOutDisbayes. Assumptions and inputs for disbayes
### need changing in the function.
index <- 1
for (c in c(unique(disbayes_inputs$cityregion))) {
for (d in c(unique(disbayes_inputs$disease))){
for (s in c(unique(disbayes_inputs$sex))){
data <- dplyr::filter(disbayes_inputs, cityregion == c , disease == d , sex == s)
browser()
if (data$sex == "male" &&  data$disease  %in% c("brsc", "utrc") || data$sex == "female" &&  data$disease == "prsc"){}
else {
# disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(data)
# names(disbayes_output_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
# ## Add directly to dibayes input list, first 100 observations? Check with Chris
# disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
#
#
# ## add disease names
# disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
#
# ## add sex
# disbayes_output_list[[index]]$sex <- sex_index
#
# ## create sex and disease category to then join to input for disease life table dataset
#
# disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
}
index <- 1
for (c in c(unique(disbayes_inputs$cityregion))) {
for (d in c(unique(disbayes_inputs$disease))){
for (s in c(unique(disbayes_inputs$sex))){
data <- dplyr::filter(disbayes_inputs, cityregion == c , disease == d , sex == s)
if (data$sex == "male" &&  data$disease  %in% c("brsc", "utrc") || data$sex == "female" &&  data$disease == "prsc"){}
else {
# disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(data)
# names(disbayes_output_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
# ## Add directly to dibayes input list, first 100 observations? Check with Chris
# disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
#
#
# ## add disease names
# disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
#
# ## add sex
# disbayes_output_list[[index]]$sex <- sex_index
#
# ## create sex and disease category to then join to input for disease life table dataset
#
# disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
}
disbayes_output_list_city_regions <- list()
index <- 1
for (c in c(unique(disbayes_inputs$cityregion))) {
for (d in c(unique(disbayes_inputs$disease))){
for (s in c(unique(disbayes_inputs$sex))){
data <- dplyr::filter(disbayes_inputs, cityregion == c , disease == d , sex == s)
if (data$sex == "male" &&  data$disease  %in% c("brsc", "utrc") || data$sex == "female" &&  data$disease == "prsc"){}
else {
# disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(data)
# names(disbayes_output_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
# ## Add directly to dibayes input list, first 100 observations? Check with Chris
# disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
#
#
# ## add disease names
# disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
#
# ## add sex
# disbayes_output_list[[index]]$sex <- sex_index
#
# ## create sex and disease category to then join to input for disease life table dataset
#
# disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
}
i_sex <- c('male', 'female')
### Loop to generate disbayes outputs for: diseases, sex and area. Uses GenOutDisbayes. Assumptions and inputs for disbayes
### need changing in the function.
disbayes_output_list_city_regions <- list()
index <- 1
for (c in c(unique(disbayes_inputs$cityregion))) {
for (d in c(unique(disbayes_inputs$disease))){
for (s in c(unique(disbayes_inputs$sex))){
if (data$sex == "male" &&  data$disease  %in% c("brsc", "utrc") || data$sex == "female" &&  data$disease == "prsc"){}
else {
data <- dplyr::filter(disbayes_inputs, cityregion == c , disease == d , sex == s)
# disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(data)
# names(disbayes_output_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
# ## Add directly to dibayes input list, first 100 observations? Check with Chris
# disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
#
#
# ## add disease names
# disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
#
# ## add sex
# disbayes_output_list[[index]]$sex <- sex_index
#
# ## create sex and disease category to then join to input for disease life table dataset
#
# disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
}
disbayes_output_list_city_regions <- list()
index <- 1
for (c in c(unique(disbayes_inputs$cityregion))) {
for (d in c(unique(disbayes_inputs$disease))){
for (s in c(unique(disbayes_inputs$sex))){
data <- dplyr::filter(disbayes_inputs, cityregion == c , disease == d , sex == s)
if (data$sex == "male" &&  data$disease  %in% c("brsc", "utrc") || data$sex == "female" &&  data$disease == "prsc"){}
else {
# disbayes_output_list_city_regions[[index]] <- GenOutDisbayes(data)
# names(disbayes_output_list_city_regions)[index] <- paste0(names(disbayes_input_list_city_regions[i]))
# ## Add directly to dibayes input list, first 100 observations? Check with Chris
# disbayes_output_list[[index]] <- as.data.frame(summary(gbdcf)$summary)[c(1:101, 420:519), c(6,4,8)]
#
#
# ## add disease names
# disbayes_output_list[[index]]$disease <- disease_short_names$sname[d]
#
# ## add sex
# disbayes_output_list[[index]]$sex <- sex_index
#
# ## create sex and disease category to then join to input for disease life table dataset
#
# disbayes_output_list[[index]]$sex_disease <- paste(sex_index, disease_short_names$sname[d], sep = "_")
index <- index + 1
}
}
}
}
unique(disbayes_inputs$cityregion
unique(disbayes_inputs$cityregion
unique(disbayes_inputs$cityregion
conflict_prefer("chisq.test", "stats")
GenOutDisbayes <- function(i_data) {
disbayes_output_list <- list()
index_f <- 1
for (d in 1:nrow(DISEASE_SHORT_NAMES)){
for (sex_index in i_sex){
data <-  i_data
if(DISEASE_SHORT_NAMES$is_not_dis == 0){
resu <- disbayes:::disbayes(dat = data,
## You can supply either estimates and denominators, or estimates with credible intervals, or numerators and denominators.  See help(disbayes)
inc = "inc",
inc_denom = "pop",
prev_num = "prevn",
prev_denom = "prevdenom",
mort = "mort",
mort_denom = "pop",
## You'll need to change this for different diseases:
## the age below which all case fatalities are
## assumed equal in the smoothed model
eqage = 30,
smooth = TRUE  # or FALSE if don't want smoothed estimates
)
## Posterior medians and 95% credible intervals for all unknowns in the model
disbayes_output_list[[index_f]] <- disbayes:::summary.disbayes(resu)
disbayes_output_list[[index_f]]$area <- i_data$cityregion
disbayes_output_list[[index_f]]$sex <- i_data$sex
disbayes_output_list[[index_f]]$disease <- i_data$disease
index_f <- index_f + 1
}
}
}
return(disbayes_output_list)
}
